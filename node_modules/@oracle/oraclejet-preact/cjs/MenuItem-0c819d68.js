/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var hooks = require('preact/hooks');
require('./UNSAFE_Text.js');

var hooks_UNSAFE_useHover = require('./hooks/UNSAFE_useHover.js');
require('./utils/UNSAFE_classNames.js');
var hooks_UNSAFE_useId = require('./hooks/UNSAFE_useId.js');
var utils_UNSAFE_mergeProps = require('./utils/UNSAFE_mergeProps.js');
var hooks_UNSAFE_usePress = require('./hooks/UNSAFE_usePress.js');
require('./utils/PRIVATE_clientHints.js');
var preact = require('preact');
var clientHints = require('./clientHints-e821b5ee.js');
var classNames = require('./classNames-55bceee6.js');
var Text = require('./Text-cdd6f2fd.js');

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * Licensed under The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
/**
 * Context used to pass menu information without having to pass it to menu children props.
 * We want to communicate information down to any interested menu item children.
 */
const MenuContext = preact.createContext({
    onClose: () => null,
    currentKey: undefined,
    showFocusRing: false
});

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * Licensed under The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
/**
 * Utility hook for consuming the MenuContext
 *
 * @returns The value of MenuContext provider
 */
function useMenuContext() {
    return hooks.useContext(MenuContext);
}

const styles = {
  menuItemContainer: "_17876eg",
  focused: "qinu8s",
  variant: {
    default: {
      menuItemContainer: "_8kqhsa",
      hover: "_1pghquj",
      pseudohover: "a3k8sy"
    },
    destructive: {
      menuItemContainer: "_18l9dkr",
      hover: "_123woi2",
      pseudohover: "gfxxfs"
    }
  },
  iconLabelContainer: "_1homfv4",
  labelContainer: "_1rmwgrq",
  iconContainer: "_1hyxnw0",
  startIconContainer: "cl4q1q",
  endIconContainer: "yx2cjf",
  disabledContainer: "_54xf9b"
};
function MenuItem(props) {
  return jsxRuntime.jsx(BaseMenuItem, Object.assign({}, props, {
    role: "menuitem"
  }));
}
const isHybrid = clientHints.getClientHints().hoverSupport === 'events';
function BaseMenuItem({
  label,
  onAction,
  startIcon,
  endIcon,
  role,
  isChecked,
  isDisabled = false,
  variant = 'default'
}) {
  const {
    onClose,
    currentKey,
    showFocusRing
  } = useMenuContext();
  const uniqueID = hooks_UNSAFE_useId.useId();
  const id = hooks.useMemo(() => `oj-menu-item-${uniqueID}`, [uniqueID]);
  const isCurrent = currentKey === id;
  const menuItemRef = hooks.useRef(null);
  const {
    hoverProps,
    isHover
  } = hooks_UNSAFE_useHover.useHover({
    isDisabled: !isHybrid
  });

  const handleItemSelection = () => {
    onClose === null || onClose === void 0 ? void 0 : onClose({
      reason: 'itemAction'
    });
    onAction === null || onAction === void 0 ? void 0 : onAction();
  };

  const {
    pressProps
  } = hooks_UNSAFE_usePress.usePress(handleItemSelection, {
    isDisabled
  });
  hooks.useLayoutEffect(() => {
    var _a;

    if (isCurrent) {
      (_a = menuItemRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }, [isCurrent]);
  const menuItemContainerClasses = classNames.classNames([styles.menuItemContainer, !isDisabled && styles.variant[variant].menuItemContainer, isDisabled && styles.disabledContainer, !isHybrid && !isDisabled && styles.variant[variant].pseudohover, isHybrid && isHover && !isDisabled && styles.variant[variant].hover, isCurrent && !!showFocusRing && styles.focused]);
  const startIconContainerClasses = classNames.classNames([styles.iconLabelContainer, styles.iconContainer, styles.startIconContainer]);
  const labelContainerClasses = classNames.classNames([styles.iconLabelContainer, styles.labelContainer]);
  const endIconContainerClasses = classNames.classNames([styles.iconLabelContainer, styles.iconContainer, styles.endIconContainer]);
  return jsxRuntime.jsxs("a", Object.assign({
    ref: menuItemRef,
    class: menuItemContainerClasses
  }, utils_UNSAFE_mergeProps.mergeProps(hoverProps, pressProps), {
    role: role,
    "data-oj-menu-item-key": id
  }, isDisabled && {
    'aria-disabled': true
  }, role !== 'menuitem' && {
    'aria-checked': isChecked
  }, {
    tabIndex: isCurrent ? 0 : -1
  }, {
    children: [startIcon && jsxRuntime.jsx("span", Object.assign({
      class: startIconContainerClasses
    }, {
      children: startIcon
    })), jsxRuntime.jsx("span", Object.assign({
      class: labelContainerClasses
    }, {
      children: jsxRuntime.jsx(Text.Text, Object.assign({
        variant: "inherit",
        size: "md"
      }, {
        children: label
      }))
    })), endIcon && jsxRuntime.jsx("span", Object.assign({
      class: endIconContainerClasses
    }, {
      children: endIcon
    }))]
  }));
}

exports.BaseMenuItem = BaseMenuItem;
exports.MenuContext = MenuContext;
exports.MenuItem = MenuItem;
/*  */
//# sourceMappingURL=MenuItem-0c819d68.js.map
