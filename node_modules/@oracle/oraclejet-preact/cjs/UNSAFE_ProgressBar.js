/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./tslib.es6-6f60dd09.js');
var jsxRuntime = require('preact/jsx-runtime');
require('./utils/UNSAFE_classNames.js');
require("identity-obj-proxy");
var hooks_UNSAFE_useUser = require('./hooks/UNSAFE_useUser.js');
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
var PRIVATE_Meter = require('./PRIVATE_Meter.js');
var classNames = require('./classNames-55bceee6.js');
require('preact/hooks');
require('./UNSAFE_Environment.js');
require('preact');
require('./UNSAFE_Layer.js');
require('preact/compat');

/**
 * A progress bar allows the user to visualize the progression of an extended computer operation.
 */

function ProgressBar(_a) {
  var {
    value,
    max
  } = _a,
      otherProps = tslib_es6.__rest(_a, ["value", "max"]);

  return value === 'indeterminate' ? jsxRuntime.jsx(IndeterminateProgressBar, Object.assign({}, otherProps)) : jsxRuntime.jsx(DeterminateProgressBar, Object.assign({
    value: value,
    max: max
  }, otherProps));
}

const IndeterminateProgressBar = ({
  accessibleLabel,
  id,
  width,
  edge = 'none'
}) => {
  const {
    direction
  } = hooks_UNSAFE_useUser.useUser();
  const classes = classNames.classNames([styles.value, styles.indeterminate, styles[direction]]);
  const baseClasses = classNames.classNames([styles.base, edge === 'none' && styles.standalone]);
  const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
  const ariaProps = {
    'aria-valuetext': accessibleLabel || translations.progressIndeterminate(),
    role: 'progressbar'
  };
  return jsxRuntime.jsx(PRIVATE_Meter.BarTrack, Object.assign({
    id: id,
    ariaProps: ariaProps,
    class: baseClasses,
    length: width
  }, {
    children: jsxRuntime.jsx(PRIVATE_Meter.BarValue, {
      class: classes
    })
  }));
};

const DeterminateProgressBar = ({
  value = 0,
  max = 100,
  id,
  width,
  edge = 'none'
}) => {
  const percentage = `${Math.min(Math.max(0, value / max), 1) * 100}%`;
  const baseClasses = classNames.classNames([styles.base, edge === 'none' && styles.standalone]);
  const ariaProps = {};
  ariaProps['aria-valuemin'] = value != null ? '0' : undefined;
  ariaProps['aria-valuemax'] = value != null ? `${max}` : undefined;
  ariaProps['aria-valuenow'] = value != null ? `${value}` : undefined;
  ariaProps['role'] = 'progressbar';
  return jsxRuntime.jsx(PRIVATE_Meter.BarTrack, Object.assign({
    ariaProps: ariaProps,
    id: id,
    length: width,
    class: baseClasses
  }, {
    children: jsxRuntime.jsx(PRIVATE_Meter.BarValue, {
      class: styles.value,
      length: percentage
    })
  }));
};

const styles = {
  base: "_1t6lsbn",
  value: "_1yrmw5d",
  indeterminate: "vvz5qb",
  standalone: "a3d2oy",
  rtl: "uo2nbp",
  ltr: "_1l9nvai"
};

exports.ProgressBar = ProgressBar;
/*  */
//# sourceMappingURL=UNSAFE_ProgressBar.js.map
