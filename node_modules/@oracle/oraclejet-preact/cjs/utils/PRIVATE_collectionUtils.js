/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils_UNSAFE_keys = require('./UNSAFE_keys.js');

/**
 * Returns the key from the item element
 */
const getKey = (item) => {
    return item.dataset['ojKeyType'] === 'number'
        ? Number(item.dataset['ojKey'])
        : item.dataset['ojKey'];
};
/**
 * A helper function that return the key of the first available item.
 */
const getFirstVisibleKey = (root, itemSelector) => {
    if (root) {
        const firstItem = root.querySelector(itemSelector);
        if (firstItem) {
            const key = getKey(firstItem);
            return key;
        }
    }
    return null;
};
/**
 * A helper function to find the element with the specified key.
 * Returns null if the element with key is not found.
 */
const findElementByKey = (root, key, itemSelector) => {
    if (root) {
        const items = root.querySelectorAll(itemSelector);
        for (let i = 0; i < items.length; i++) {
            const thisKey = getKey(items[i]);
            if (key == thisKey) {
                return items[i];
            }
        }
    }
    return null;
};
/**
 * A helper function that returns the key of the previous or the next item
 * given the specified current key
 */
const getPrevNextKey = (root, currentKey, isPrev, itemSelector) => {
    return () => {
        if (utils_UNSAFE_keys.isKeyDefined(currentKey) && root) {
            const currItem = findElementByKey(root, currentKey, itemSelector);
            if (currItem) {
                const nextItem = isPrev ? currItem.previousElementSibling : currItem.nextElementSibling;
                if (nextItem) {
                    const key = getKey(nextItem);
                    if (key != null) {
                        return key;
                    }
                }
            }
            return getFirstVisibleKey(root, itemSelector);
        }
        return null;
    };
};
/**
 * A helper function to get the key from an element
 */
const keyExtractor = (element, itemSelector) => {
    const item = element.closest(itemSelector);
    if (item) {
        const key = getKey(item);
        return key === undefined ? null : key;
    }
    return null;
};

exports.findElementByKey = findElementByKey;
exports.getFirstVisibleKey = getFirstVisibleKey;
exports.getPrevNextKey = getPrevNextKey;
exports.keyExtractor = keyExtractor;
/*  */
//# sourceMappingURL=PRIVATE_collectionUtils.js.map
