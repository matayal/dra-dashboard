/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var chai = require('chai');
var stringUtils = require('../../stringUtils-dad38408.js');

describe('Test StringUtils', () => {
    it('isEmpty', function () {
        // null
        chai.expect(stringUtils.isEmpty(null)).to.be.true;
        // string
        chai.expect(stringUtils.isEmpty('')).to.be.true;
        chai.expect(stringUtils.isEmpty('     ')).to.be.true;
        chai.expect(stringUtils.isEmpty('foo')).to.be.false;
        // object
        chai.expect(stringUtils.isEmpty({})).to.be.true;
        chai.expect(stringUtils.isEmpty({ foo: 'bar' })).to.be.true;
        chai.expect(stringUtils.isEmpty([])).to.be.true;
        chai.expect(stringUtils.isEmpty(['foo'])).to.be.false;
    });
    it('isEmptyOrUndefined', function () {
        // undefined
        chai.expect(stringUtils.isEmptyOrUndefined(undefined)).to.be.true;
        // null
        chai.expect(stringUtils.isEmptyOrUndefined(null)).to.be.true;
        // string
        chai.expect(stringUtils.isEmptyOrUndefined('')).to.be.true;
        chai.expect(stringUtils.isEmptyOrUndefined('     ')).to.be.true;
        chai.expect(stringUtils.isEmptyOrUndefined('foo')).to.be.false;
        // object
        chai.expect(stringUtils.isEmptyOrUndefined({})).to.be.true;
        chai.expect(stringUtils.isEmptyOrUndefined({ foo: 'bar' })).to.be.true;
        chai.expect(stringUtils.isEmptyOrUndefined([])).to.be.true;
        chai.expect(stringUtils.isEmptyOrUndefined(['foo'])).to.be.false;
    });
    it('isString', function () {
        // null
        chai.expect(stringUtils.isString(null)).to.be.false;
        // string
        chai.expect(stringUtils.isString('')).to.be.true;
        chai.expect(stringUtils.isString('     ')).to.be.true;
        chai.expect(stringUtils.isString('foo')).to.be.true;
        // object
        chai.expect(stringUtils.isString({})).to.be.false;
        chai.expect(stringUtils.isString({ foo: 'bar' })).to.be.false;
        chai.expect(stringUtils.isString([])).to.be.false;
        chai.expect(stringUtils.isString(['foo'])).to.be.false;
        chai.expect(stringUtils.isString(new String('foo'))).to.be.true;
    });
    it('trim', function () {
        let str;
        // null
        chai.expect(stringUtils.trim(null)).null;
        // string
        str = '';
        chai.expect(stringUtils.trim(str)).equal(str);
        chai.expect(stringUtils.trim('     ')).equal(str);
        str = 'foo';
        chai.expect(stringUtils.trim(str)).equal(str);
        chai.expect(stringUtils.trim('  foo  ')).equal(str);
        // object
        str = {};
        chai.expect(stringUtils.trim(str)).equal(str);
        str = { foo: 'bar' };
        chai.expect(stringUtils.trim(str)).equal(str);
        str = [];
        chai.expect(stringUtils.trim(str)).equal(str);
        str = ['foo'];
        chai.expect(stringUtils.trim(str)).equal(str);
        str = new String('  foo  ');
        chai.expect(stringUtils.trim(str)).equal('foo');
    });
    it('hashCode', function () {
        const hash1 = stringUtils.hashCode('foo');
        const hash2 = stringUtils.hashCode('bar');
        chai.expect(typeof hash1).equal('number');
        chai.expect(typeof hash2).equal('number');
        chai.expect(hash1).not.equal(hash2);
        chai.expect(stringUtils.hashCode('foo')).equal(hash1);
    });
});
/*  */
//# sourceMappingURL=stringUtils.spec.js.map
