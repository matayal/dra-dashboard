/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var hooks = require('preact/hooks');
var chai = require('chai');
var UNSAFE_InputPassword = require('../../UNSAFE_InputPassword.js');
var UNSAFE_Environment = require('../../UNSAFE_Environment.js');
var utils_UNSAFE_matchTranslationBundle = require('../../utils/UNSAFE_matchTranslationBundle.js');
var UNSAFE_InputText = require('../../UNSAFE_InputText.js');
require('../../UNSAFE_NumberInputText.js');
require('../../UNSAFE_TextArea.js');
require('../../UNSAFE_TextAreaAutosize.js');
var NumberInputText = require('../../NumberInputText-a83c00be.js');
var TextArea = require('../../TextArea-12e73bd6.js');
var TextAreaAutosize = require('../../TextAreaAutosize-e63611e0.js');
require('preact/compat');
require('../../hooks/UNSAFE_useFocusableTextField.js');
require('../../tslib.es6-6f60dd09.js');
require('../../hooks/UNSAFE_useFocusWithin.js');
require('../../useFocusWithin-145e8682.js');
require('../../hooks/UNSAFE_useFormContext.js');
require('preact');
require('../../hooks/UNSAFE_useFormFieldContext.js');
require('../../hooks/UNSAFE_useTextField.js');
require('../../hooks/UNSAFE_useId.js');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('../../UNSAFE_Label.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');

require('../../UNSAFE_TextField.js');
require('../../ReadonlyTextFieldInput-ec13a273.js');
require('../../hooks/UNSAFE_useTabbableMode.js');
require('../../utils/UNSAFE_interpolations/text.js');
require('../../keys-326d80d5.js');
require('../../_curry1-f1ebd742.js');
require('../../_has-2eedb7e0.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../FormControlUtils-c960c51d.js');
require('../../hooks/UNSAFE_useTranslationBundle.js');
require('../../UNSAFE_Layer.js');
require('../../UNSAFE_LabelValueLayout.js');
require('../../UNSAFE_Flex.js');
require('../../Flex-b113edd5.js');
require('../../utils/UNSAFE_interpolations/dimensions.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../utils/UNSAFE_size.js');
require('../../utils/UNSAFE_interpolations/boxalignment.js');
require('../../utils/UNSAFE_interpolations/flexbox.js');
require('../../flexbox-6deddb70.js');
require('../../utils/UNSAFE_interpolations/flexitem.js');
require('../../flexitem-0c1e9a72.js');
require('../../TextFieldInput-c5f861ba.js');
require('../../hooks/UNSAFE_useTextFieldInputHandlers.js');
require('../../utils/PRIVATE_clientHints.js');
require('../../clientHints-e821b5ee.js');
require('../../hooks/UNSAFE_useDebounce.js');
require('../../UNSAFE_LiveRegion.js');
require('../../UNSAFE_UserAssistance.js');
require('../../InlineHelpSource-c498a09a.js');
require('../../UNSAFE_ComponentMessage.js');
require('../../ComponentMessage-eea92e6b.js');
require('../../PRIVATE_Message.js');
require('../../utils/PRIVATE_timer.js');
require('../../MessageCloseButton-66757186.js');
require('../../UNSAFE_Button.js');
require('../../Button-07d97191.js');
require('../../UNSAFE_BaseButton.js');
require('../../BaseButton-9bfe304e.js');
require('../../hooks/UNSAFE_usePress.js');
require('../../hooks/UNSAFE_useActive.js');
require('../../utils/UNSAFE_mergeProps.js');
require('../../index-3651c0e7.js');
require('../../index-d5067e50.js');
require('../../UNSAFE_Icon.js');
require('../../Icon-c44e10c9.js');
require('../../hooks/UNSAFE_useTooltip.js');
require('../../UNSAFE_Floating.js');
require('../../Floating-48167355.js');
require('../../index-55dfe40c.js');
require('../../hooks/UNSAFE_useUser.js');
require('../../utils/PRIVATE_floatingUtils.js');
require('../../utils/PRIVATE_refUtils.js');
require('../../hooks/UNSAFE_useOutsideClick.js');
require('../../hooks/UNSAFE_useFocus.js');
require('../../hooks/UNSAFE_useTouch.js');
require('../../hooks/UNSAFE_useAnimation.js');
require('../../useAnimation-576ef8bc.js');
require('../../hooks/UNSAFE_useTheme.js');
require('../../MessageDetail-9ab2fec2.js');
require('../../MessageFormattingUtils-fac29bd4.js');
require('../../utils/UNSAFE_getLocale.js');
require('../../utils/UNSAFE_stringUtils.js');
require('../../stringUtils-dad38408.js');
require('../../Message.types-d5b1820f.js');
require('../../MessageStartIcon-5cdb8fbe.js');
require('../../MessageSummary-ea4ba9b8.js');
require('../../MessageTimestamp-cb7998db.js');
require('../../MessageUtils-c82ad817.js');
require('../../utils/UNSAFE_logger.js');
require('../../utils/UNSAFE_soundUtils.js');
require('../../MessagesManager-88e137d7.js');
require('../../PRIVATE_TransitionGroup.js');
require('../../hooks/UNSAFE_useMessagesContext.js');
require('../../UNSAFE_HiddenAccessible.js');
require('../../HiddenAccessible-42dab376.js');
require('../../ComponentMessageContainer-7880a1b9.js');
require('../../hooks/UNSAFE_useClearIcon.js');
require('../../utils/UNSAFE_componentUtils.js');
require('../../ClearIcon-be3cdd68.js');
require('../../hooks/UNSAFE_useCurrentValueReducer.js');
require('../../hooks/UNSAFE_useLengthFilter.js');
require('../../utils/UNSAFE_lengthFilter.js');
require('../../hooks/UNSAFE_usePrefixSuffix.js');
require('../../UNSAFE_PrefixSuffix.js');
require('../../UNSAFE_Grid.js');
require('../../utils/UNSAFE_interpolations/grid.js');

function __variableDynamicImportRuntime0__(path) {
  switch (path) {
    case '../../resources/nls/ar/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar/bundle.js'); });
    case '../../resources/nls/ar-XB/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar-XB/bundle.js'); });
    case '../../resources/nls/bg/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bg/bundle.js'); });
    case '../../resources/nls/bs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs/bundle.js'); });
    case '../../resources/nls/bs-Cyrl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs-Cyrl/bundle.js'); });
    case '../../resources/nls/cs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/cs/bundle.js'); });
    case '../../resources/nls/da/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/da/bundle.js'); });
    case '../../resources/nls/de/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/de/bundle.js'); });
    case '../../resources/nls/el/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/el/bundle.js'); });
    case '../../resources/nls/en/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en/bundle.js'); });
    case '../../resources/nls/en-XA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XA/bundle.js'); });
    case '../../resources/nls/en-XC/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XC/bundle.js'); });
    case '../../resources/nls/es/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/es/bundle.js'); });
    case '../../resources/nls/et/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/et/bundle.js'); });
    case '../../resources/nls/fi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fi/bundle.js'); });
    case '../../resources/nls/fr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr/bundle.js'); });
    case '../../resources/nls/fr-CA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr-CA/bundle.js'); });
    case '../../resources/nls/he/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/he/bundle.js'); });
    case '../../resources/nls/hr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hr/bundle.js'); });
    case '../../resources/nls/hu/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hu/bundle.js'); });
    case '../../resources/nls/is/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/is/bundle.js'); });
    case '../../resources/nls/it/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/it/bundle.js'); });
    case '../../resources/nls/ja/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ja/bundle.js'); });
    case '../../resources/nls/ko/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ko/bundle.js'); });
    case '../../resources/nls/lt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lt/bundle.js'); });
    case '../../resources/nls/lv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lv/bundle.js'); });
    case '../../resources/nls/ms/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ms/bundle.js'); });
    case '../../resources/nls/nl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/nl/bundle.js'); });
    case '../../resources/nls/no/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/no/bundle.js'); });
    case '../../resources/nls/pl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pl/bundle.js'); });
    case '../../resources/nls/pt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt/bundle.js'); });
    case '../../resources/nls/pt-PT/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt-PT/bundle.js'); });
    case '../../resources/nls/ro/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ro/bundle.js'); });
    case '../../resources/nls/ru/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ru/bundle.js'); });
    case '../../resources/nls/sk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sk/bundle.js'); });
    case '../../resources/nls/sl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sl/bundle.js'); });
    case '../../resources/nls/sr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr/bundle.js'); });
    case '../../resources/nls/sr-Latn/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr-Latn/bundle.js'); });
    case '../../resources/nls/sv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sv/bundle.js'); });
    case '../../resources/nls/th/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/th/bundle.js'); });
    case '../../resources/nls/tr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/tr/bundle.js'); });
    case '../../resources/nls/uk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/uk/bundle.js'); });
    case '../../resources/nls/vi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/vi/bundle.js'); });
    case '../../resources/nls/zh-Hans/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hans/bundle.js'); });
    case '../../resources/nls/zh-Hant/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hant/bundle.js'); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
function DemoInputPassword({ hasClearIcon, label }) {
    const [value, setValue] = hooks.useState('hello');
    const [count, setCount] = hooks.useState(0);
    const [committedValue, setCommittedValue] = hooks.useState('hello');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    const handleCommit = hooks.useCallback((detail) => {
        var _a;
        // setCount(count+1) does not increment it past 1.
        // https://overreacted.io/a-complete-guide-to-useeffect/
        // https://overreacted.io/react-as-a-ui-runtime/#batching
        // use the 'updater function' form
        setCount((prevCount) => prevCount + 1);
        setCommittedValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(UNSAFE_InputPassword.InputPassword, { hasClearIcon: hasClearIcon, label: label, onCommit: handleCommit, onInput: handleInput, value: value }), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedcountclass" }, { children: count })), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedvalueclass" }, { children: committedValue })), jsxRuntime.jsx("button", Object.assign({ class: "testclickmebutton", onClick: () => setValue('goodbye') }, { children: "Click me" }))] }));
}
function DemoInputText({ hasClearIcon, label, maxLength }) {
    const [value, setValue] = hooks.useState('hello');
    const [count, setCount] = hooks.useState(0);
    const [committedValue, setCommittedValue] = hooks.useState('hello');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    const handleCommit = hooks.useCallback((detail) => {
        var _a;
        // setCount(count+1) does not increment it past 1.
        // https://overreacted.io/a-complete-guide-to-useeffect/
        // https://overreacted.io/react-as-a-ui-runtime/#batching
        // use the 'updater function' form
        setCount((prevCount) => prevCount + 1);
        setCommittedValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(UNSAFE_InputText.InputText, { hasClearIcon: hasClearIcon, label: label, maxLength: maxLength, onCommit: handleCommit, onInput: handleInput, value: value }), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedcountclass" }, { children: count })), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedvalueclass" }, { children: committedValue })), jsxRuntime.jsx("button", Object.assign({ class: "testclickmebutton", onClick: () => setValue('goodbye') }, { children: "Click me" }))] }));
}
function DemoNumberInputText({ label }) {
    // Note: NumberInputText accepts non-numeric input so use 'hello'
    // and 'goodbye' values for consistency.
    const [value, setValue] = hooks.useState('hello');
    const [count, setCount] = hooks.useState(0);
    const [committedValue, setCommittedValue] = hooks.useState('hello');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    const handleCommit = hooks.useCallback((detail) => {
        var _a;
        // setCount(count+1) does not increment it past 1.
        // https://overreacted.io/a-complete-guide-to-useeffect/
        // https://overreacted.io/react-as-a-ui-runtime/#batching
        // use the 'updater function' form
        setCount((prevCount) => prevCount + 1);
        setCommittedValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(NumberInputText.NumberInputText, { label: label, onCommit: handleCommit, onInput: handleInput, value: value }), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedcountclass" }, { children: count })), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedvalueclass" }, { children: committedValue })), jsxRuntime.jsx("button", Object.assign({ class: "testclickmebutton", onClick: () => setValue('goodbye') }, { children: "Click me" }))] }));
}
function DemoTextArea({ label, maxLength }) {
    const [value, setValue] = hooks.useState('hello');
    const [count, setCount] = hooks.useState(0);
    const [committedValue, setCommittedValue] = hooks.useState('hello');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    const handleCommit = hooks.useCallback((detail) => {
        var _a;
        // setCount(count+1) does not increment it past 1.
        // https://overreacted.io/a-complete-guide-to-useeffect/
        // https://overreacted.io/react-as-a-ui-runtime/#batching
        // use the 'updater function' form
        setCount((prevCount) => prevCount + 1);
        setCommittedValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(TextArea.TextArea, { label: label, maxLength: maxLength, onCommit: handleCommit, onInput: handleInput, value: value }), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedcountclass" }, { children: count })), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedvalueclass" }, { children: committedValue })), jsxRuntime.jsx("button", Object.assign({ class: "testclickmebutton", onClick: () => setValue('goodbye') }, { children: "Click me" }))] }));
}
function DemoTextAreaAutosize({ label, maxLength }) {
    const [value, setValue] = hooks.useState('hello');
    const [count, setCount] = hooks.useState(0);
    const [committedValue, setCommittedValue] = hooks.useState('hello');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    const handleCommit = hooks.useCallback((detail) => {
        var _a;
        // setCount(count+1) does not increment it past 1.
        // https://overreacted.io/a-complete-guide-to-useeffect/
        // https://overreacted.io/react-as-a-ui-runtime/#batching
        // use the 'updater function' form
        setCount((prevCount) => prevCount + 1);
        setCommittedValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(TextAreaAutosize.TextAreaAutosize, { label: label, maxLength: maxLength, onCommit: handleCommit, onInput: handleInput, value: value }), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedcountclass" }, { children: count })), jsxRuntime.jsx("span", Object.assign({ class: "testcommittedvalueclass" }, { children: committedValue })), jsxRuntime.jsx("button", Object.assign({ class: "testclickmebutton", onClick: () => setValue('goodbye') }, { children: "Click me" }))] }));
}
async function getEnvironmentContext() {
    const locale = utils_UNSAFE_matchTranslationBundle.matchTranslationBundle(['en'], new Set(['en-US', 'en']));
    const { default: translations } = await __variableDynamicImportRuntime0__(`../../resources/nls/${locale}/bundle.ts`);
    return {
        translations: { '@oracle/oraclejet-preact': translations }
    };
}
const componentList = [
    { name: 'InputPassword', component: DemoInputPassword },
    { name: 'InputText', component: DemoInputText },
    { name: 'NumberInputText', component: DemoNumberInputText },
    { name: 'TextArea', component: DemoTextArea },
    { name: 'TextAreaAutosize', component: DemoTextAreaAutosize }
];
const componentWithClearIconList = [
    { name: 'InputPassword', component: DemoInputPassword },
    { name: 'InputText', component: DemoInputText }
];
const componentWithMaxLengthList = [
    { name: 'InputText', component: DemoInputText },
    { name: 'TextArea', component: DemoTextArea },
    { name: 'TextAreaAutosize', component: DemoTextAreaAutosize }
];
describe('Form Controls - onCommit', () => {
    let env;
    beforeEach(async function () {
        env = await getEnvironmentContext();
    });
    componentList.forEach((compObj) => it(`${compObj.name}: test initial value`, async () => {
        const label = 'test initial value';
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { label: label }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement.value).equal('hello');
    }));
    componentList.forEach((compObj) => it(`${compObj.name} test blur should not call onCommit`, async () => {
        const label = 'field label';
        const { container } = preact.render(jsxRuntime.jsxs(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: [jsxRuntime.jsx(compObj.component, { label: label }), jsxRuntime.jsx("button", {})] })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement.value).equal('hello');
        const countspan = container.querySelector('.testcommittedcountclass');
        const buttonElement = container.querySelector('.testclickmebutton');
        preact.act(() => {
            inputElement.focus();
        });
        preact.act(() => {
            buttonElement.focus();
        });
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'blur without editing, onCommit count should be 0').to.equal('0');
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: test Enter Enter Enter should not call onCommit`, async () => {
        const label = 'field label';
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { label: label }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement.value).equal('hello');
        const countspan = container.querySelector('.testcommittedcountclass');
        const valuespan = container.querySelector('.testcommittedvalueclass');
        chai.expect(valuespan === null || valuespan === void 0 ? void 0 : valuespan.textContent, 'initial render committed value').to.equal('hello');
        // expect onCommit not to be called at all yet
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'initial render, check onCommit count').to.equal('0');
        // Enter a few times should not affect value or commit count
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'Press Enter, check onCommit count').to.equal('0');
        chai.expect(valuespan === null || valuespan === void 0 ? void 0 : valuespan.textContent, 'after Enter, committed value').to.equal('hello');
    }));
    componentWithClearIconList.forEach((compObj) => 
    // click on enter over and over to make sure onCommit isn't being called but once.
    it(`${compObj.name} test click Clear Icon clears display value, Enter Enter Enter commits value once`, async () => {
        const label = 'field label';
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { label: label, hasClearIcon: "always" }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement.value).equal('hello');
        const countspan = container.querySelector('.testcommittedcountclass');
        const valuespan = container.querySelector('.testcommittedvalueclass');
        const clearIconSelector = '[title="Clear"]';
        // Get the parent element of the svg icon which contains
        // all the event listeners
        const clearIcon = container.querySelector(clearIconSelector);
        chai.expect(clearIcon, 'clear icon found').not.null;
        if (clearIcon) {
            preact.fireEvent.click(clearIcon);
        }
        chai.expect(inputElement.value, 'after click clear icon, input value').to.equal('');
        chai.expect(valuespan === null || valuespan === void 0 ? void 0 : valuespan.textContent, 'after click icon, committed value not changed').to.equal('hello');
        // expect onCommit not to be called at all yet
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'clicked clear icon, check onCommit count').to.equal('0');
        // Enter will commit the ''
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'Press Enter a few times after clear icon').to.equal('1');
        chai.expect(valuespan === null || valuespan === void 0 ? void 0 : valuespan.textContent, 'after click icon and Enter, committed value').to.equal('');
    }));
    componentWithClearIconList.forEach((compObj) => it(`${compObj.name}: test click Clear Icon clears display value, blur commits value`, async () => {
        const label = 'field label';
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { label: label, hasClearIcon: "always" }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement.value).equal('hello');
        const countspan = container.querySelector('.testcommittedcountclass');
        const valuespan = container.querySelector('.testcommittedvalueclass');
        const buttonElement = container.querySelector('.testclickmebutton');
        const clearIconSelector = '[title="Clear"]';
        // Get the parent element of the svg icon which contains
        // all the event listeners
        const clearIcon = container.querySelector(clearIconSelector);
        chai.expect(clearIcon, 'clear icon found').not.null;
        // click clear
        if (clearIcon) {
            preact.fireEvent.click(clearIcon);
        }
        // input clears out but committed value is still 'hello' and onCommit handler not called.
        chai.expect(inputElement.value, 'after click clear icon, input value').to.equal('');
        chai.expect(valuespan === null || valuespan === void 0 ? void 0 : valuespan.textContent, 'after click icon, committed value not changed').to.equal('hello');
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'clicked clear icon, check onCommit count').to.equal('0');
        // focus outside will call onCommit handler.
        preact.act(() => {
            buttonElement.focus();
        });
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'after click icon and blur, onCommit count should be increased to 1').to.equal('1');
        chai.expect(valuespan === null || valuespan === void 0 ? void 0 : valuespan.textContent, 'after click icon and blur, committed value').to.equal('');
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: test programmatic value change does not call onCommit`, async () => {
        const label = 'programmatic change';
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { label: label, hasClearIcon: "never" }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement.value).equal('hello');
        const countspan = container.querySelector('.testcommittedcountclass');
        const valuespan = container.querySelector('.testcommittedvalueclass');
        const buttonElement = container.querySelector('.testclickmebutton');
        // click buttonElement which will programmatically change the value on the component
        preact.act(() => {
            preact.fireEvent.click(buttonElement);
        });
        // Component's display value
        // Component should be able to distinguish between value being from an input and
        // value being from a programmatic change. It calls onCommit if it is a programmatic change.
        // See useCurrentValueReducer hook for details.
        chai.expect(inputElement.value, 'display value after programmatic change').to.equal('goodbye');
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'after programmatic change, onCommit is not called').to.equal('0');
        chai.expect(valuespan === null || valuespan === void 0 ? void 0 : valuespan.textContent, 'after programmatic change, committed value is not changed').to.equal('hello');
        // press Enter should not cause an onCommit now since it was a programmatic change.
        preact.fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'after programmatic change, onCommit is not called').to.equal('0');
    }));
    componentWithMaxLengthList.forEach((compObj) => it(`${compObj.name} test programmatic value change with < maxlength does not call onCommit`, async () => {
        const label = 'programmatic change';
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { label: label, maxLength: 30 }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement.value).equal('hello');
        const countspan = container.querySelector('.testcommittedcountclass');
        const valuespan = container.querySelector('.testcommittedvalueclass');
        const buttonElement = container.querySelector('.testclickmebutton');
        // click buttonElement which will programmatically change the value on Component
        preact.act(() => {
            preact.fireEvent.click(buttonElement);
        });
        // should not cause an onCommit now since it was a programmatic change
        // and it didn't cause the maxLength filter did not kick in.
        chai.expect(inputElement.value, 'display value after programmatic change').to.equal('goodbye');
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'after programmatic change, onCommit is not called').to.equal('0');
        chai.expect(valuespan === null || valuespan === void 0 ? void 0 : valuespan.textContent, 'after programmatic change, committed value is not changed').to.equal('hello');
    }));
    componentWithMaxLengthList.forEach((compObj) => it(`${compObj.name}: test programmatic value change with > maxlength does call onCommit`, async () => {
        const label = 'programmatic change';
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { label: label, maxLength: 6 }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement.value).equal('hello');
        const countspan = container.querySelector('.testcommittedcountclass');
        const valuespan = container.querySelector('.testcommittedvalueclass');
        const buttonElement = container.querySelector('.testclickmebutton');
        // click buttonElement which will ***programmatically change*** the value on Component
        preact.act(() => {
            preact.fireEvent.click(buttonElement);
        });
        // should cause an onCommit now even though it was a programmatic change
        // because it caused the maxLength filter to kick in and that fires an onCommit.
        chai.expect(inputElement.value, 'display value after programmatic change').to.equal('goodby');
        chai.expect(countspan === null || countspan === void 0 ? void 0 : countspan.textContent, 'after programmatic change when maxLength filter kicks in, onCommit is called').to.equal('1');
        chai.expect(valuespan === null || valuespan === void 0 ? void 0 : valuespan.textContent, 'after programmatic change when maxLength filter kicks in, committed value is changed').to.equal('goodby');
    }));
    afterEach(preact.cleanup);
});
/*  */
//# sourceMappingURL=FormControlCommit.spec.js.map
