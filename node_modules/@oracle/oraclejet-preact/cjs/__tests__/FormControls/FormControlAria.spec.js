/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var hooks = require('preact/hooks');
var chai = require('chai');
var UNSAFE_InputPassword = require('../../UNSAFE_InputPassword.js');
var UNSAFE_Environment = require('../../UNSAFE_Environment.js');
var utils_UNSAFE_matchTranslationBundle = require('../../utils/UNSAFE_matchTranslationBundle.js');
var UNSAFE_InputText = require('../../UNSAFE_InputText.js');
require('../../UNSAFE_NumberInputText.js');
require('../../UNSAFE_TextArea.js');
require('../../UNSAFE_TextAreaAutosize.js');
require('../../UNSAFE_SelectMultiple.js');
require('../../UNSAFE_SelectSingle.js');
var TextArea = require('../../TextArea-12e73bd6.js');
var TextAreaAutosize = require('../../TextAreaAutosize-e63611e0.js');
var SelectMultiple = require('../../SelectMultiple-839fdbd2.js');
var SelectSingle = require('../../SelectSingle-5ba193e7.js');
var NumberInputText = require('../../NumberInputText-a83c00be.js');
require('preact/compat');
require('../../hooks/UNSAFE_useFocusableTextField.js');
require('../../tslib.es6-6f60dd09.js');
require('../../hooks/UNSAFE_useFocusWithin.js');
require('../../useFocusWithin-145e8682.js');
require('../../hooks/UNSAFE_useFormContext.js');
require('preact');
require('../../hooks/UNSAFE_useFormFieldContext.js');
require('../../hooks/UNSAFE_useTextField.js');
require('../../hooks/UNSAFE_useId.js');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('../../UNSAFE_Label.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');

require('../../UNSAFE_TextField.js');
require('../../ReadonlyTextFieldInput-ec13a273.js');
require('../../hooks/UNSAFE_useTabbableMode.js');
require('../../utils/UNSAFE_interpolations/text.js');
require('../../keys-326d80d5.js');
require('../../_curry1-f1ebd742.js');
require('../../_has-2eedb7e0.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../FormControlUtils-c960c51d.js');
require('../../hooks/UNSAFE_useTranslationBundle.js');
require('../../UNSAFE_Layer.js');
require('../../UNSAFE_LabelValueLayout.js');
require('../../UNSAFE_Flex.js');
require('../../Flex-b113edd5.js');
require('../../utils/UNSAFE_interpolations/dimensions.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../utils/UNSAFE_size.js');
require('../../utils/UNSAFE_interpolations/boxalignment.js');
require('../../utils/UNSAFE_interpolations/flexbox.js');
require('../../flexbox-6deddb70.js');
require('../../utils/UNSAFE_interpolations/flexitem.js');
require('../../flexitem-0c1e9a72.js');
require('../../TextFieldInput-c5f861ba.js');
require('../../hooks/UNSAFE_useTextFieldInputHandlers.js');
require('../../utils/PRIVATE_clientHints.js');
require('../../clientHints-e821b5ee.js');
require('../../hooks/UNSAFE_useDebounce.js');
require('../../UNSAFE_LiveRegion.js');
require('../../UNSAFE_UserAssistance.js');
require('../../InlineHelpSource-c498a09a.js');
require('../../UNSAFE_ComponentMessage.js');
require('../../ComponentMessage-eea92e6b.js');
require('../../PRIVATE_Message.js');
require('../../utils/PRIVATE_timer.js');
require('../../MessageCloseButton-66757186.js');
require('../../UNSAFE_Button.js');
require('../../Button-07d97191.js');
require('../../UNSAFE_BaseButton.js');
require('../../BaseButton-9bfe304e.js');
require('../../hooks/UNSAFE_usePress.js');
require('../../hooks/UNSAFE_useActive.js');
require('../../utils/UNSAFE_mergeProps.js');
require('../../index-3651c0e7.js');
require('../../index-d5067e50.js');
require('../../UNSAFE_Icon.js');
require('../../Icon-c44e10c9.js');
require('../../hooks/UNSAFE_useTooltip.js');
require('../../UNSAFE_Floating.js');
require('../../Floating-48167355.js');
require('../../index-55dfe40c.js');
require('../../hooks/UNSAFE_useUser.js');
require('../../utils/PRIVATE_floatingUtils.js');
require('../../utils/PRIVATE_refUtils.js');
require('../../hooks/UNSAFE_useOutsideClick.js');
require('../../hooks/UNSAFE_useFocus.js');
require('../../hooks/UNSAFE_useTouch.js');
require('../../hooks/UNSAFE_useAnimation.js');
require('../../useAnimation-576ef8bc.js');
require('../../hooks/UNSAFE_useTheme.js');
require('../../MessageDetail-9ab2fec2.js');
require('../../MessageFormattingUtils-fac29bd4.js');
require('../../utils/UNSAFE_getLocale.js');
require('../../utils/UNSAFE_stringUtils.js');
require('../../stringUtils-dad38408.js');
require('../../Message.types-d5b1820f.js');
require('../../MessageStartIcon-5cdb8fbe.js');
require('../../MessageSummary-ea4ba9b8.js');
require('../../MessageTimestamp-cb7998db.js');
require('../../MessageUtils-c82ad817.js');
require('../../utils/UNSAFE_logger.js');
require('../../utils/UNSAFE_soundUtils.js');
require('../../MessagesManager-88e137d7.js');
require('../../PRIVATE_TransitionGroup.js');
require('../../hooks/UNSAFE_useMessagesContext.js');
require('../../UNSAFE_HiddenAccessible.js');
require('../../HiddenAccessible-42dab376.js');
require('../../ComponentMessageContainer-7880a1b9.js');
require('../../hooks/UNSAFE_useClearIcon.js');
require('../../utils/UNSAFE_componentUtils.js');
require('../../ClearIcon-be3cdd68.js');
require('../../hooks/UNSAFE_useCurrentValueReducer.js');
require('../../hooks/UNSAFE_useLengthFilter.js');
require('../../utils/UNSAFE_lengthFilter.js');
require('../../hooks/UNSAFE_usePrefixSuffix.js');
require('../../UNSAFE_PrefixSuffix.js');
require('../../UNSAFE_Grid.js');
require('../../utils/UNSAFE_interpolations/grid.js');
require('../../hooks/UNSAFE_useLoadingIndicatorTimer.js');
require('../../hooks/UNSAFE_useTimer.js');
require('../../PRIVATE_SelectCommon.js');
require('../../UNSAFE_HighlightText.js');
require('../../HighlightText-5bdc12cb.js');
require('../../PRIVATE_List.js');
require('../../List-63716a22.js');
require('../../utils/UNSAFE_keys.js');
require('../../LoadMoreCollection-eaa4ed6f.js');
require('../../PRIVATE_Collection.js');
require('../../Collection-2647e7ee.js');
require('../../hooks/UNSAFE_useViewportIntersect.js');
require('../../PRIVATE_VirtualizedCollection.js');
require('../../VirtualizedCollection-19e514e1.js');
require('../../UNSAFE_FocusTrap.js');
require('../../FocusTrap-8af50913.js');
require('../../utils/PRIVATE_tabbableUtils.js');
require('../../hooks/PRIVATE_useSelection.js');
require('../../hooks/PRIVATE_useCurrentKey.js');
require('../../hooks/PRIVATE_useCollectionFocusRing.js');
require('../../hooks/PRIVATE_useTabbableModeSet.js');
require('../../hooks/PRIVATE_useItemAction.js');
require('../../utils/PRIVATE_collectionUtils.js');
require('../../UNSAFE_Skeleton.js');
require('../../Skeleton-02ffb696.js');
require('../../utils/UNSAFE_interpolations/borders.js');
require('../../UNSAFE_Selector.js');
require('../../UNSAFE_Chip.js');
require('../../Chip-bc07411b.js');
require('../../hooks/UNSAFE_useActionable.js');

function __variableDynamicImportRuntime0__(path) {
  switch (path) {
    case '../../resources/nls/ar/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar/bundle.js'); });
    case '../../resources/nls/ar-XB/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar-XB/bundle.js'); });
    case '../../resources/nls/bg/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bg/bundle.js'); });
    case '../../resources/nls/bs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs/bundle.js'); });
    case '../../resources/nls/bs-Cyrl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs-Cyrl/bundle.js'); });
    case '../../resources/nls/cs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/cs/bundle.js'); });
    case '../../resources/nls/da/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/da/bundle.js'); });
    case '../../resources/nls/de/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/de/bundle.js'); });
    case '../../resources/nls/el/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/el/bundle.js'); });
    case '../../resources/nls/en/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en/bundle.js'); });
    case '../../resources/nls/en-XA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XA/bundle.js'); });
    case '../../resources/nls/en-XC/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XC/bundle.js'); });
    case '../../resources/nls/es/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/es/bundle.js'); });
    case '../../resources/nls/et/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/et/bundle.js'); });
    case '../../resources/nls/fi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fi/bundle.js'); });
    case '../../resources/nls/fr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr/bundle.js'); });
    case '../../resources/nls/fr-CA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr-CA/bundle.js'); });
    case '../../resources/nls/he/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/he/bundle.js'); });
    case '../../resources/nls/hr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hr/bundle.js'); });
    case '../../resources/nls/hu/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hu/bundle.js'); });
    case '../../resources/nls/is/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/is/bundle.js'); });
    case '../../resources/nls/it/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/it/bundle.js'); });
    case '../../resources/nls/ja/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ja/bundle.js'); });
    case '../../resources/nls/ko/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ko/bundle.js'); });
    case '../../resources/nls/lt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lt/bundle.js'); });
    case '../../resources/nls/lv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lv/bundle.js'); });
    case '../../resources/nls/ms/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ms/bundle.js'); });
    case '../../resources/nls/nl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/nl/bundle.js'); });
    case '../../resources/nls/no/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/no/bundle.js'); });
    case '../../resources/nls/pl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pl/bundle.js'); });
    case '../../resources/nls/pt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt/bundle.js'); });
    case '../../resources/nls/pt-PT/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt-PT/bundle.js'); });
    case '../../resources/nls/ro/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ro/bundle.js'); });
    case '../../resources/nls/ru/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ru/bundle.js'); });
    case '../../resources/nls/sk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sk/bundle.js'); });
    case '../../resources/nls/sl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sl/bundle.js'); });
    case '../../resources/nls/sr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr/bundle.js'); });
    case '../../resources/nls/sr-Latn/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr-Latn/bundle.js'); });
    case '../../resources/nls/sv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sv/bundle.js'); });
    case '../../resources/nls/th/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/th/bundle.js'); });
    case '../../resources/nls/tr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/tr/bundle.js'); });
    case '../../resources/nls/uk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/uk/bundle.js'); });
    case '../../resources/nls/vi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/vi/bundle.js'); });
    case '../../resources/nls/zh-Hans/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hans/bundle.js'); });
    case '../../resources/nls/zh-Hant/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hant/bundle.js'); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
function DemoInputPassword({ ariaDescribedBy, assistiveText, isDisabled, isReadonly, label = 'Test Label', messages, userAssistanceDensity }) {
    const [value, setValue] = hooks.useState('hello');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsx(UNSAFE_InputPassword.InputPassword, { ariaDescribedBy: ariaDescribedBy, assistiveText: assistiveText, isDisabled: isDisabled, isReadonly: isReadonly, label: label, messages: messages, onInput: handleInput, userAssistanceDensity: userAssistanceDensity, value: value }) }));
}
function DemoInputText({ ariaDescribedBy, assistiveText, isDisabled, isReadonly, label = 'Test Label', messages, userAssistanceDensity }) {
    const [value, setValue] = hooks.useState('hello');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsx(UNSAFE_InputText.InputText, { ariaDescribedBy: ariaDescribedBy, assistiveText: assistiveText, isDisabled: isDisabled, isReadonly: isReadonly, label: label, messages: messages, onInput: handleInput, userAssistanceDensity: userAssistanceDensity, value: value }) }));
}
function DemoTextArea({ ariaDescribedBy, assistiveText, isDisabled, isReadonly, label = 'Test Label', messages, userAssistanceDensity }) {
    const [value, setValue] = hooks.useState('hello');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsx(TextArea.TextArea, { ariaDescribedBy: ariaDescribedBy, assistiveText: assistiveText, isDisabled: isDisabled, isReadonly: isReadonly, label: label, messages: messages, onInput: handleInput, userAssistanceDensity: userAssistanceDensity, value: value }) }));
}
function DemoTextAreaAutosize({ ariaDescribedBy, assistiveText, isDisabled, isReadonly, label = 'Test Label', messages, userAssistanceDensity }) {
    const [value, setValue] = hooks.useState('hello');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsx(TextAreaAutosize.TextAreaAutosize, { ariaDescribedBy: ariaDescribedBy, assistiveText: assistiveText, isDisabled: isDisabled, isReadonly: isReadonly, label: label, messages: messages, onInput: handleInput, userAssistanceDensity: userAssistanceDensity, value: value }) }));
}
function DemoSelectMultiple({ ariaDescribedBy, assistiveText, itemText = 'label', isDisabled, isReadonly, label = 'Test Label', messages, userAssistanceDensity }) {
    const noOp = () => { };
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsx(SelectMultiple.SelectMultiple, { ariaDescribedBy: ariaDescribedBy, assistiveText: assistiveText, itemText: itemText, isDisabled: isDisabled, isReadonly: isReadonly, label: label, messages: messages, onCommit: noOp, userAssistanceDensity: userAssistanceDensity }) }));
}
function DemoSelectSingle({ ariaDescribedBy, assistiveText, itemText = 'label', isDisabled, isReadonly, label = 'Test Label', messages, userAssistanceDensity }) {
    const noOp = () => { };
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsx(SelectSingle.SelectSingle, { ariaDescribedBy: ariaDescribedBy, assistiveText: assistiveText, itemText: itemText, isDisabled: isDisabled, isReadonly: isReadonly, label: label, messages: messages, onCommit: noOp, userAssistanceDensity: userAssistanceDensity }) }));
}
function DemoNumberInputText({ ariaDescribedBy, assistiveText, isDisabled, isReadonly, label = 'Test Label', messages, userAssistanceDensity }) {
    const [value, setValue] = hooks.useState('123');
    const handleInput = hooks.useCallback((detail) => {
        var _a;
        setValue((_a = detail.value) !== null && _a !== void 0 ? _a : '');
    }, []);
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsx(NumberInputText.NumberInputText, { ariaDescribedBy: ariaDescribedBy, assistiveText: assistiveText, isDisabled: isDisabled, isReadonly: isReadonly, label: label, messages: messages, onInput: handleInput, userAssistanceDensity: userAssistanceDensity, value: value }) }));
}
async function getEnvironmentContext() {
    const locale = utils_UNSAFE_matchTranslationBundle.matchTranslationBundle(['en'], new Set(['en-US', 'en']));
    const { default: translations } = await __variableDynamicImportRuntime0__(`../../resources/nls/${locale}/bundle.ts`);
    return {
        translations: { '@oracle/oraclejet-preact': translations }
    };
}
const componentList = [
    { name: 'InputPassword', component: DemoInputPassword },
    { name: 'InputText', component: DemoInputText },
    { name: 'NumberInputText', component: DemoNumberInputText },
    { name: 'TextArea', component: DemoTextArea },
    { name: 'TextAreaAutosize', component: DemoTextAreaAutosize },
    { name: 'SelectMultiple', component: DemoSelectMultiple },
    { name: 'SelectSingle', component: DemoSelectSingle }
];
const fieldLabelList = [
    { name: 'InputText', component: DemoInputText },
    { name: 'NumberInputText', component: DemoNumberInputText },
    { name: 'TextArea', component: DemoTextArea },
    { name: 'TextAreaAutosize', component: DemoTextAreaAutosize },
    { name: 'SelectMultiple', component: DemoSelectMultiple },
    { name: 'SelectSingle', component: DemoSelectSingle }
];
describe('Form Controls - WAI-Aria', () => {
    let env;
    beforeEach(async function () {
        env = env !== null && env !== void 0 ? env : (await getEnvironmentContext());
    });
    componentList.forEach((compObj) => it(`${compObj.name}: adds aria-describedby correctly for ua container when enabled`, async () => {
        const assistiveText = 'test ua content';
        const { container, getByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { assistiveText: assistiveText }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        // fireEvent.focus and userEvent.click does not seem to work here
        preact.act(() => {
            inputElement === null || inputElement === void 0 ? void 0 : inputElement.focus();
        });
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        const uaContainer = container.querySelector(`#${ariaDescribedby}`);
        const helpTextElement = getByText(assistiveText);
        chai.expect(uaContainer).not.to.be.null;
        chai.expect(uaContainer === null || uaContainer === void 0 ? void 0 : uaContainer.contains(helpTextElement)).to.be.true;
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: removes aria-describedby correctly for ua container when disabled`, async () => {
        const assistiveText = 'test ua content';
        const { container, queryByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { assistiveText: assistiveText, isDisabled: true }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        chai.expect(inputElement === null || inputElement === void 0 ? void 0 : inputElement.disabled).to.be.true;
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        const helpTextElement = queryByText(assistiveText);
        chai.expect(ariaDescribedby).to.be.null;
        chai.expect(helpTextElement).to.be.null;
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: removes aria-describedby correctly for ua container when readonly`, async () => {
        const assistiveText = 'test ua content';
        const { container, queryByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { assistiveText: assistiveText, isReadonly: true }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        const helpTextElement = queryByText(assistiveText);
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        if (compObj.name === 'InputText' ||
            compObj.name === 'SelectMultiple' ||
            compObj.name === 'SelectSingle' ||
            compObj.name === 'NumberInputText' ||
            compObj.name === 'TextAreaAutosize') {
            chai.expect(inputElement).to.be.null;
            chai.expect(helpTextElement).to.be.null;
        }
        else {
            chai.expect(inputElement).to.not.be.null;
            chai.expect(inputElement === null || inputElement === void 0 ? void 0 : inputElement.readOnly).to.be.true;
            chai.expect(ariaDescribedby).to.be.null;
            chai.expect(helpTextElement).to.be.null;
        }
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: adds aria-describedby correctly for ua container for efficient density and with help text`, async () => {
        const assistiveText = 'test ua content';
        const { container, getByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { assistiveText: assistiveText, userAssistanceDensity: "efficient" }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        // fireEvent.focus and userEvent.click does not seem to work here
        preact.act(() => {
            inputElement === null || inputElement === void 0 ? void 0 : inputElement.focus();
        });
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        const uaContainer = container.querySelector(`#${ariaDescribedby}`);
        const helpTextElement = getByText(assistiveText);
        chai.expect(uaContainer).not.to.be.null;
        chai.expect(uaContainer === null || uaContainer === void 0 ? void 0 : uaContainer.contains(helpTextElement)).to.be.true;
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: adds aria-invalid when showing error message`, async () => {
        const messageText = 'message description';
        const { container, getByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { messages: [{ detail: messageText, severity: 'error', summary: messageText }] }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        const ariaInvalid = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-invalid');
        const uaContainer = container.querySelector(`#${ariaDescribedby}`);
        const messageElement = getByText(messageText);
        chai.expect(ariaInvalid).to.equal('true');
        chai.expect(uaContainer === null || uaContainer === void 0 ? void 0 : uaContainer.contains(messageElement)).to.be.true;
    }));
    fieldLabelList.forEach((compObj) => it(`${compObj.name}: adds field label to the error message`, async () => {
        const messageText = 'message description';
        const label = 'field label';
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { label: label, messages: [{ detail: messageText, severity: 'error', summary: messageText }] }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        const uaContainer = container.querySelector(`#${ariaDescribedby}`);
        chai.expect(uaContainer).not.to.be.null;
        const messageElement = preact.getByRole(uaContainer, 'alert');
        const labelContextElement = preact.getByText(messageElement, label);
        chai.expect(labelContextElement).to.not.be.null;
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: does not add aria-invalid when showing warning message`, async () => {
        const messageText = 'message description';
        const { container, getByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { messages: [{ detail: messageText, severity: 'warning', summary: messageText }] }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        const ariaInvalid = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-invalid');
        const uaContainer = container.querySelector(`#${ariaDescribedby}`);
        const messageElement = getByText(messageText);
        chai.expect(ariaInvalid).to.be.null;
        chai.expect(uaContainer === null || uaContainer === void 0 ? void 0 : uaContainer.contains(messageElement)).to.be.true;
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: does not add aria-invalid when showing confirmation message`, async () => {
        const messageText = 'message description';
        const { container, getByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { messages: [{ detail: messageText, severity: 'confirmation', summary: messageText }] }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        const ariaInvalid = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-invalid');
        const uaContainer = container.querySelector(`#${ariaDescribedby}`);
        const messageElement = getByText(messageText);
        chai.expect(ariaInvalid).to.be.null;
        chai.expect(uaContainer === null || uaContainer === void 0 ? void 0 : uaContainer.contains(messageElement)).to.be.true;
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: does not add aria-invalid when showing info message`, async () => {
        const messageText = 'message description';
        const { container, getByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { messages: [{ detail: messageText, severity: 'info', summary: messageText }] }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        const ariaInvalid = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-invalid');
        const uaContainer = container.querySelector(`#${ariaDescribedby}`);
        const messageElement = getByText(messageText);
        chai.expect(ariaInvalid).to.be.null;
        chai.expect(uaContainer === null || uaContainer === void 0 ? void 0 : uaContainer.contains(messageElement)).to.be.true;
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: does not add aria-invalid when showing no message`, async () => {
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { messages: [] }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        const ariaInvalid = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-invalid');
        chai.expect(ariaInvalid).to.be.null;
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: adds aria-describedby from ariaDescribedBy prop along with the UA id when enabled`, async () => {
        var _a;
        const assistiveText = 'test ua content';
        const { container, getByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { ariaDescribedBy: "testId", assistiveText: assistiveText }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        // fireEvent.focus and userEvent.click does not seem to work here
        preact.act(() => {
            inputElement === null || inputElement === void 0 ? void 0 : inputElement.focus();
        });
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        // first id will be UA's and second will be the one from the prop
        const [uaId, propId] = (_a = ariaDescribedby === null || ariaDescribedby === void 0 ? void 0 : ariaDescribedby.split(' ')) !== null && _a !== void 0 ? _a : [];
        const uaContainer = container.querySelector(`#${uaId}`);
        const helpTextElement = getByText(assistiveText);
        chai.expect(uaContainer).not.to.be.null;
        chai.expect(uaContainer === null || uaContainer === void 0 ? void 0 : uaContainer.contains(helpTextElement)).to.be.true;
        chai.expect(propId).equals('testId');
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: adds aria-describedby from only prop when disabled`, async () => {
        const assistiveText = 'test ua content';
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { ariaDescribedBy: "testId", assistiveText: assistiveText, isDisabled: true }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = container.querySelector(inputElementType);
        chai.expect(inputElement).not.to.be.null;
        chai.expect(inputElement === null || inputElement === void 0 ? void 0 : inputElement.disabled).to.be.true;
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        chai.expect(ariaDescribedby).equals('testId');
    }));
    componentList.forEach((compObj) => it(`${compObj.name}: adds aria-describedby from only prop when readonly`, async () => {
        const assistiveText = 'test ua content';
        const { container, queryByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(compObj.component, { ariaDescribedBy: "testId", assistiveText: assistiveText, isReadonly: true }) })));
        const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';
        const inputElement = compObj.name === 'InputText' ||
            compObj.name === 'SelectMultiple' ||
            compObj.name === 'SelectSingle' ||
            compObj.name === 'NumberInputText' ||
            compObj.name === 'TextAreaAutosize'
            ? queryByRole('textbox')
            : container.querySelector(inputElementType);
        const ariaDescribedby = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('aria-describedby');
        chai.expect(ariaDescribedby).equals('testId');
    }));
    afterEach(preact.cleanup);
});
/*  */
//# sourceMappingURL=FormControlAria.spec.js.map
