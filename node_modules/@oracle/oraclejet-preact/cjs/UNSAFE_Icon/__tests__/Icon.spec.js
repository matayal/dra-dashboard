/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var Icon = require('../../Icon-c44e10c9.js');
var UNSAFE_Environment = require('../../UNSAFE_Environment.js');
var userEvent = require('@testing-library/user-event');
require('../../utils/PRIVATE_clientHints.js');
var clientHints = require('../../clientHints-e821b5ee.js');
require('../../tslib.es6-6f60dd09.js');
require('preact');
require("identity-obj-proxy");
require('../../utils/UNSAFE_size.js');
require('../../hooks/UNSAFE_useTooltip.js');
require('preact/hooks');
require('../../hooks/UNSAFE_useId.js');
require('../../UNSAFE_Floating.js');
require('../../Floating-48167355.js');
require('preact/compat');
require('../../index-55dfe40c.js');
require('../../hooks/UNSAFE_useUser.js');
require('../../UNSAFE_Layer.js');
require('../../utils/PRIVATE_floatingUtils.js');
require('../../utils/PRIVATE_refUtils.js');
require('../../hooks/UNSAFE_useOutsideClick.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('../../hooks/UNSAFE_useFocus.js');
require('../../hooks/UNSAFE_useTouch.js');
require('../../utils/UNSAFE_mergeProps.js');
require('../../hooks/UNSAFE_useAnimation.js');
require('../../useAnimation-576ef8bc.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var userEvent__default = /*#__PURE__*/_interopDefaultLegacy(userEvent);

const TOOLTIP_TEXT = 'IconTooltip';
const TOOLTIP_TEST_TIMEOUT = 5000;
describe('Test Icon component', () => {
    it('render', async function () {
        const content = preact.render(jsxRuntime.jsx(Icon.Icon, { children: jsxRuntime.jsx("path", { d: "M 0 0 H 24 V 24 H 0 L 0 0" }) }));
        const svg = content.container.querySelector('svg');
        chai.expect(svg).not.null;
        const path = content.container.querySelector('path');
        chai.expect(path).not.null;
    });
    it('icon size', async function () {
        const content = preact.render(jsxRuntime.jsx(Icon.Icon, Object.assign({ size: "8x" }, { children: jsxRuntime.jsx("path", { d: "M 0 0 H 24 V 24 H 0 L 0 0" }) })));
        const firstElement = content.container.firstElementChild;
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(1);
    });
    it('icon color', async function () {
        const content = preact.render(jsxRuntime.jsx(Icon.Icon, Object.assign({ color: "danger" }, { children: jsxRuntime.jsx("path", { d: "M 0 0 H 24 V 24 H 0 L 0 0" }) })));
        const firstElement = content.container.firstElementChild;
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(1);
    });
});
describe('Mouse Interaction', () => {
    const clientHints$1 = clientHints.getClientHints();
    if (typeof jest === 'undefined' && clientHints$1.browser === 'chrome') {
        mocha.timeout(2 * TOOLTIP_TEST_TIMEOUT);
        it('check tooltip correctly triggered with mouse interaction', async () => {
            const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, { children: jsxRuntime.jsx(Icon.Icon, Object.assign({ accessibleLabel: TOOLTIP_TEXT }, { children: jsxRuntime.jsx("path", { d: "M 0 0 H 24 V 24 H 0 L 0 0" }) })) }));
            const IconElement = content.container.firstElementChild;
            userEvent__default["default"].hover(IconElement);
            await preact.waitFor(() => checkTooltipText(TOOLTIP_TEXT), {
                timeout: TOOLTIP_TEST_TIMEOUT
            });
        }, TOOLTIP_TEST_TIMEOUT);
    }
});
describe('Keyboard Interaction', () => {
    const clientHints$1 = clientHints.getClientHints();
    if (typeof jest === 'undefined' && clientHints$1.browser === 'chrome') {
        mocha.timeout(2 * TOOLTIP_TEST_TIMEOUT);
        it('check tooltip correctly triggered with keyboard interaction', async () => {
            const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, { children: jsxRuntime.jsx(Icon.Icon, Object.assign({ accessibleLabel: TOOLTIP_TEXT }, { children: jsxRuntime.jsx("path", { d: "M 0 0 H 24 V 24 H 0 L 0 0" }) })) }));
            content.container.firstElementChild.focus();
            userEvent__default["default"].tab();
            await preact.waitFor(() => checkTooltipText(TOOLTIP_TEXT), {
                timeout: TOOLTIP_TEST_TIMEOUT
            });
        }, TOOLTIP_TEST_TIMEOUT);
    }
});
const checkTooltipText = (content) => {
    var _a;
    const targetElements = document.querySelectorAll('[role="tooltip"]');
    const targetElementItem = targetElements.item(0);
    const tooltipContainer = targetElementItem === null || targetElementItem === void 0 ? void 0 : targetElementItem.firstElementChild;
    chai.expect(tooltipContainer === null || tooltipContainer === void 0 ? void 0 : tooltipContainer.style.opacity).not.equals('');
    chai.expect(tooltipContainer === null || tooltipContainer === void 0 ? void 0 : tooltipContainer.style.opacity).not.equals('0');
    chai.expect(tooltipContainer === null || tooltipContainer === void 0 ? void 0 : tooltipContainer.style.maxHeight).not.equals('');
    chai.expect(tooltipContainer === null || tooltipContainer === void 0 ? void 0 : tooltipContainer.style.maxHeight).not.equals('0');
    const innerHTML = (_a = tooltipContainer === null || tooltipContainer === void 0 ? void 0 : tooltipContainer.firstElementChild) === null || _a === void 0 ? void 0 : _a.innerHTML;
    chai.expect(innerHTML).equals(content);
};
/*  */
//# sourceMappingURL=Icon.spec.js.map
