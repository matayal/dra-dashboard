/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var Chip = require('../../Chip-bc07411b.js');
var userEvent = require('@testing-library/user-event');
var hooks_UNSAFE_useTabbableMode = require('../../hooks/UNSAFE_useTabbableMode.js');
require('../../hooks/UNSAFE_useActionable.js');
require('../../utils/UNSAFE_mergeProps.js');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('preact/hooks');
require('../../hooks/UNSAFE_useActive.js');
require('../../hooks/UNSAFE_useFocus.js');
require('../../hooks/UNSAFE_usePress.js');
require("identity-obj-proxy");
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('preact');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var userEvent__default = /*#__PURE__*/_interopDefaultLegacy(userEvent);

describe('Test Chip component', () => {
    it('render', async function () {
        const content = preact.render(jsxRuntime.jsx(Chip.Chip, { children: "11" }));
        const text = await content.findByText('11');
        chai.expect(text).not.null;
    });
    it('isSelected property', async function () {
        const content = preact.render(jsxRuntime.jsx(Chip.Chip, Object.assign({ isSelected: true }, { children: "88" })));
        const firstElement = content.container.firstElementChild;
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(4);
    });
    it('isDisabled property', async function () {
        const content = preact.render(jsxRuntime.jsx(Chip.Chip, Object.assign({ isDisabled: true }, { children: "99" })));
        const firstElement = content.container.firstElementChild;
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(3);
    });
    it('event', async function () {
        let count = 0;
        const increment = () => count++;
        const content = preact.render(jsxRuntime.jsx(Chip.Chip, Object.assign({ onToggle: increment }, { children: "Press" })));
        const label = await content.findByText('Press');
        chai.expect(label).not.null;
        userEvent__default["default"].click(label);
        chai.expect(count).equals(1);
    });
    it('with TabbableModeContext isTabbable=true', async () => {
        const content = preact.render(jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: true } }, { children: jsxRuntime.jsx(Chip.Chip, { children: "Test" }) })));
        const chip = await content.findByText('Test');
        const tabindex = chip.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('0');
    });
    it('with TabbableModeContext isTabbable=false', async () => {
        const content = preact.render(jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: false } }, { children: jsxRuntime.jsx(Chip.Chip, { children: "Test" }) })));
        const chip = await content.findByText('Test');
        const tabindex = chip.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('-1');
    });
});
/*  */
//# sourceMappingURL=Chip.spec.js.map
