/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var hooks = require('preact/hooks');
var preact = require('@testing-library/preact');
var chai = require('chai');
var VirtualizedCollection = require('../../VirtualizedCollection-19e514e1.js');
require('../../PRIVATE_Collection.js');
require('../../Collection-2647e7ee.js');
require('preact');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../hooks/UNSAFE_useViewportIntersect.js');

function TestComponent({ data }) {
    const rootRef = hooks.useRef(null);
    const [dataState, setDataState] = hooks.useState({
        offset: 0,
        data: data.slice(0, 25),
        totalSize: data.length,
        sizePrecision: 'exact'
    });
    const loadRange = (range) => {
        const startIndex = range.offset;
        const endIndex = startIndex + range.count;
        const newDataState = Object.assign(Object.assign({}, dataState), { offset: startIndex, data: data.slice(startIndex, endIndex) });
        setDataState(newDataState);
    };
    const getConfig = () => {
        return {
            scroller: () => {
                return rootRef.current;
            }
        };
    };
    return (jsxRuntime.jsx("div", Object.assign({ style: "height: 200px;overflow: auto", ref: rootRef }, { children: jsxRuntime.jsx(VirtualizedCollection.VirtualizedCollection, Object.assign({ data: dataState, itemSelector: ".item", viewportConfig: getConfig(), onLoadRange: loadRange }, { children: (context) => (jsxRuntime.jsx("div", Object.assign({ className: "item", style: { height: '20px', padding: '0.75rem' } }, { children: context.data.data.name }), context.data.metadata.key)) })) })));
}
function populateData(count) {
    const data = [];
    for (let i = 0; i < count; i++) {
        data.push({ id: 'i' + i, name: 'Employee ' + i });
    }
    return data;
}
describe('Test VirtualizedCollection component', () => {
    beforeEach(() => {
        if (!window.IntersectionObserver) {
            // IntersectionObserver isn't available in test environment
            const MockIntersectionObserver = jest.fn();
            MockIntersectionObserver.mockReturnValue({
                observe: () => null,
                unobserve: () => null,
                disconnect: () => null
            });
            Object.defineProperty(global, 'IntersectionObserver', {
                writable: true,
                configurable: true,
                value: MockIntersectionObserver
            });
        }
    });
    it('initial render', async function () {
        const data = populateData(100);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const content = preact.render(jsxRuntime.jsx(TestComponent, { data: dataMetadata }));
        const emps = await content.queryAllByText('Employee', { exact: false });
        chai.expect(emps.length).eq(25);
    });
});
/*  */
//# sourceMappingURL=VirtualizedCollection.spec.js.map
