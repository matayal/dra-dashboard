/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./tslib.es6-6f60dd09.js');
var jsxRuntime = require('preact/jsx-runtime');
var compat = require('preact/compat');

const BarTrack = compat.forwardRef((_a, ref) => {
    var { id, length = '100%', children, color, orientation = 'horizontal', ariaProps } = _a, otherProps = tslib_es6.__rest(_a, ["id", "length", "children", "color", "orientation", "ariaProps"]);
    const isHoriz = orientation === 'horizontal';
    return (jsxRuntime.jsx("div", Object.assign({ id: id, ref: ref, class: otherProps.class }, ariaProps, { style: {
            width: isHoriz ? length : undefined,
            height: isHoriz ? undefined : length,
            backgroundColor: color
        } }, { children: children })));
});
const BarValue = (_a) => {
    var { length = '100%', size = '100%', orientation = 'horizontal', color } = _a, otherProps = tslib_es6.__rest(_a, ["length", "size", "orientation", "color"]);
    const isHoriz = orientation === 'horizontal';
    return (jsxRuntime.jsx("div", { class: otherProps.class, style: {
            width: isHoriz ? length : size,
            height: isHoriz ? size : length,
            backgroundColor: color
        } }));
};

const CircleWrapper = compat.forwardRef((_a, ref) => {
    var { id, children, color, clipPath, borderWidth, ariaProps } = _a, otherProps = tslib_es6.__rest(_a, ["id", "children", "color", "clipPath", "borderWidth", "ariaProps"]);
    return (jsxRuntime.jsx("div", Object.assign({ id: id, ref: ref }, ariaProps, { class: otherProps.class, style: {
            borderColor: color,
            borderWidth: borderWidth,
            clipPath: clipPath
        } }, { children: children })));
});
function getBorderWidth(section, borderWidth) {
    const border = {
        borderTopWidth: borderWidth,
        borderBottomWidth: borderWidth,
        borderRightWidth: borderWidth,
        borderLeftWidth: borderWidth
    };
    if (section === 'top') {
        border['borderBottomWidth'] = undefined;
    }
    if (section === 'bottom') {
        border['borderTopWidth'] = undefined;
    }
    if (section === 'left') {
        border['borderRightWidth'] = undefined;
    }
    if (section === 'right') {
        border['borderLeftWidth'] = undefined;
    }
    return border;
}
const CircleInner = (_a) => {
    var { clipPath, color, height, width, size, section = 'full' } = _a, otherProps = tslib_es6.__rest(_a, ["clipPath", "color", "height", "width", "size", "section"]);
    const borderWidth = getBorderWidth(section, size);
    return (jsxRuntime.jsx("div", { class: otherProps.class, style: Object.assign({ clipPath: clipPath, borderColor: color, height: height, width: width }, borderWidth) }));
};

exports.BarTrack = BarTrack;
exports.BarValue = BarValue;
exports.CircleInner = CircleInner;
exports.CircleWrapper = CircleWrapper;
/*  */
//# sourceMappingURL=PRIVATE_Meter.js.map
