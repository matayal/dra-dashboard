{"version":3,"file":"listViewTabbableModeTests-ebfa7a24.js","sources":["../../src/PRIVATE_List/__tests__/shared/listViewTabbableModeTests.tsx"],"sourcesContent":["import { fireEvent, render, waitFor } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { VNode } from 'preact';\n\nimport { Metadata } from '../../../UNSAFE_Collection';\nimport userEvent from '@testing-library/user-event';\n\nimport { populateData } from './listViewTestFixtures';\nimport type { Employee } from './listViewTestFixtures';\nimport { getRoot } from './testHelpers';\n\nexport type Props<K> = {\n  data: { data: Employee<K>; metadata: Metadata<K> }[];\n};\n\ntype TestComponentProps<K extends string | number> = (props: Props<K>) => VNode;\n\nexport const testTabbableMode = (TestComponent: TestComponentProps<any>) => {\n  it('acts as single tab stop in composition', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot(list);\n\n    userEvent.tab();\n    expect(document.activeElement).equals(list.getByText('Preceding Button'));\n    userEvent.tab();\n    expect(document.activeElement).equals(grid);\n    userEvent.tab();\n    expect(document.activeElement).equals(list.getByText('Following Button'));\n    userEvent.tab({ shift: true });\n    expect(document.activeElement).equals(grid);\n    userEvent.tab({ shift: true });\n    expect(document.activeElement).equals(list.getByText('Preceding Button'));\n  });\n\n  it('enters interactive mode with keyboard via F2', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot(list);\n\n    // Tab past first button into ListView\n    userEvent.tab();\n    userEvent.tab();\n    expect(document.activeElement).equals(grid);\n\n    list.rerender(<TestComponent data={dataMetadata}></TestComponent>);\n    const firstRowInput = list.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    fireEvent.keyUp(grid, { key: 'F2' });\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n  });\n\n  it('enters and leaves interactive mode with keyboard via F2, ESC and arrow keys', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n    const grid = await getRoot(list);\n\n    // Tab past first button into ListView\n    userEvent.tab();\n    userEvent.tab();\n    expect(document.activeElement).equals(grid);\n\n    list.rerender(<TestComponent data={dataMetadata}></TestComponent>);\n    const firstRowInput = list.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    fireEvent.keyUp(grid, { key: 'F2' });\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n    fireEvent.keyUp(grid, { key: 'Esc' });\n    await waitFor(() => {\n      expect(document.activeElement).equals(grid);\n    });\n    fireEvent.keyDown(grid, { key: 'ArrowDown' });\n    const secondRowInput = list.getByTestId('input-1');\n    expect(secondRowInput.getAttribute('tabindex')).equals('-1');\n    fireEvent.keyUp(grid, { key: 'F2' });\n    expect(secondRowInput.getAttribute('tabindex')).equals('0');\n  });\n\n  it('enters interactive mode with click on input', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n\n    const firstRowInput = list.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    userEvent.click(firstRowInput);\n    // NOTE without this rerender the state change doesn't stick\n    list.rerender(<TestComponent data={dataMetadata}></TestComponent>);\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n    expect(document.activeElement).equals(firstRowInput);\n    userEvent.tab();\n    expect(document.activeElement).equals(list.getByTestId('button-0'));\n  });\n\n  // FIXME: reenable this test once https://jira.oraclecorp.com/jira/browse/JET-54037 is fixed\n  xit('leaves interactive mode with click outside', async () => {\n    const data = populateData(100, true) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} />);\n\n    const firstRowInput = list.getByTestId('input-0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    userEvent.click(firstRowInput);\n    // NOTE without this rerender the state change doesn't stick\n    list.rerender(<TestComponent data={dataMetadata} />);\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n    expect(document.activeElement).equals(firstRowInput);\n    const outsideElement = list.getByText('Preceding Button');\n    userEvent.click(outsideElement);\n    expect(document.activeElement).equals(outsideElement);\n    list.rerender(<TestComponent data={dataMetadata} />);\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n  });\n};\n"],"names":["populateData","render","_jsx","getRoot","userEvent","expect","fireEvent","waitFor"],"mappings":"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"}