/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var userEvent = require('@testing-library/user-event');
var chai = require('chai');
var UNSAFE_Avatar = require('../../UNSAFE_Avatar.js');
require('../../tslib.es6-6f60dd09.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require("identity-obj-proxy");

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var userEvent__default = /*#__PURE__*/_interopDefaultLegacy(userEvent);

describe('Test Avatar component', () => {
    it('render', async function () {
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, { children: "TN" }));
        const initials = await content.findByText('TN');
        chai.expect(initials).not.null;
        userEvent__default["default"].click(initials);
    });
    it('applies Linaria CSS classes', () => {
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, {}));
        const firstElement = content.container.firstElementChild;
        const classList = firstElement === null || firstElement === void 0 ? void 0 : firstElement.classList;
        chai.expect(classList === null || classList === void 0 ? void 0 : classList.length).equals(3);
    });
    it('checks for avatar sizes', () => {
        const sizeOptionsArray = [
            '2xs',
            'xs',
            'sm',
            'md',
            'lg',
            'xl',
            '2xl'
        ];
        sizeOptionsArray.forEach((size) => {
            const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, { size: size }));
            const firstElement = content.container.firstElementChild;
            const classList = firstElement === null || firstElement === void 0 ? void 0 : firstElement.classList;
            const bgColorClass = 'oj-c-avatar-' + size;
            const result = classList === null || classList === void 0 ? void 0 : classList.value;
            chai.expect(result).to.be.a('string').that.contains(bgColorClass);
        });
    });
    it('checks for avatar initials', () => {
        var _a;
        const testInitials = 'TEST INITIAL';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, { initials: testInitials }));
        const firstElement = (_a = content.container.firstElementChild) === null || _a === void 0 ? void 0 : _a.firstElementChild;
        const innerHTMLText = firstElement === null || firstElement === void 0 ? void 0 : firstElement.innerHTML;
        chai.expect(innerHTMLText).equals(testInitials);
    });
    it('checks for avatar src', () => {
        var _a;
        const src = 'avatar-image.jpg';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, { src: src }));
        const firstElement = (_a = content.container.firstElementChild) === null || _a === void 0 ? void 0 : _a.firstElementChild;
        const srcImage = firstElement === null || firstElement === void 0 ? void 0 : firstElement.style.backgroundImage;
        chai.expect(srcImage).to.be.a('string').that.contains(src);
    });
    // commented out until we resolve using this external dependency
    // it('checks for avatar icon', () => {
    //   const iconName = 'car';
    //   const content = render(
    //     <Avatar>
    //       <DemoRedwoodIcon name={iconName} />
    //     </Avatar>
    //   );
    //   const firstElement = content.container.firstElementChild as HTMLElement;
    //   const iconElement = firstElement?.querySelectorAll(`.oj-ux-ico-${iconName}`);
    //   expect(iconElement?.length).equals(1);
    // });
    //Note: added check for running the below test only on browser, so as to access the getComputedStyle when the component is rendered
    if (typeof jest === 'undefined') {
        it('checks for avatar shape', () => {
            const shapeOptionsArray = ['circle', 'square'];
            shapeOptionsArray.forEach((shape) => {
                var _a;
                const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, { shape: shape }));
                const firstElement = (_a = content.container.firstElementChild) === null || _a === void 0 ? void 0 : _a.firstElementChild;
                const avatarBorderRadius = window
                    .getComputedStyle(firstElement)
                    .getPropertyValue('border-radius');
                if (shape === 'circle') {
                    chai.expect(avatarBorderRadius).equals('50%');
                }
                else {
                    chai.expect(avatarBorderRadius).not.equals('50%');
                }
            });
        });
    }
    it('checks for backgroundColor style', () => {
        const backgroundOptionsArray = [
            'neutral',
            'orange',
            'green',
            'teal',
            'blue',
            'slate',
            'pink',
            'purple',
            'lilac',
            'gray'
        ];
        backgroundOptionsArray.forEach((background) => {
            const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, { background: background }));
            const firstElement = content.container.firstElementChild;
            const classList = firstElement === null || firstElement === void 0 ? void 0 : firstElement.classList;
            const sizeClass = 'oj-c-avatar-bg-' + background;
            const result = classList === null || classList === void 0 ? void 0 : classList.value;
            chai.expect(result).to.be.a('string').that.contains(sizeClass);
        });
    });
});
describe('Security Test Avatar component', () => {
    it('initials injection', function () {
        const unwantedInitials = "<span id='evil'>Evil disabled</span>";
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, { initials: unwantedInitials }));
        const parentContainer = content.container;
        const evilSpan = parentContainer.querySelectorAll('#evil').length;
        chai.expect(evilSpan).equals(0);
    });
    it('src injection', function () {
        const unwantedSrc = "<span id='evil'>Evil disabled</span>";
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, { src: unwantedSrc }));
        const parentContainer = content.container;
        const evilSpan = parentContainer.querySelectorAll('#evil').length;
        chai.expect(evilSpan).equals(0);
    });
    it('size injection', function () {
        const unwantedInitials = "<span id='evil'>Evil disabled</span>";
        // @ts-ignore
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Avatar.Avatar, { size: unwantedInitials }));
        const parentContainer = content.container;
        const evilSpan = parentContainer.querySelectorAll('#evil').length;
        chai.expect(evilSpan).equals(0);
    });
});
/*  */
//# sourceMappingURL=Avatar.spec.js.map
