/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');

var UNSAFE_Grid = require('./UNSAFE_Grid.js');
require('./utils/UNSAFE_classNames.js');
var classNames = require('./classNames-55bceee6.js');
require('./UNSAFE_Text.js');
var hooks_UNSAFE_useTabbableMode = require('./hooks/UNSAFE_useTabbableMode.js');
var Text = require('./Text-cdd6f2fd.js');

const childrenStyles = "_1i0kogh"; // TODO: revisit idea of negative margin when selector has a proper API for handling spacing
// Jira: JET-54543
// negative margin added to selector

const selectorStyles = "_14sujpc"; // most content will be vertically centered

const centerVerticalStyles = "_3lfxww"; // extra spacing is needed between meta, trailing, and action components

const leftPaddingStyles = "do20s5"; // the central text area displays overline, primary, secondary, and tertiary in a column

const flexColumnStyles$1 = "_198d627"; // "extra" components in row 1 and the link in row 2 are justified on the righthand side of the list item layout

const flexRowStyles = "_6482su";
const rightJustifyStyles = "_1tszpd1";
const rowAlignStyles = "_1lxwy0w";
function ListItemLayout({
  children,
  selector,
  leading,
  primary,
  secondary,
  tertiary,
  overline,
  metadata,
  trailing,
  action,
  quaternary,
  navigation
}) {
  // generate grid skeleton, adding cells based on which props are defined
  const {
    columnsTemplate,
    firstCell,
    secondCell,
    lastCell,
    hasSecondRow
  } = getColumnsTemplate(selector, leading, metadata, trailing, action, quaternary, navigation); // if ListItemLayout component has a child (ListItemTextLayout) then render that instead of individual props

  const textArea = children ? jsxRuntime.jsx("div", Object.assign({
    className: childrenStyles
  }, {
    children: children
  })) : jsxRuntime.jsxs("div", Object.assign({
    className: flexColumnStyles$1
  }, {
    children: [jsxRuntime.jsx("div", {
      children: overline
    }), jsxRuntime.jsx("div", {
      children: primary
    }), jsxRuntime.jsx("div", {
      children: secondary
    }), jsxRuntime.jsx("div", {
      children: tertiary
    })]
  })); // a second row is needed when quaternary or navigation are defined

  const secondRow = hasSecondRow ? [firstCell && jsxRuntime.jsx("span", {
    children: " "
  }), secondCell && jsxRuntime.jsx("span", {
    children: " "
  }), jsxRuntime.jsx("div", Object.assign({
    className: rowAlignStyles
  }, {
    children: quaternary
  })), lastCell && jsxRuntime.jsx("div", Object.assign({
    className: rightJustifyStyles
  }, {
    children: navigation
  }))] : null;
  return jsxRuntime.jsxs(UNSAFE_Grid.Grid, Object.assign({
    gap: "4x",
    gridTemplateColumns: columnsTemplate
  }, {
    children: [firstCell, secondCell, jsxRuntime.jsx("div", Object.assign({
      className: centerVerticalStyles
    }, {
      children: textArea
    })), lastCell, secondRow]
  }));
}

function getColumnsTemplate(selector, leading, metadata, trailing, action, quaternary, navigation) {
  const columnsTemplateBuilder = [];
  let firstCell = null;

  if (selector) {
    columnsTemplateBuilder.push('auto');
    firstCell = jsxRuntime.jsx("div", Object.assign({
      className: selectorStyles
    }, {
      children: selector
    }));
  }

  let secondCell = null;

  if (leading) {
    columnsTemplateBuilder.push('auto');
    secondCell = jsxRuntime.jsx("div", Object.assign({
      className: centerVerticalStyles
    }, {
      children: leading
    }));
  }

  columnsTemplateBuilder.push('1fr'); // Text area always gets 1 full fraction of allotted space

  let lastCell = null;

  if (metadata || trailing || action || navigation) {
    columnsTemplateBuilder.push('auto');
    lastCell = jsxRuntime.jsxs("div", Object.assign({
      className: flexRowStyles
    }, {
      children: [jsxRuntime.jsx("div", Object.assign({
        className: classNames.classNames([centerVerticalStyles, metadata ? leftPaddingStyles : ''])
      }, {
        children: metadata
      })), jsxRuntime.jsx("div", Object.assign({
        className: classNames.classNames([centerVerticalStyles, trailing ? leftPaddingStyles : ''])
      }, {
        children: trailing
      })), jsxRuntime.jsx("div", Object.assign({
        className: classNames.classNames([centerVerticalStyles, action ? leftPaddingStyles : ''])
      }, {
        children: action
      }))]
    }));
  }

  const columnsTemplate = columnsTemplateBuilder.join(' ');
  const hasSecondRow = quaternary || navigation ? true : false;
  return {
    columnsTemplate,
    firstCell,
    secondCell,
    lastCell,
    hasSecondRow
  };
}

const textVariants = {
    primary: 'primary',
    secondary: 'primary',
    tertiary: 'secondary',
    quaternary: 'secondary',
    overline: 'secondary',
    metadata: 'secondary'
};
const textSizes = {
    primary: 'md',
    secondary: 'sm',
    tertiary: 'xs',
    quaternary: 'sm',
    overline: 'xs',
    metadata: 'sm'
};
const textLineClamps = {
    primary: undefined,
    secondary: 2,
    tertiary: 2,
    quaternary: 2,
    overline: 1,
    metadata: 1
};
function ListItemText({ children, variant }) {
    const { isTabbable } = hooks_UNSAFE_useTabbableMode.useTabbableMode();
    const textContent = (jsxRuntime.jsx(Text.Text, Object.assign({ variant: textVariants[variant], size: textSizes[variant], lineClamp: textLineClamps[variant] }, { children: children })));
    return isTabbable ? jsxRuntime.jsx("div", Object.assign({ tabIndex: 0 }, { children: textContent })) : textContent;
}

const flexColumnStyles = "_1fi0ss7";
function ListItemTextLayout({
  primary,
  secondary,
  tertiary,
  overline
}) {
  return jsxRuntime.jsxs("div", Object.assign({
    className: flexColumnStyles
  }, {
    children: [jsxRuntime.jsx(ListItemText, Object.assign({
      variant: "overline"
    }, {
      children: overline
    })), jsxRuntime.jsx(ListItemText, Object.assign({
      variant: "primary"
    }, {
      children: primary
    })), jsxRuntime.jsx(ListItemText, Object.assign({
      variant: "secondary"
    }, {
      children: secondary
    })), jsxRuntime.jsx(ListItemText, Object.assign({
      variant: "tertiary"
    }, {
      children: tertiary
    }))]
  }));
}

exports.ListItemLayout = ListItemLayout;
exports.ListItemText = ListItemText;
exports.ListItemTextLayout = ListItemTextLayout;
/*  */
//# sourceMappingURL=ListItemTextLayout-fb97c73d.js.map
