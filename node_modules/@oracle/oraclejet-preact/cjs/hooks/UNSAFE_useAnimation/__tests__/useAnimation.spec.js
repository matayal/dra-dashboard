/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var useAnimation = require('../../../useAnimation-576ef8bc.js');
var preact = require('@testing-library/preact');
var preactHooks = require('@testing-library/preact-hooks');
var chai = require('chai');
var Sinon = require('sinon');
require('preact/hooks');
require('../../../tslib.es6-6f60dd09.js');

const spyWAAPIAnimateFunction = Sinon.spy(HTMLElement.prototype, 'animate');
const { result } = preactHooks.renderHook(() => useAnimation.useAnimation('visible', {
    animationStates: {
        visible: {
            to: {
                opacity: 1
            }
        }
    }
}));
function TestComponent(props) {
    const { nodeRef } = useAnimation.useAnimation(props.animationState, {
        animationStates: {
            visible: {
                to: {
                    opacity: 1
                },
                options: {
                    duration: 500
                }
            },
            notVisible: {
                to: {
                    opacity: 0
                },
                options: {
                    duration: 500
                }
            }
        },
        isAnimatedOnMount: true
    });
    return (jsxRuntime.jsx("div", Object.assign({ style: { opacity: 0 }, ref: nodeRef }, { children: "Hello world" })));
}
describe('Test useAnimation hook', () => {
    it('useAnimation returns a Ref value', async function () {
        var _a;
        chai.expect((_a = result.current) === null || _a === void 0 ? void 0 : _a.nodeRef).to.exist;
    });
    it('useAnimation returns a controller', async function () {
        var _a;
        chai.expect((_a = result.current) === null || _a === void 0 ? void 0 : _a.controller).to.exist;
    });
    it('WAAPI animate function is called', async function () {
        //TODO: Test seems to be unstable on some browsers using karma, we have to comeback here and check
        //why this could be happening
        if (typeof jest !== 'undefined') {
            const { rerender } = preact.render(jsxRuntime.jsx(TestComponent, { animationState: "visible" }));
            rerender(jsxRuntime.jsx(TestComponent, { animationState: "notVisible" }));
            chai.expect(spyWAAPIAnimateFunction.calledTwice).to.be.true;
        }
    });
});
/*  */
//# sourceMappingURL=useAnimation.spec.js.map
