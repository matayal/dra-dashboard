/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hooks = require('preact/hooks');
var hooks_UNSAFE_useUser = require('./UNSAFE_useUser.js');
var hooks_UNSAFE_useTooltip = require('./UNSAFE_useTooltip.js');
require('../UNSAFE_Environment.js');
require('preact');
require('preact/jsx-runtime');
require('../UNSAFE_Layer.js');
require('preact/compat');
require('./UNSAFE_useId.js');
require('../UNSAFE_Floating.js');
require('../Floating-48167355.js');
require('../index-55dfe40c.js');
require('../utils/PRIVATE_floatingUtils.js');
require('../utils/PRIVATE_refUtils.js');
require('./UNSAFE_useOutsideClick.js');
require('../utils/UNSAFE_arrayUtils.js');
require('./UNSAFE_useHover.js');
require('./UNSAFE_useToggle.js');
require('./UNSAFE_useFocus.js');
require('./UNSAFE_useTouch.js');
require('../utils/UNSAFE_mergeProps.js');
require('../tslib.es6-6f60dd09.js');
require('./UNSAFE_useAnimation.js');
require('../useAnimation-576ef8bc.js');

require('../utils/UNSAFE_classNames.js');
require('../classNames-55bceee6.js');

const handleInput = (inputValue, currentInput, onInput) => {
    onInput === null || onInput === void 0 ? void 0 : onInput({ value: inputValue });
    currentInput.current = inputValue;
};
const cancelEvent = (event) => {
    event.preventDefault();
    event.stopPropagation();
};

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
function usePointerEvents(value, getValue, targetRef, onCommit, onInput) {
    const currentInput = hooks.useRef();
    const isPointerDown = hooks.useRef(false);
    const pointerUpHandler = (event) => {
        isPointerDown.current = false;
        const val = getValue(event);
        if (val !== undefined) {
            onCommit === null || onCommit === void 0 ? void 0 : onCommit({ value: val });
        }
    };
    const hoverHandler = (event) => {
        if (isPointerDown.current) {
            const val = getValue(event);
            if (val !== undefined && val != currentInput.current) {
                handleInput(val, currentInput, onInput);
            }
        }
    };
    const pointerDownHandler = (event) => {
        var _a;
        isPointerDown.current = true;
        (_a = targetRef.current) === null || _a === void 0 ? void 0 : _a.setPointerCapture(event.pointerId);
        const val = getValue(event);
        if (val !== undefined && val != currentInput.current) {
            handleInput(val, currentInput, onInput);
        }
    };
    const blurHandler = () => {
        isPointerDown.current = false;
        onCommit === null || onCommit === void 0 ? void 0 : onCommit({ value: value });
    };
    return {
        onPointerUp: pointerUpHandler,
        onBlur: blurHandler,
        onPointerMove: hoverHandler,
        onPointerDown: pointerDownHandler
    };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
function useKeyboardEvents(value, min, max, step, onCommit, onInput) {
    const currentInput = hooks.useRef();
    const { direction } = hooks_UNSAFE_useUser.useUser();
    const isRtl = direction === 'rtl';
    const keyDownHandler = (event) => {
        const key = event.key;
        switch (key) {
            case 'Tab':
                return;
            case 'ArrowDown':
                handleInput(Math.max(min, value - step), currentInput, onInput);
                break;
            case 'ArrowUp':
                handleInput(Math.min(max, value + step), currentInput, onInput);
                break;
            case 'ArrowLeft': {
                const inputValue = isRtl ? Math.min(max, value + step) : Math.max(min, value - step);
                handleInput(inputValue, currentInput, onInput);
                break;
            }
            case 'ArrowRight': {
                const inputValue = isRtl ? Math.max(min, value - step) : Math.min(max, value + step);
                handleInput(inputValue, currentInput, onInput);
                break;
            }
        }
        cancelEvent(event);
    };
    const keyUpHandler = (event) => {
        const key = event.key;
        switch (key) {
            case 'Enter':
                onCommit === null || onCommit === void 0 ? void 0 : onCommit({ value: value });
                break;
            case 'Tab':
                handleInput(value, currentInput, onInput);
                break;
            case 'Home':
                handleInput(min, currentInput, onInput);
                break;
            case 'End':
                handleInput(max, currentInput, onInput);
                break;
        }
        cancelEvent(event);
    };
    return {
        onKeyUp: keyUpHandler,
        onKeyDown: keyDownHandler
    };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
function useMeterDatatip(value, datatip, ariaDescribedBy) {
    const datatipText = datatip === null ? '' : datatip === undefined ? `${value}` : datatip;
    const [isDatatipOpen, setDatatipOpen] = hooks.useState(false);
    const { tooltipContent, tooltipProps } = hooks_UNSAFE_useTooltip.useTooltipControlled({
        text: datatipText,
        isOpen: isDatatipOpen,
        position: 'top',
        isDisabled: datatip === null,
        anchor: { x: 'pointer', y: 'pointer' },
        variant: 'datatip',
        offset: {
            mainAxis: 8,
            crossAxis: 0
        },
        onToggle: ({ value }) => setDatatipOpen(value)
    });
    tooltipProps['aria-describedby'] = [ariaDescribedBy, tooltipProps['aria-describedby']]
        .filter(Boolean)
        .join(' ');
    return { datatipContent: tooltipContent, datatipProps: tooltipProps };
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.useKeyboardEvents = useKeyboardEvents;
exports.useMeterDatatip = useMeterDatatip;
exports.usePointerEvents = usePointerEvents;
/*  */
//# sourceMappingURL=PRIVATE_useDvtMeterEvents.js.map
