/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var hooks = require('preact/hooks');
var preact = require('@testing-library/preact');
var chai = require('chai');
var Sinon = require('sinon');
require('../../UNSAFE_Button.js');
var Menu = require('../../Menu-4b48a08e.js');
var SelectMenuItem = require('../../SelectMenuItem-82288512.js');
var UNSAFE_Environment = require('../../UNSAFE_Environment.js');
var menuTestsUtils = require('../../menuTestsUtils-466a1cfa.js');
var Button = require('../../Button-07d97191.js');
require('../../UNSAFE_BaseButton.js');
require('../../BaseButton-9bfe304e.js');
require('../../tslib.es6-6f60dd09.js');
require('../../hooks/UNSAFE_usePress.js');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('../../hooks/UNSAFE_useActive.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('preact/compat');
require("identity-obj-proxy");
require('../../utils/UNSAFE_interpolations/dimensions.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../utils/UNSAFE_size.js');
require('../../_curry1-f1ebd742.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../_has-2eedb7e0.js');
require('../../utils/PRIVATE_clientHints.js');
require('../../clientHints-e821b5ee.js');
require('../../hooks/UNSAFE_useTabbableMode.js');
require('preact');
require('../../utils/UNSAFE_mergeProps.js');
require('../../UNSAFE_Layer.js');
require('../../UNSAFE_Floating.js');
require('../../Floating-48167355.js');
require('../../index-55dfe40c.js');
require('../../hooks/UNSAFE_useUser.js');
require('../../utils/PRIVATE_floatingUtils.js');
require('../../utils/PRIVATE_refUtils.js');
require('../../hooks/UNSAFE_useOutsideClick.js');
require('../../hooks/PRIVATE_useCollectionFocusRing.js');
require('../../MenuItem-0c819d68.js');
require('../../UNSAFE_Text.js');
require('../../Text-cdd6f2fd.js');
require('../../hooks/UNSAFE_useId.js');
require('../../useModal-0b4e4a2d.js');
require('../../index-3651c0e7.js');
require('../../index-d5067e50.js');
require('../../UNSAFE_Icon.js');
require('../../Icon-c44e10c9.js');
require('../../hooks/UNSAFE_useTooltip.js');
require('../../hooks/UNSAFE_useFocus.js');
require('../../hooks/UNSAFE_useTouch.js');
require('../../hooks/UNSAFE_useAnimation.js');
require('../../useAnimation-576ef8bc.js');
require('../../hooks/UNSAFE_useTheme.js');

function SelectMultipleMenuGroup({ value, onCommit, children }) {
    return (jsxRuntime.jsx(SelectMenuItem.SelectMenuGroupContext.Provider, Object.assign({ value: { isMultiple: true, value, onCommit } }, { children: children })));
}

const SelectMenu = ({ initialValue, onCommit }) => {
    const [selectMultipleValue, setSelectMultipleValue] = hooks.useState(initialValue);
    const handleCommit = ({ value }) => {
        setSelectMultipleValue(value);
    };
    const ref = hooks.useRef(null);
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: jsxRuntime.jsxs(UNSAFE_Environment.RootEnvironmentProvider, { children: [jsxRuntime.jsx(Button.Button, { ref: ref, label: "Text Wrapping" }), jsxRuntime.jsx(Menu.Menu, Object.assign({ isOpen: true, anchorRef: ref }, { children: jsxRuntime.jsxs(SelectMultipleMenuGroup, Object.assign({ value: selectMultipleValue, onCommit: onCommit || handleCommit }, { children: [jsxRuntime.jsx(SelectMenuItem.SelectMenuItem, { value: "bold", label: "Bold" }), jsxRuntime.jsx(SelectMenuItem.SelectMenuItem, { value: "italics", label: "Italics" }), jsxRuntime.jsx(SelectMenuItem.SelectMenuItem, { value: "underline", label: "Undeline" })] })) }))] }) }));
};
describe('Test Menu Component', () => {
    beforeEach(() => {
        menuTestsUtils.setObserverConfig();
    });
    it('onCommit called when selecting item', async function () {
        const dummyFunc = Sinon.spy();
        const content = preact.render(jsxRuntime.jsx(SelectMenu, { onCommit: dummyFunc }));
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitemcheckbox');
        preact.fireEvent.click(menuItems[0]);
        chai.expect(dummyFunc.calledOnce).to.be.true;
    });
    it('Initial SelectMultipleMenuGroup render without value', async function () {
        const content = preact.render(jsxRuntime.jsx(SelectMenu, {}));
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitemcheckbox');
        const firstItem = menuItems[0];
        const secondItem = menuItems[1];
        const thirdItem = menuItems[2];
        chai.expect(firstItem).not.null;
        chai.expect(firstItem.getAttribute('aria-checked')).equals('false');
        chai.expect(menuTestsUtils.getIcon(firstItem, 'svg')).null;
        chai.expect(secondItem).not.null;
        chai.expect(secondItem.getAttribute('aria-checked')).equals('false');
        chai.expect(menuTestsUtils.getIcon(secondItem, 'svg')).null;
        chai.expect(thirdItem).not.null;
        chai.expect(thirdItem.getAttribute('aria-checked')).equals('false');
        chai.expect(menuTestsUtils.getIcon(thirdItem, 'svg')).null;
    });
    it('Initial SelectMultipleMenuGroup render with value', async function () {
        const content = preact.render(jsxRuntime.jsx(SelectMenu, { initialValue: ['bold'] }));
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitemcheckbox');
        const firstItem = menuItems[0];
        const secondItem = menuItems[1];
        const thirdItem = menuItems[2];
        chai.expect(firstItem).not.null;
        chai.expect(firstItem.getAttribute('aria-checked')).equals('true');
        chai.expect(menuTestsUtils.getIcon(firstItem, 'svg')).not.null;
        chai.expect(secondItem).not.null;
        chai.expect(secondItem.getAttribute('aria-checked')).equals('false');
        chai.expect(menuTestsUtils.getIcon(secondItem, 'svg')).null;
        chai.expect(thirdItem).not.null;
        chai.expect(thirdItem.getAttribute('aria-checked')).equals('false');
        chai.expect(menuTestsUtils.getIcon(thirdItem, 'svg')).null;
    });
    it('SelectMultipleMenuGroup changes if selected item is selected again', async function () {
        const content = preact.render(jsxRuntime.jsx(SelectMenu, { initialValue: ['bold'] }));
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitemcheckbox');
        preact.fireEvent.click(menuItems[0]);
        const menuItemsAfterClick = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitemcheckbox');
        const firstItem = menuItemsAfterClick[0];
        const secondItem = menuItemsAfterClick[1];
        const thirdItem = menuItemsAfterClick[2];
        chai.expect(firstItem).not.null;
        chai.expect(firstItem.getAttribute('aria-checked')).equals('false');
        chai.expect(menuTestsUtils.getIcon(firstItem, 'svg')).null;
        chai.expect(secondItem).not.null;
        chai.expect(secondItem.getAttribute('aria-checked')).equals('false');
        chai.expect(menuTestsUtils.getIcon(secondItem, 'svg')).null;
        chai.expect(thirdItem).not.null;
        chai.expect(thirdItem.getAttribute('aria-checked')).equals('false');
        chai.expect(menuTestsUtils.getIcon(thirdItem, 'svg')).null;
    });
    it('SelectMultipleMenuGroup selected item changes when selecting it', async function () {
        const content = preact.render(jsxRuntime.jsx(SelectMenu, { initialValue: ['bold'] }));
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitemcheckbox');
        preact.fireEvent.click(menuItems[1]);
        const menuItemsAfterClick = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitemcheckbox');
        const firstItem = menuItemsAfterClick[0];
        const secondItem = menuItemsAfterClick[1];
        const thirdItem = menuItemsAfterClick[2];
        chai.expect(firstItem).not.null;
        chai.expect(firstItem.getAttribute('aria-checked')).equals('true');
        chai.expect(menuTestsUtils.getIcon(firstItem, 'svg')).not.null;
        chai.expect(secondItem).not.null;
        chai.expect(secondItem.getAttribute('aria-checked')).equals('true');
        chai.expect(menuTestsUtils.getIcon(secondItem, 'svg')).not.null;
        chai.expect(thirdItem).not.null;
        chai.expect(thirdItem.getAttribute('aria-checked')).equals('false');
        chai.expect(menuTestsUtils.getIcon(thirdItem, 'svg')).null;
    });
});
/*  */
//# sourceMappingURL=SelectMultipleMenuGroup.spec.js.map
