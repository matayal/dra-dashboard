/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var hooks = require('preact/hooks');
var preact = require('@testing-library/preact');
var userEvent = require('@testing-library/user-event');
var chai = require('chai');
var Sinon = require('sinon');
var UNSAFE_Environment = require('../../UNSAFE_Environment.js');
require('../../UNSAFE_Button.js');
require('../../utils/PRIVATE_clientHints.js');
var Menu = require('../../Menu-4b48a08e.js');
var MenuItem = require('../../MenuItem-0c819d68.js');
var MenuDivider = require('../../MenuDivider-856fcdeb.js');
var menuTestsUtils = require('../../menuTestsUtils-466a1cfa.js');
var Button = require('../../Button-07d97191.js');
var clientHints = require('../../clientHints-e821b5ee.js');
require('preact');
require('../../UNSAFE_Layer.js');
require('preact/compat');
require('../../UNSAFE_BaseButton.js');
require('../../BaseButton-9bfe304e.js');
require('../../tslib.es6-6f60dd09.js');
require('../../hooks/UNSAFE_usePress.js');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('../../hooks/UNSAFE_useActive.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require("identity-obj-proxy");
require('../../utils/UNSAFE_interpolations/dimensions.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../utils/UNSAFE_size.js');
require('../../_curry1-f1ebd742.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../_has-2eedb7e0.js');
require('../../hooks/UNSAFE_useTabbableMode.js');
require('../../utils/UNSAFE_mergeProps.js');
require('../../UNSAFE_Floating.js');
require('../../Floating-48167355.js');
require('../../index-55dfe40c.js');
require('../../hooks/UNSAFE_useUser.js');
require('../../utils/PRIVATE_floatingUtils.js');
require('../../utils/PRIVATE_refUtils.js');
require('../../hooks/UNSAFE_useOutsideClick.js');
require('../../hooks/PRIVATE_useCollectionFocusRing.js');
require('../../useModal-0b4e4a2d.js');
require('../../UNSAFE_Text.js');
require('../../Text-cdd6f2fd.js');
require('../../hooks/UNSAFE_useId.js');
require('../../UNSAFE_Divider.js');
require('../../Divider-333e69aa.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var userEvent__default = /*#__PURE__*/_interopDefaultLegacy(userEvent);

const MenuSimpleComponent = ({ onClose, initialFocus = 'menu' }) => {
    const ref = hooks.useRef(null);
    return (jsxRuntime.jsxs(UNSAFE_Environment.RootEnvironmentProvider, { children: [jsxRuntime.jsx(Button.Button, { ref: ref, label: "Press me" }), jsxRuntime.jsxs(Menu.Menu, Object.assign({ isOpen: true, anchorRef: ref, accessibleLabel: "Test menu", onClose: onClose, initialFocus: initialFocus }, { children: [jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem1" }), jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem2" }), jsxRuntime.jsx(MenuDivider.MenuDivider, {}), jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem3" }), jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem4" })] }))] }));
};
function getActiveElementKey() {
    var _a;
    return (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.dataset['ojMenuItemKey'];
}
describe('Test Menu Component', () => {
    const { deviceType, hoverSupport } = clientHints.getClientHints();
    const isHybrid = hoverSupport === 'events';
    const isMobile = deviceType === 'phone';
    const expectedMenuItemClassesLengthOnFocus = isHybrid ? 3 : 4;
    beforeEach(() => {
        menuTestsUtils.setObserverConfig();
    });
    it('Menu container render correctly', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuSimpleComponent, {}));
        const menu = menuTestsUtils.getMenuItemByRole(content, 'menu');
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitem');
        const separators = menuTestsUtils.getAllMenuItemsByRole(content, 'separator');
        chai.expect(menu).not.null;
        chai.expect(menu.classList.length).equals(2);
        chai.expect(menu.getAttribute('aria-label')).equals('Test menu');
        chai.expect(menuItems.length).equals(4);
        chai.expect(separators.length).equals(1);
    });
    it('onClose called when Escape or Tab are pressed', async function () {
        const onActionDummyFunction = Sinon.spy();
        const content = preact.render(jsxRuntime.jsx(MenuSimpleComponent, { onClose: onActionDummyFunction }));
        const menu = menuTestsUtils.getMenuItemByRole(content, 'menu');
        chai.expect(menu).not.null;
        if (!isMobile) {
            preact.fireEvent.keyDown(menu, { key: 'Tab' });
            preact.fireEvent.keyDown(menu, { key: 'Escape' });
            chai.expect(onActionDummyFunction.calledTwice).to.be.true;
        }
    });
    it('onClose called when clicking outside', async function () {
        var _a;
        const onActionDummyFunction = Sinon.spy();
        const content = preact.render(jsxRuntime.jsx(MenuSimpleComponent, { onClose: onActionDummyFunction }));
        const menu = menuTestsUtils.getMenuItemByRole(content, 'menu');
        const button = menuTestsUtils.getLabel(content, 'Press me');
        chai.expect(menu).not.null;
        if (isMobile) {
            const modalWrapper = (_a = menu.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;
            if (modalWrapper) {
                userEvent__default["default"].click(modalWrapper);
            }
        }
        else {
            userEvent__default["default"].click(button);
        }
        chai.expect(onActionDummyFunction.called).to.be.true;
    });
    it('onClose called when item was clicked', async function () {
        const onActionDummyFunction = Sinon.spy();
        const content = preact.render(jsxRuntime.jsx(MenuSimpleComponent, { onClose: onActionDummyFunction }));
        const menu = menuTestsUtils.getMenuItemByRole(content, 'menu');
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitem');
        const menuItem = menuItems[0];
        chai.expect(menu).not.null;
        preact.fireEvent.click(menuItem);
        chai.expect(onActionDummyFunction.called).to.be.true;
    });
    it('onClose called when swipe is done (mobile)', async function () {
        const onActionDummyFunction = Sinon.spy();
        const content = preact.render(jsxRuntime.jsx(MenuSimpleComponent, { onClose: onActionDummyFunction }));
        const menu = menuTestsUtils.getMenuItemByRole(content, 'menu');
        chai.expect(menu).not.null;
        if (typeof jest === 'undefined') {
            if (isMobile) {
                const menuWrapper = menu.parentElement;
                // Touch objects are created so we can replicate this in fake touch events
                // This stuff is based on what useSwipe triggers and could change depending on the final decision
                // on what events to trigger on useSwipe.
                const touch1 = new Touch({
                    target: menuWrapper,
                    identifier: 0,
                    pageX: 386,
                    pageY: 224
                });
                const touch2 = new Touch({
                    target: menuWrapper,
                    identifier: 0,
                    pageX: 389,
                    pageY: 397
                });
                if (menuWrapper) {
                    preact.fireEvent.touchStart(menuWrapper, {
                        timeStamp: 10406,
                        currentTarget: menuWrapper,
                        changedTouches: [touch1]
                    });
                    preact.fireEvent.touchEnd(menuWrapper, {
                        timeStamp: 10472,
                        currentTarget: menuWrapper,
                        changedTouches: [touch2]
                    });
                }
                chai.expect(onActionDummyFunction.called).to.be.true;
            }
        }
    });
    it('Focus when item is clicked', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuSimpleComponent, {}));
        const menu = menuTestsUtils.getMenuItemByRole(content, 'menu');
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitem');
        const thirdItemKey = menuItems[2].dataset['ojMenuItemKey'];
        chai.expect(menu).not.null;
        if (typeof jest !== 'undefined') {
            await preact.waitFor(() => {
                chai.expect(document.activeElement).equals(menu);
            }, { timeout: 100 });
            userEvent__default["default"].click(menuItems[2]);
            chai.expect(getActiveElementKey()).equals(thirdItemKey);
            chai.expect(menuItems[2].classList.length).equals(expectedMenuItemClassesLengthOnFocus - 1);
        }
    });
    it('Focus on firstItem when initialFocus is set as firstItem', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuSimpleComponent, { initialFocus: "firstItem" }));
        const menu = menuTestsUtils.getMenuItemByRole(content, 'menu');
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitem');
        const firstItemKey = menuItems[0].dataset['ojMenuItemKey'];
        chai.expect(menu).not.null;
        //TO DO: See how we can have stable tests on Karma/Mocha
        if (typeof jest !== 'undefined') {
            chai.expect(getActiveElementKey()).equals(firstItemKey);
            chai.expect(menuItems[0].classList.length).equals(expectedMenuItemClassesLengthOnFocus);
        }
    });
    it('Menu Keyboard navigation - focus', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuSimpleComponent, {}));
        const menu = menuTestsUtils.getMenuItemByRole(content, 'menu');
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitem');
        const firstItemKey = menuItems[0].dataset['ojMenuItemKey'];
        const secondItemKey = menuItems[1].dataset['ojMenuItemKey'];
        const thirdItemKey = menuItems[2].dataset['ojMenuItemKey'];
        const fourthItemKey = menuItems[3].dataset['ojMenuItemKey'];
        chai.expect(menu).not.null;
        if (typeof jest !== 'undefined') {
            await preact.waitFor(() => {
                chai.expect(document.activeElement).equals(menu);
            }, { timeout: 100 });
            preact.fireEvent.keyDown(menu, { key: 'ArrowDown' });
            chai.expect(getActiveElementKey()).equals(firstItemKey);
            chai.expect(menuItems[0].classList.length).equals(expectedMenuItemClassesLengthOnFocus);
            preact.fireEvent.keyDown(menu, { key: 'ArrowDown' });
            chai.expect(getActiveElementKey()).equals(secondItemKey);
            chai.expect(menuItems[1].classList.length).equals(expectedMenuItemClassesLengthOnFocus);
            preact.fireEvent.keyDown(menu, { key: 'ArrowDown' });
            chai.expect(getActiveElementKey()).equals(thirdItemKey);
            chai.expect(menuItems[2].classList.length).equals(expectedMenuItemClassesLengthOnFocus);
            preact.fireEvent.keyDown(menu, { key: 'ArrowDown' });
            chai.expect(getActiveElementKey()).equals(fourthItemKey);
            chai.expect(menuItems[3].classList.length).equals(expectedMenuItemClassesLengthOnFocus);
            preact.fireEvent.keyDown(menu, { key: 'ArrowDown' });
            chai.expect(getActiveElementKey()).equals(firstItemKey);
            chai.expect(menuItems[0].classList.length).equals(expectedMenuItemClassesLengthOnFocus);
            preact.fireEvent.keyDown(menu, { key: 'ArrowUp' });
            chai.expect(getActiveElementKey()).equals(fourthItemKey);
            chai.expect(menuItems[3].classList.length).equals(expectedMenuItemClassesLengthOnFocus);
        }
    });
    it('Menu Keyboard navigation - focus with Home and End', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuSimpleComponent, {}));
        const menu = menuTestsUtils.getMenuItemByRole(content, 'menu');
        const menuItems = menuTestsUtils.getAllMenuItemsByRole(content, 'menuitem');
        const firstItemKey = menuItems[0].dataset['ojMenuItemKey'];
        const fourthItemKey = menuItems[3].dataset['ojMenuItemKey'];
        chai.expect(menu).not.null;
        if (typeof jest !== 'undefined') {
            await preact.waitFor(() => {
                chai.expect(document.activeElement).equals(menu);
            }, { timeout: 100 });
            preact.fireEvent.keyDown(menu, { key: 'End' });
            chai.expect(getActiveElementKey()).equals(fourthItemKey);
            chai.expect(menuItems[3].classList.length).equals(expectedMenuItemClassesLengthOnFocus);
            preact.fireEvent.keyDown(menu, { key: 'Home' });
            chai.expect(getActiveElementKey()).equals(firstItemKey);
            chai.expect(menuItems[0].classList.length).equals(expectedMenuItemClassesLengthOnFocus);
        }
    });
});
/*  */
//# sourceMappingURL=Menu.spec.js.map
