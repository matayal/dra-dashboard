/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var userEvent = require('@testing-library/user-event');
var chai = require('chai');
var Sinon = require('sinon');
var MenuItem = require('../../MenuItem-0c819d68.js');
var menuTestsUtils = require('../../menuTestsUtils-466a1cfa.js');
require('preact/hooks');
require('../../UNSAFE_Text.js');
require('../../Text-cdd6f2fd.js');
require('../../tslib.es6-6f60dd09.js');
require("identity-obj-proxy");
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('../../_curry1-f1ebd742.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../_has-2eedb7e0.js');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('../../hooks/UNSAFE_useId.js');
require('../../utils/UNSAFE_mergeProps.js');
require('../../hooks/UNSAFE_usePress.js');
require('../../utils/PRIVATE_clientHints.js');
require('../../clientHints-e821b5ee.js');
require('preact');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var userEvent__default = /*#__PURE__*/_interopDefaultLegacy(userEvent);

describe('Test MenuItem Component', () => {
    it('Default MenuItem with just label renders correctly', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem1" }));
        const menuItem = menuTestsUtils.getMenuItemByRole(content, 'menuitem');
        const label = menuTestsUtils.getLabel(content, 'MenuItem1');
        const disabled = menuItem.getAttribute('disabled');
        const tabindex = menuItem.getAttribute('tabindex');
        chai.expect(menuItem).not.null;
        chai.expect(label).not.null;
        chai.expect(menuItem.dataset['ojMenuItemKey']).not.undefined;
        chai.expect(tabindex).to.equal('-1');
        chai.expect(disabled).null;
    });
    it('Disabled MenuItem renders correctly', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem1", isDisabled: true }));
        const menuItem = menuTestsUtils.getMenuItemByRole(content, 'menuitem');
        chai.expect(menuItem).not.null;
        chai.expect(menuItem.getAttribute('aria-disabled')).equals('true');
    });
    it('MenuItem with startIcon renders correctly', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem1", startIcon: jsxRuntime.jsx("span", { class: "startIcon" }) }));
        const menuItem = menuTestsUtils.getMenuItemByRole(content, 'menuitem');
        const label = menuTestsUtils.getLabel(content, 'MenuItem1');
        const startIcon = menuTestsUtils.getIcon(menuItem, '.startIcon');
        chai.expect(menuItem).not.null;
        chai.expect(label).not.null;
        chai.expect(startIcon).not.null;
    });
    it('MenuItem with endIcon renders correctly', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem1", endIcon: jsxRuntime.jsx("span", { class: "endIcon" }) }));
        const menuItem = menuTestsUtils.getMenuItemByRole(content, 'menuitem');
        const label = menuTestsUtils.getLabel(content, 'MenuItem1');
        const endIcon = menuTestsUtils.getIcon(menuItem, '.endIcon');
        chai.expect(menuItem).not.null;
        chai.expect(label).not.null;
        chai.expect(endIcon).not.null;
    });
    it('MenuItem with startIcon and endIcon renders correctly', async function () {
        const content = preact.render(jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem1", startIcon: jsxRuntime.jsx("span", { class: "startIcon" }), endIcon: jsxRuntime.jsx("span", { class: "endIcon" }) }));
        const menuItem = menuTestsUtils.getMenuItemByRole(content, 'menuitem');
        const label = menuTestsUtils.getLabel(content, 'MenuItem1');
        const startIcon = menuTestsUtils.getIcon(menuItem, '.startIcon');
        const endIcon = menuTestsUtils.getIcon(menuItem, '.endIcon');
        chai.expect(menuItem).not.null;
        chai.expect(label).not.null;
        chai.expect(startIcon).not.null;
        chai.expect(endIcon).not.null;
    });
    it('click MenuItem', async function () {
        const onActionDummyFunction = Sinon.spy();
        const content = preact.render(jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem1", onAction: onActionDummyFunction }));
        const menuItem = menuTestsUtils.getMenuItemByRole(content, 'menuitem');
        chai.expect(menuItem).not.null;
        preact.fireEvent.click(menuItem);
        chai.expect(onActionDummyFunction.calledOnce).to.be.true;
    });
    it('enter MenuItem', async function () {
        const onActionDummyFunction = Sinon.spy();
        const content = preact.render(jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem1", onAction: onActionDummyFunction }));
        const menuItem = menuTestsUtils.getMenuItemByRole(content, 'menuitem');
        chai.expect(menuItem).not.null;
        menuItem.focus();
        userEvent__default["default"].keyboard('{enter}');
        chai.expect(onActionDummyFunction.calledOnce).to.be.true;
    });
    it('space MenuItem', async function () {
        const onActionDummyFunction = Sinon.spy();
        const content = preact.render(jsxRuntime.jsx(MenuItem.MenuItem, { label: "MenuItem1", onAction: onActionDummyFunction }));
        const menuItem = menuTestsUtils.getMenuItemByRole(content, 'menuitem');
        chai.expect(menuItem).not.null;
        menuItem.focus();
        userEvent__default["default"].keyboard('{space}');
        chai.expect(onActionDummyFunction.calledOnce).to.be.true;
    });
});
/*  */
//# sourceMappingURL=MenuItem.spec.js.map
