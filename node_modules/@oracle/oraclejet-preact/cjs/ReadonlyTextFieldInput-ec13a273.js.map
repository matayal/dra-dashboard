{"version":3,"file":"ReadonlyTextFieldInput-ec13a273.js","sources":["../../src/UNSAFE_TextField/ReadonlyTextFieldInput.tsx"],"sourcesContent":["import { ComponentChildren, Ref } from 'preact';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { textInterpolations } from '../utils/UNSAFE_interpolations/text';\nimport type { TextProps } from '../utils/UNSAFE_interpolations/text';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { getLoadingAriaLabel } from './FormControlUtils';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\ntype AutoFocusProp = HTMLAttributesSignalExcluded<HTMLInputElement>['autofocus'];\n\ntype ReadonlyAsInputProps = {\n  as: 'input';\n  type: HTMLAttributesSignalExcluded<HTMLInputElement>['type'];\n  elementRef?: Ref<HTMLInputElement>;\n  rows?: never;\n};\n\ntype ReadonlyAsTextAreaProps = {\n  as: 'textarea';\n  elementRef?: Ref<HTMLTextAreaElement | HTMLDivElement>;\n  type?: never;\n  rows?: number;\n};\n\ntype ReadonlyAsDivProps = {\n  as?: 'div';\n  elementRef?: Ref<HTMLTextAreaElement | HTMLDivElement>;\n  type?: never;\n  rows?: never;\n};\n\ntype Props = TextProps &\n  (ReadonlyAsDivProps | ReadonlyAsInputProps | ReadonlyAsTextAreaProps) & {\n    ariaDescribedBy?: string;\n    ariaLabel?: string;\n    ariaLabelledBy?: string;\n    autoFocus?: AutoFocusProp;\n    hasInsideLabel?: boolean;\n    inlineUserAssistance?: ComponentChildren;\n    innerReadonlyField?: ComponentChildren;\n    value?: string;\n    variant?: 'textarea';\n  };\n\n// In readonly textarea, we need some margin between the border container element\n// and the textarea, so the the textarea's focus outline doesn't get truncated.\n// The 0.25rem is an aesthetically pleasing amount of margin to make the readonly\n// focus ring visible.\nconst borderToTextAreaContentMargin = '0.25rem';\n\nconst readOnlyTextFieldStyles = {\n  base: cssProps`${{\n    minHeight:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height) * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-font-size))',\n    // TODO: Use Text component instead of CSS\n    wordBreak: 'break-word',\n    whiteSpace: 'pre-wrap',\n    // TODO: Cleanup the border and background CSS\n    backgroundColor: 'transparent',\n    borderColor: 'transparent',\n    borderWidth: '0',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)',\n    boxSizing: 'border-box',\n    // TODO: Use the Flex component instead of CSS\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n    fontFamily: 'inherit',\n    fontSize: '100%',\n    fontWeight: 'inherit',\n    lineHeight: 'inherit',\n    outlineWidth: '0',\n\n    '&:focus': {\n      outlineStyle: 'dotted',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n      outlineOffset: '1px'\n    }\n  }}`,\n  textareaBase: cssProps`${{\n    resize: 'none',\n    paddingBlockStart: '0',\n    paddingInlineStart: '0'\n  }}`,\n  inEnabledFormBase: cssProps`${{\n    whiteSpace: 'nowrap',\n    overflowX: 'scroll',\n    overflowY: 'hidden',\n    scrollbarWidth: 'none'\n  }}`,\n\n  textareaInEnabledFormBase: cssProps`${{\n    marginTop:\n      'calc((var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height) - 1rem * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height))/ 2 - 1px)',\n    marginBottom:\n      'calc((var(--oj-c-PRIVATE-DO-NOT-USE-text-field-height) - 1rem * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height))/ 2 - 1px)',\n    marginLeft: borderToTextAreaContentMargin,\n    marginRight: borderToTextAreaContentMargin,\n    paddingLeft: `calc(var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding) - ${borderToTextAreaContentMargin})`,\n    paddingRight: '0',\n    overflowX: 'auto',\n    overflowY: 'auto',\n    whiteSpace: 'pre-wrap'\n  }}`,\n\n  inEnabledFormLabelInside: cssProps`${{\n    // TODO: Look into why we need this hacky CSS\n    marginTop:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-text-field-inside-edge-padding-top) + 0.1875rem)',\n    paddingTop: '0',\n    minHeight:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-line-height) * var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-md-font-size))'\n  }}`,\n\n  textareaInEnabledFormLabelInside: cssProps`${{\n    paddingTop: 0,\n    paddingBottom: 0,\n    // We are using a transparent border here instead of padding, due to how textarea scrolls the padding off the screen\n    // and the text content will clash with the inside label.\n    borderColor: 'transparent',\n    borderStyle: 'solid',\n    marginTop:\n      'calc(var(--oj-c-PRIVATE-DO-NOT-USE-label-inside-edge-font-size) * var(--oj-c-PRIVATE-DO-NOT-USE-label-inside-edge-line-height) + var(--oj-c-PRIVATE-DO-NOT-USE-label-inside-edge-position-top))',\n    marginBottom: borderToTextAreaContentMargin\n  }}`,\n\n  inEnabledFormNoLabelInside: cssProps`${{\n    // TODO: Remove if this is not needed.\n    justifyContent: 'center'\n  }}`,\n\n  // don't apply this for textarea\n  inEnabledFormNoStartContent: cssProps`${{\n    marginLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding)',\n    marginRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding)',\n    paddingLeft: '0',\n    paddingRight: '0'\n  }}`\n};\n\nexport function ReadonlyTextFieldInput({\n  ariaDescribedBy,\n  ariaLabel,\n  ariaLabelledBy,\n  autoFocus,\n  as = 'div',\n  elementRef,\n  hasInsideLabel = false,\n  inlineUserAssistance,\n  innerReadonlyField,\n  rows,\n  type,\n  value = '',\n  variant,\n  ...props\n}: Props) {\n  const { isFormLayout, isReadonly: isReadonlyForm } = useFormContext();\n  const { isLoading } = useFormFieldContext();\n  const ariaLabelForReadonly = isLoading ? getLoadingAriaLabel() : ariaLabel;\n\n  // get classes for text align\n  const interpolations = [...Object.values(textInterpolations)];\n  const styleInterpolations = mergeInterpolations<Props>(interpolations);\n  const { class: styleInterpolationClasses } = styleInterpolations(props);\n\n  const readonlyDivClasses = classNames([\n    as !== 'textarea' && 'oj-c-hide-scrollbar', // TODO: Temp workaround for using --webkit-scrollbar to hide the scrollbar\n    readOnlyTextFieldStyles.base,\n    as === 'textarea' && readOnlyTextFieldStyles.textareaBase,\n    isFormLayout && !isReadonlyForm && readOnlyTextFieldStyles.inEnabledFormBase,\n    variant === 'textarea' &&\n      isFormLayout &&\n      !isReadonlyForm &&\n      readOnlyTextFieldStyles.textareaInEnabledFormBase,\n    isFormLayout &&\n      !isReadonlyForm &&\n      (hasInsideLabel\n        ? readOnlyTextFieldStyles.inEnabledFormLabelInside\n        : readOnlyTextFieldStyles.inEnabledFormNoLabelInside),\n    variant === 'textarea' &&\n      isFormLayout &&\n      !isReadonlyForm &&\n      hasInsideLabel &&\n      readOnlyTextFieldStyles.textareaInEnabledFormLabelInside,\n    variant !== 'textarea' && // not for textarea\n      isFormLayout &&\n      !isReadonlyForm &&\n      readOnlyTextFieldStyles.inEnabledFormNoStartContent,\n    styleInterpolationClasses\n  ]);\n\n  // JET-52914 - Implement Tabbable mode API contract in InputText\n  // spread tabbableModeProps on component\n  const { isTabbable, tabbableModeProps } = useTabbableMode();\n\n  if (as === 'input') {\n    return (\n      <input\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabelForReadonly}\n        aria-labelledby={ariaLabelledBy}\n        autofocus={autoFocus}\n        class={readonlyDivClasses}\n        readonly={true}\n        // @ts-ignore\n        ref={elementRef}\n        type={type}\n        value={value}\n        {...(!isTabbable && tabbableModeProps)}\n      />\n    );\n  }\n  if (as === 'textarea') {\n    return (\n      <textarea\n        aria-describedby={ariaDescribedBy}\n        aria-label={ariaLabelForReadonly}\n        aria-labelledby={ariaLabelledBy}\n        autofocus={autoFocus}\n        class={readonlyDivClasses}\n        readonly={true}\n        // @ts-ignore\n        ref={elementRef}\n        rows={rows}\n        {...(!isTabbable && tabbableModeProps)}>\n        {value}\n      </textarea>\n    );\n  }\n  return (\n    <div\n      aria-describedby={ariaDescribedBy}\n      aria-label={ariaLabelForReadonly}\n      aria-labelledby={ariaLabelledBy}\n      aria-readonly={true}\n      autofocus={autoFocus}\n      class={readonlyDivClasses}\n      // @ts-ignore\n      ref={elementRef}\n      role=\"textbox\"\n      {...tabbableModeProps}>\n      {value}\n    </div>\n  );\n}\n"],"names":["borderToTextAreaContentMargin","readOnlyTextFieldStyles","ReadonlyTextFieldInput","_a","ariaDescribedBy","ariaLabel","ariaLabelledBy","autoFocus","as","elementRef","hasInsideLabel","inlineUserAssistance","innerReadonlyField","rows","type","value","variant","props","__rest","isLoading","useFormFieldContext","ariaLabelForReadonly","getLoadingAriaLabel","styleInterpolations","mergeInterpolations","interpolations","base","textareaBase","isFormLayout","isReadonlyForm","inEnabledFormBase","textareaInEnabledFormBase","inEnabledFormNoLabelInside","textareaInEnabledFormLabelInside","inEnabledFormNoStartContent","_jsx","Object","assign","autofocus","class","readonlyDivClasses","readonly","ref","isTabbable","tabbableModeProps","children","role"],"mappings":"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"}