/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var chai = require('chai');
var MessageUtils = require('../../MessageUtils-c82ad817.js');
require('../../utils/UNSAFE_logger.js');
require('../../_curry1-f1ebd742.js');
require('../../_curry2-588f7ddc.js');
require('../../utils/UNSAFE_soundUtils.js');
require('../../MessageFormattingUtils-fac29bd4.js');
require('../../utils/UNSAFE_getLocale.js');
require('../../utils/UNSAFE_stringUtils.js');
require('../../stringUtils-dad38408.js');
require('../../Message.types-d5b1820f.js');
require('../../utils/UNSAFE_arrayUtils.js');

describe('Test MessageUtils', () => {
    it('throwError', function () {
        try {
            MessageUtils.throwError('foo');
            chai.expect(true).to.be.false;
        }
        catch (e) {
            chai.expect(e).not.null;
        }
    });
    it('getRenderer', function () {
        const message = {
            data: {
                detail: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.'
            },
            index: 0,
            key: 'ConfirmationMessage',
            metadata: { key: 'ConfirmationMessage' }
        };
        const renderers = {
            testRenderer: () => jsxRuntime.jsx("div", {})
        };
        // don's pass any renderers
        const noRenderers = MessageUtils.getRenderer(message, 'testRenderer');
        chai.expect(noRenderers).undefined;
        // get renderer by valid id
        const rendererByIdValid = MessageUtils.getRenderer(message, 'testRenderer', renderers);
        chai.expect(rendererByIdValid).to.equal(renderers.testRenderer);
        // get renderer by invalid id
        // (this should throw an error, but if not, verify that the renderer is null)
        try {
            const rendererByIdInvalid = MessageUtils.getRenderer(message, 'foo', renderers);
            chai.expect(rendererByIdInvalid).null;
        }
        catch (e) {
            chai.expect(e).not.null;
        }
        // get renderer by undefined id
        const rendererIdUndefined = MessageUtils.getRenderer(message, undefined, renderers);
        chai.expect(rendererIdUndefined).undefined;
        // get renderer by function that returns a valid id
        const rendererByFuncValid = MessageUtils.getRenderer(message, () => 'testRenderer', renderers);
        chai.expect(rendererByFuncValid).to.equal(renderers.testRenderer);
        // get renderer by function that returns an invalid id
        // (this should throw an error, but if not, verify that the renderer is null)
        try {
            const rendererByFuncInvalid = MessageUtils.getRenderer(message, () => 'foo', renderers);
            chai.expect(rendererByFuncInvalid).null;
        }
        catch (e) {
            chai.expect(e).not.null;
        }
        // get renderer by function that returns a undefined id
        const rendererByFuncUndefined = MessageUtils.getRenderer(message, () => undefined, renderers);
        chai.expect(rendererByFuncUndefined).undefined;
    });
});
/*  */
//# sourceMappingURL=MessageUtils.spec.js.map
