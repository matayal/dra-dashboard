/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var MessagesManager = require('../../MessagesManager-88e137d7.js');
require('preact');
require('preact/hooks');
require('../../PRIVATE_TransitionGroup.js');
require('../../tslib.es6-6f60dd09.js');
require('../../hooks/UNSAFE_useAnimation.js');
require('../../useAnimation-576ef8bc.js');
require('../../hooks/UNSAFE_useMessagesContext.js');

const DATA = [
    {
        key: 'ErrorMessage',
        data: {
            severity: 'error',
            summary: 'Primary Text',
            detail: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply dummy text of the printing and typesetting industry.',
            closeAffordance: 'on',
            timestamp: new Date().toISOString()
        }
    },
    {
        key: 'WarningMessage',
        data: {
            severity: 'warning',
            summary: 'Primary Text',
            detail: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply dummy text of the printing and typesetting industry.',
            closeAffordance: 'on',
            timestamp: new Date().toISOString()
        }
    },
    {
        key: 'ConfirmationMessage',
        data: {
            severity: 'confirmation',
            summary: 'Primary Text',
            detail: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply dummy text of the printing and typesetting industry.',
            closeAffordance: 'on',
            timestamp: new Date().toISOString()
        }
    },
    {
        key: 'InfoMessage',
        data: {
            severity: 'info',
            summary: 'Primary Text',
            detail: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply dummy text of the printing and typesetting industry.',
            closeAffordance: 'on',
            timestamp: new Date().toISOString()
        }
    }
];
describe('Test MessagesManager component', () => {
    it('child renderer', async function () {
        const content = preact.render(jsxRuntime.jsx(MessagesManager.MessagesManager, Object.assign({ data: DATA }, { children: ({ index, item }) => (jsxRuntime.jsxs("div", Object.assign({ style: "border: 1px solid gray; padding: 5px; background-color: orange;", "data-testid": item.key }, { children: [jsxRuntime.jsxs("div", { children: ["index: ", index] }), jsxRuntime.jsxs("div", { children: ["key: ", item.key] }), jsxRuntime.jsxs("div", { children: ["severity: ", item.data.severity] }), jsxRuntime.jsxs("div", { children: ["summary: ", item.data.summary] }), jsxRuntime.jsxs("div", { children: ["detail: ", item.data.detail] }), jsxRuntime.jsxs("div", { children: ["timestamp: ", item.data.timestamp] })] }))) })));
        // since the function we're passing to Array.map is async, we need to wait on all
        // those return promises before continuing, hence the "await Promise.all()"
        await Promise.all(DATA.map(async (item) => {
            const message = await content.findByTestId(item.key);
            chai.expect(message).not.null;
            chai.expect(message.style.backgroundColor).to.equal('orange');
            // just look for a single field as an example, no need to find every field
            const sevElem = await content.findByText(`severity: ${item.data.severity}`);
            chai.expect(sevElem).not.null;
        }));
    });
});
/*  */
//# sourceMappingURL=MessagesManager.spec.js.map
