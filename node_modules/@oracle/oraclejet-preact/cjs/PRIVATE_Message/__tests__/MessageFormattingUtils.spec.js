/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var chai = require('chai');
var MessageFormattingUtils = require('../../MessageFormattingUtils-fac29bd4.js');
var Message_types = require('../../Message.types-d5b1820f.js');
require('../../utils/UNSAFE_getLocale.js');
require('../../utils/UNSAFE_stringUtils.js');
require('../../stringUtils-dad38408.js');
require('../../utils/UNSAFE_arrayUtils.js');

describe('Test MessageFormattingUtils', () => {
    it('isValidValueForProp', function () {
        // severity prop:
        // valid severities
        Message_types.severities.forEach((severity) => {
            chai.expect(MessageFormattingUtils.isValidValueForProp(severity, 'severity')).to.be.true;
        });
        // invalid severity
        chai.expect(MessageFormattingUtils.isValidValueForProp('foo', 'severity')).to.be.false;
        // timestamp prop:
        // valid ISO string
        chai.expect(MessageFormattingUtils.isValidValueForProp(new Date().toISOString(), 'timestamp')).to.be.true;
        // invalid ISO string
        chai.expect(MessageFormattingUtils.isValidValueForProp('foo', 'timestamp')).to.be.false;
        // string prop:
        // valid string
        chai.expect(MessageFormattingUtils.isValidValueForProp('foo', 'string')).to.be.true;
        // invalid strings
        chai.expect(MessageFormattingUtils.isValidValueForProp('', 'string')).to.be.false;
        chai.expect(MessageFormattingUtils.isValidValueForProp(null, 'string')).to.be.false;
        chai.expect(MessageFormattingUtils.isValidValueForProp(undefined, 'string')).to.be.false;
    });
    it('formatTimestamp', function () {
        const validTimestamp = MessageFormattingUtils.formatTimestamp(new Date().toISOString());
        chai.expect(MessageFormattingUtils.isValidValueForProp(validTimestamp, 'string')).to.be.true;
        // formatting an invalid timestamp should throw an error, but if not, verify that it's
        // not a valid string prop
        try {
            const invalidTimestamp = MessageFormattingUtils.formatTimestamp('foo');
            chai.expect(MessageFormattingUtils.isValidValueForProp(invalidTimestamp, 'timestamp')).to.be.false;
        }
        catch (e) {
            chai.expect(e).not.null;
        }
    });
});
/*  */
//# sourceMappingURL=MessageFormattingUtils.spec.js.map
