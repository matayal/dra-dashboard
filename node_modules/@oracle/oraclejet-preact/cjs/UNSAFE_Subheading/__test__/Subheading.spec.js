/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var Subheading = require('../../Subheading-27d4300d.js');
require('../../UNSAFE_Text.js');
require('../../UNSAFE_Link.js');
var userEvent = require('@testing-library/user-event');
var Text = require('../../Text-cdd6f2fd.js');
var Link = require('../../Link-2180b804.js');
require('../../tslib.es6-6f60dd09.js');
require('../../utils/UNSAFE_arrayUtils.js');
require("identity-obj-proxy");
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('../../_curry1-f1ebd742.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../_has-2eedb7e0.js');
require('../../hooks/UNSAFE_usePress.js');
require('preact/hooks');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var userEvent__default = /*#__PURE__*/_interopDefaultLegacy(userEvent);

describe('Test Subheading component', () => {
    it('default Subheading', async function () {
        const content = preact.render(jsxRuntime.jsx(Subheading.Subheading, Object.assign({ as: "h1" }, { children: "Hello world" })));
        const h1 = await content.findByText('Hello world');
        const classList = h1.classList;
        chai.expect(h1).not.null;
        chai.expect(classList.length).equals(2);
    });
    it('subheading text lineClamp applies css class and lineClamp value', async () => {
        var _a, _b;
        const content = preact.render(jsxRuntime.jsx(Subheading.Subheading, Object.assign({ as: "h1" }, { children: jsxRuntime.jsx(Text.Text, Object.assign({ lineClamp: 4 }, { children: "Hello world with lineClamp" })) })));
        const span = await content.findByText('Hello world with lineClamp');
        const lineClampValue = (_a = span.parentElement) === null || _a === void 0 ? void 0 : _a.style.webkitLineClamp;
        // @ts-ignore
        const classList = (_b = span.parentElement) === null || _b === void 0 ? void 0 : _b.classList;
        chai.expect(classList === null || classList === void 0 ? void 0 : classList.length).equals(6);
        chai.expect(lineClampValue).equals('4');
    });
    it('Subheading text truncation applies css class', async () => {
        var _a;
        const content = preact.render(jsxRuntime.jsx(Subheading.Subheading, Object.assign({ as: "h1" }, { children: jsxRuntime.jsx(Text.Text, Object.assign({ truncation: "ellipsis" }, { children: "Hello world" })) })));
        const span = await content.findByText('Hello world');
        // @ts-ignore
        const classList = (_a = span.parentElement) === null || _a === void 0 ? void 0 : _a.classList;
        chai.expect(classList === null || classList === void 0 ? void 0 : classList.length).equals(6);
    });
    it('Subheading link applies default CSS classes', async function () {
        const content = preact.render(jsxRuntime.jsx(Subheading.Subheading, Object.assign({ as: "h1" }, { children: jsxRuntime.jsx(Link.Link, Object.assign({ href: "#" }, { children: "Link" })) })));
        const firstElement = await content.findByText('Link');
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(2);
    });
    it('Subheading link variant selected', async function () {
        const content = preact.render(jsxRuntime.jsx(Subheading.Subheading, Object.assign({ as: "h1" }, { children: jsxRuntime.jsx(Link.Link, Object.assign({ href: "#", variant: "primary" }, { children: "Link" })) })));
        const firstElement = await content.findByText('Link');
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(3);
    });
    it('Subheading link event', async function () {
        let count = 0;
        const increment = () => count++;
        const content = preact.render(jsxRuntime.jsx(Subheading.Subheading, Object.assign({ as: "h1" }, { children: jsxRuntime.jsx(Link.Link, Object.assign({ href: "#", onClick: increment }, { children: "Link" })) })));
        const link = await content.findByText('Link');
        chai.expect(link).not.null;
        userEvent__default["default"].click(link);
        chai.expect(count).equals(1);
    });
    it('has id property', async function () {
        const content = preact.render(jsxRuntime.jsx(Subheading.Subheading, Object.assign({ as: "h1", id: "subheading1" }, { children: "Subheading 1" })));
        const subheading = await content.findByText('Subheading 1');
        const id = subheading.getAttribute('id');
        chai.expect(id).to.equal('subheading1');
    });
});
/*  */
//# sourceMappingURL=Subheading.spec.js.map
