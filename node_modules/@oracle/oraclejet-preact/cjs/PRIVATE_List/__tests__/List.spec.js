/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var hooks = require('preact/hooks');
var preact = require('@testing-library/preact');
var userEvent = require('@testing-library/user-event');
var chai = require('chai');
var testHelpers = require('../../testHelpers-81b8b24e.js');
var hooks_UNSAFE_useTabbableMode = require('../../hooks/UNSAFE_useTabbableMode.js');
var List = require('../../List-63716a22.js');
require('../../UNSAFE_Flex.js');
var Flex = require('../../Flex-b113edd5.js');
require('preact');
require("identity-obj-proxy");
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('../../utils/UNSAFE_mergeProps.js');
require('../../utils/UNSAFE_keys.js');
require('../../LoadMoreCollection-eaa4ed6f.js');
require('../../PRIVATE_Collection.js');
require('../../Collection-2647e7ee.js');
require('../../hooks/UNSAFE_useViewportIntersect.js');
require('../../PRIVATE_VirtualizedCollection.js');
require('../../VirtualizedCollection-19e514e1.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../UNSAFE_FocusTrap.js');
require('../../FocusTrap-8af50913.js');
require('preact/compat');
require('../../utils/PRIVATE_tabbableUtils.js');
require('../../_curry1-f1ebd742.js');
require('../../_curry2-588f7ddc.js');
require('../../_curry3-bc6e6a86.js');
require('../../hooks/UNSAFE_useId.js');
require('../../hooks/PRIVATE_useSelection.js');
require('../../hooks/PRIVATE_useCurrentKey.js');
require('../../hooks/PRIVATE_useCollectionFocusRing.js');
require('../../hooks/PRIVATE_useTabbableModeSet.js');
require('../../hooks/PRIVATE_useItemAction.js');
require('../../utils/PRIVATE_collectionUtils.js');
require('../../UNSAFE_Skeleton.js');
require('../../Skeleton-02ffb696.js');
require('../../tslib.es6-6f60dd09.js');
require('../../utils/UNSAFE_interpolations/dimensions.js');
require('../../utils/UNSAFE_size.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../_has-2eedb7e0.js');
require('../../utils/UNSAFE_interpolations/borders.js');
require('../../UNSAFE_Selector.js');
require('../../index-3651c0e7.js');
require('../../index-d5067e50.js');
require('../../UNSAFE_Icon.js');
require('../../Icon-c44e10c9.js');
require('../../hooks/UNSAFE_useTooltip.js');
require('../../UNSAFE_Floating.js');
require('../../Floating-48167355.js');
require('../../index-55dfe40c.js');
require('../../hooks/UNSAFE_useUser.js');
require('../../UNSAFE_Environment.js');
require('../../UNSAFE_Layer.js');
require('../../utils/PRIVATE_floatingUtils.js');
require('../../utils/PRIVATE_refUtils.js');
require('../../hooks/UNSAFE_useOutsideClick.js');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('../../hooks/UNSAFE_useFocus.js');
require('../../hooks/UNSAFE_useTouch.js');
require('../../hooks/UNSAFE_useAnimation.js');
require('../../useAnimation-576ef8bc.js');
require('../../hooks/UNSAFE_useTheme.js');
require('../../hooks/UNSAFE_useTranslationBundle.js');
require('../../utils/UNSAFE_interpolations/boxalignment.js');
require('../../keys-326d80d5.js');
require('../../utils/UNSAFE_interpolations/flexbox.js');
require('../../flexbox-6deddb70.js');
require('../../utils/UNSAFE_interpolations/flexitem.js');
require('../../flexitem-0c1e9a72.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var userEvent__default = /*#__PURE__*/_interopDefaultLegacy(userEvent);

/**
 * Tests props solely exposed by List.tsx generic, used by external components (e.g. SelectMultiple),
 * the rest of the coverage for List.tsx comes from List.spec.tsx
 */
describe('Test List component', () => {
    beforeEach(() => {
        if (!window.IntersectionObserver) {
            // IntersectionObserver isn't available in test environment
            const MockIntersectionObserver = jest.fn();
            MockIntersectionObserver.mockReturnValue({
                observe: () => null,
                unobserve: () => null,
                disconnect: () => null
            });
            Object.defineProperty(global, 'IntersectionObserver', {
                writable: true,
                configurable: true,
                value: MockIntersectionObserver
            });
        }
    });
    /**
     * custom loader test-cases
     */
    it('renders with custom loader', () => {
        const loadingComponent = jsxRuntime.jsx("div", Object.assign({ "data-testid": "load-more-component" }, { children: "Loading" }));
        const { getAllByTestId, queryByTestId, rerender } = preact.render(jsxRuntime.jsx(TestComponent, { data: null }));
        chai.expect(queryByTestId('load-more-component')).to.be.null;
        rerender(jsxRuntime.jsx(TestComponent, { data: null, loadingIndicator: loadingComponent }));
        chai.expect(getAllByTestId('load-more-component').length).eq(1);
    });
    /**
     * custom aria role test-cases
     */
    it('renders with default roles', async () => {
        const data = populateData(100);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const list = preact.render(jsxRuntime.jsx(TestComponent, { data: dataMetadata }));
        const grid = await testHelpers.getRoot(list);
        chai.expect(grid.getAttribute('aria-rowcount')).eq('100');
        const items = await testHelpers.getItems(list);
        chai.expect(items.length).eq(25);
        const cells = await testHelpers.getContents(list);
        chai.expect(cells.length).eq(25);
    });
    it('renders with listbox rows', async () => {
        const data = populateData(100);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const list = preact.render(jsxRuntime.jsx(TestComponent, { data: dataMetadata, role: "listbox" }));
        const grid = await testHelpers.getRoot(list, 'listbox');
        chai.expect(grid.getAttribute('aria-rowcount')).eq('100');
        const items = await testHelpers.getItems(list, 'presentation');
        chai.expect(items.length).eq(25);
        const cells = await testHelpers.getContents(list, 'option');
        chai.expect(cells.length).eq(25);
    });
    it('renders with treegrid rows', async () => {
        const data = populateData(100);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const list = preact.render(jsxRuntime.jsx(TestComponent, { data: dataMetadata, role: "treegrid" }));
        const grid = await testHelpers.getRoot(list, 'treegrid');
        chai.expect(grid.getAttribute('aria-rowcount')).eq('100');
        const items = await testHelpers.getItems(list, 'row');
        chai.expect(items.length).eq(25);
        const cells = await testHelpers.getContents(list, 'gridcell');
        chai.expect(cells.length).eq(25);
    });
    it('allows toggling off F2 mode', async () => {
        const data = populateData(100);
        const dataMetadata = data.map((data) => {
            return { data: data, metadata: { key: data.id } };
        });
        const { getByTestId, rerender } = preact.render(jsxRuntime.jsx(TestComponent, { data: dataMetadata }));
        // validate tabbable mode is working first
        const firstRowInput = getByTestId('input-i0');
        chai.expect(firstRowInput.getAttribute('tabindex')).equals('-1');
        userEvent__default["default"].click(firstRowInput);
        rerender(jsxRuntime.jsx(TestComponent, { data: dataMetadata }));
        chai.expect(firstRowInput.getAttribute('tabindex')).equals('0');
        // now toggle off the mode and see click does not set the mode on
        rerender(jsxRuntime.jsx(TestComponent, { allowTabbableMode: false, data: dataMetadata }));
        userEvent__default["default"].click(firstRowInput);
        chai.expect(firstRowInput.getAttribute('tabindex')).equals('-1');
    });
});
function TestComponent({ allowTabbableMode, data, loadingIndicator, role }) {
    const rootRef = hooks.useRef(null);
    const [currentKey, setCurrentKey] = hooks.useState(undefined);
    const [dataState, _] = hooks.useState(data
        ? {
            offset: 0,
            data: data.slice(0, 25),
            totalSize: data.length,
            sizePrecision: 'exact'
        }
        : null);
    const getConfig = () => {
        return {
            scroller: () => {
                return rootRef.current;
            }
        };
    };
    return (jsxRuntime.jsx("div", Object.assign({ style: "height: calc(10 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x));overflow: auto", ref: rootRef }, { children: jsxRuntime.jsx(List.List, Object.assign({ accessibleSummary: "Basic list", allowTabbableMode: allowTabbableMode, currentKey: currentKey, data: dataState, loadingIndicator: loadingIndicator, onCurrentKeyChange: (detail) => setCurrentKey(detail.value), onLoadRange: () => { }, role: role, viewportConfig: getConfig() }, { children: (context) => (jsxRuntime.jsxs(Flex.Flex, { children: [context.selector && context.selector(), jsxRuntime.jsx(Input, { "data-testid": 'input-' + context.data.id }), jsxRuntime.jsx("div", Object.assign({ className: "item", style: {
                            height: 'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x))',
                            padding: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)'
                        } }, { children: context.data.name }))] })) })) })));
}
function populateData(count, isNumberKey) {
    const data = [];
    for (let i = 0; i < count; i++) {
        if (isNumberKey) {
            data.push({ id: i, name: 'Employee ' + i });
        }
        else {
            data.push({ id: 'i' + i, name: 'Employee ' + i });
        }
    }
    return isNumberKey ? data : data;
}
/**
 * Declare a tabbableMode aware component
 */
const Input = (props) => {
    const { tabbableModeProps } = hooks_UNSAFE_useTabbableMode.useTabbableMode();
    return jsxRuntime.jsx("input", Object.assign({ tabIndex: tabbableModeProps.tabIndex }, props));
};
/*  */
//# sourceMappingURL=List.spec.js.map
