{"version":3,"file":"UNSAFE_Icon.js","sources":["../../src/UNSAFE_Icon/withDirectionIcon.tsx","../../src/UNSAFE_Icon/withThemeIcon.tsx"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { Icon } from './Icon';\nimport { useUser } from '../hooks/UNSAFE_useUser';\n\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\n\n// Returns a component that renders one of the given icon components based on reading direction\nexport const withDirectionIcon = (LtrIcon: typeof Icon, RtlIcon: typeof Icon) => {\n  return (props: Props) => {\n    const { direction } = useUser();\n    return direction === 'ltr' ? <LtrIcon {...props} /> : <RtlIcon {...props} />;\n  };\n};\n","import { ComponentProps } from 'preact';\nimport { Icon } from './Icon';\nimport { useTheme } from '../hooks/UNSAFE_useTheme';\n\ntype Props = Omit<ComponentProps<typeof Icon>, 'viewBox'>;\n\ntype ThemeType = ReturnType<typeof useTheme>;\n\ntype ThemeIcons = Record<ThemeType['name'], typeof Icon>;\n\n// Returns a component that renders one of the given icon components based on theme\nexport const withThemeIcon = (themeIcons: ThemeIcons) => {\n  return (props: Props) => {\n    const { name } = useTheme();\n    const Component = themeIcons[name];\n    return <Component {...props} />;\n  };\n};\n"],"names":["useUser","_jsx","useTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;MACa,iBAAiB,GAAG,CAAC,OAAoB,EAAE,OAAoB,KAAI;IAC9E,OAAO,CAAC,KAAY,KAAI;AACtB,QAAA,MAAM,EAAE,SAAS,EAAE,GAAGA,4BAAO,EAAE,CAAC;AAChC,QAAA,OAAO,SAAS,KAAK,KAAK,GAAGC,eAAC,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAK,CAAI,CAAA,GAAGA,cAAA,CAAC,OAAO,EAAK,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAK,EAAI,CAAC;AAC/E,KAAC,CAAC;AACJ;;ACFA;AACa,MAAA,aAAa,GAAG,CAAC,UAAsB,KAAI;IACtD,OAAO,CAAC,KAAY,KAAI;AACtB,QAAA,MAAM,EAAE,IAAI,EAAE,GAAGC,8BAAQ,EAAE,CAAC;AAC5B,QAAA,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;AACnC,QAAA,OAAOD,cAAC,CAAA,SAAS,EAAK,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAK,EAAI,CAAC;AAClC,KAAC,CAAC;AACJ;;;;;;;;;"}