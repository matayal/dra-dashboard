/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var UNSAFE_View = require('../../UNSAFE_View.js');
require('../../tslib.es6-6f60dd09.js');
require('preact/compat');
require('../../utils/UNSAFE_interpolations/borders.js');
require('../../utils/UNSAFE_interpolations/dimensions.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../utils/UNSAFE_size.js');
require('../../_curry1-f1ebd742.js');
require('../../utils/UNSAFE_interpolations/flexitem.js');
require('../../flexitem-0c1e9a72.js');

require('../../keys-326d80d5.js');
require('../../_has-2eedb7e0.js');
require('../../utils/UNSAFE_interpolations/colors.js');
require('../../utils/UNSAFE_interpolations/padding.js');
require('../../utils/UNSAFE_interpolations/aria.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');

describe('Test View component', () => {
    it('render', async function () {
        const { container } = preact.render(jsxRuntime.jsx(UNSAFE_View.View, Object.assign({ border: "2px solid red" }, { children: jsxRuntime.jsx("div", { style: "width: 50px; height: 50px;" }) })));
        // Test that the inner content is rendered.
        chai.expect(container.firstChildElement).not.null;
    });
    it('adds aria-label using accessibleLabel prop', () => {
        const label = 'test label';
        const { getByLabelText } = preact.render(jsxRuntime.jsx(UNSAFE_View.View, { accessibleLabel: label }));
        chai.expect(getByLabelText(label)).not.null;
    });
    it('adds aria-labelledby using ariaLabelledBy prop', () => {
        const labelId = 'testId';
        const label = 'test label';
        const { getByLabelText } = preact.render(jsxRuntime.jsx(UNSAFE_View.View, Object.assign({ ariaLabelledBy: labelId }, { children: jsxRuntime.jsx("label", Object.assign({ id: labelId }, { children: label })) })));
        chai.expect(getByLabelText(label)).not.null;
    });
});
/*  */
//# sourceMappingURL=View.spec.js.map
