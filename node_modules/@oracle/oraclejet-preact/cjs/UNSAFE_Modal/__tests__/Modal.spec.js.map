{"version":3,"file":"Modal.spec.js","sources":["../../../../src/UNSAFE_Modal/__tests__/Modal.spec.tsx"],"sourcesContent":["/**\n * General FocusTrap tests\n */\nimport { Fragment, Ref } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { render, waitFor } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { LayerManager } from '../../UNSAFE_Layer';\nimport Modal from '../Modal';\n\nconst TestDialog = ({ submitButtonRef }: { submitButtonRef?: Ref<HTMLButtonElement> }) => (\n  <Fragment>\n    <input id=\"inside_input\" />\n    <button id=\"inside_cancel\">Cancel</button>\n    <button id=\"inside_submit\" ref={submitButtonRef}>\n      Submit\n    </button>\n  </Fragment>\n);\n\nconst TestComponent = ({\n  autoFocusTest = false,\n  isOpen = true,\n  restoreFocusTest = false\n}: {\n  autoFocusTest?: boolean;\n  isOpen?: boolean;\n  restoreFocusTest?: boolean;\n}) => {\n  const submitButtonRef = useRef<HTMLButtonElement>(null);\n  const followButtonRef = useRef<HTMLButtonElement>(null);\n\n  let maybeAutoFocusRef = undefined;\n  if (autoFocusTest) maybeAutoFocusRef = submitButtonRef;\n\n  let maybeRestoreFocusRef = undefined;\n  if (restoreFocusTest) maybeRestoreFocusRef = followButtonRef;\n\n  return (\n    <LayerManager>\n      <button>Preceding Button</button>\n      <Modal\n        autoFocusRef={maybeAutoFocusRef}\n        isOpen={isOpen}\n        restoreFocusRef={maybeRestoreFocusRef}>\n        <TestDialog submitButtonRef={submitButtonRef} />\n      </Modal>\n      <button ref={followButtonRef}>Following Button</button>\n    </LayerManager>\n  );\n};\n\ndescribe('Test Modal component', () => {\n  beforeEach(() => {\n    // need this as focus trap expects it to be set, it is used to determine if the tab stop is visible\n    Object.defineProperty(HTMLElement.prototype, 'offsetParent', {\n      get() {\n        return this.parentNode;\n      }\n    });\n  });\n  it('renders and sets default focus on first tabbable item', async () => {\n    const { getByRole } = render(<TestComponent />);\n    const insideInput = getByRole('textbox');\n    await waitFor(() => {\n      expect(document.activeElement).equals(insideInput);\n    });\n  });\n\n  it('renders and sets initial focus to specified element', async () => {\n    const { getByText } = render(<TestComponent autoFocusTest={true} />);\n    const autofocusButton = getByText('Submit');\n    await waitFor(() => {\n      expect(document.activeElement).equals(autofocusButton);\n    });\n  });\n\n  it('unmounts and resets focus to original element', async () => {\n    const { getByRole, getByText, rerender } = render(<TestComponent isOpen={false} />);\n    const precedingButton = getByText('Preceding Button');\n    // set original focus to button outside focus trap\n    precedingButton.focus();\n    expect(document.activeElement).equals(precedingButton);\n    rerender(<TestComponent isOpen={true} />);\n    const insideInput = getByRole('textbox');\n    expect(document.activeElement).equals(insideInput);\n    rerender(<TestComponent isOpen={false} />);\n    await waitFor(() => {\n      expect(document.activeElement).equals(precedingButton);\n    });\n  });\n\n  it('unmounts and resets focus to specified element', async () => {\n    const { getByRole, getByText, rerender } = render(<TestComponent isOpen={false} />);\n    const precedingButton = getByText('Preceding Button');\n    const followingButton = getByText('Following Button');\n    // set original focus to button outside focus trap\n    precedingButton.focus();\n    expect(document.activeElement).equals(precedingButton);\n    rerender(<TestComponent isOpen={true} restoreFocusTest={true} />);\n    const insideInput = getByRole('textbox');\n    expect(document.activeElement).equals(insideInput);\n    rerender(<TestComponent isOpen={false} />);\n    await waitFor(() => {\n      expect(document.activeElement).equals(followingButton);\n    });\n  });\n});\n"],"names":["_jsxs","Fragment","_jsx","useRef","LayerManager","Modal","render","waitFor","expect"],"mappings":"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"}