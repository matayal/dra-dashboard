/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var ReadonlyTextFieldInput = require('../../ReadonlyTextFieldInput-ec13a273.js');
var hooks_UNSAFE_useTabbableMode = require('../../hooks/UNSAFE_useTabbableMode.js');
var utils_UNSAFE_matchTranslationBundle = require('../../utils/UNSAFE_matchTranslationBundle.js');
var UNSAFE_Environment = require('../../UNSAFE_Environment.js');
require('../../tslib.es6-6f60dd09.js');
require('../../hooks/UNSAFE_useFormContext.js');
require('preact');
require('preact/hooks');
require("identity-obj-proxy");
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('../../utils/UNSAFE_interpolations/text.js');
require('../../keys-326d80d5.js');
require('../../_curry1-f1ebd742.js');
require('../../_has-2eedb7e0.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../hooks/UNSAFE_useFormFieldContext.js');
require('../../FormControlUtils-c960c51d.js');
require('../../hooks/UNSAFE_useTranslationBundle.js');
require('../../UNSAFE_Layer.js');
require('preact/compat');

function __variableDynamicImportRuntime0__(path) {
  switch (path) {
    case '../../resources/nls/ar/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar/bundle.js'); });
    case '../../resources/nls/ar-XB/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar-XB/bundle.js'); });
    case '../../resources/nls/bg/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bg/bundle.js'); });
    case '../../resources/nls/bs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs/bundle.js'); });
    case '../../resources/nls/bs-Cyrl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs-Cyrl/bundle.js'); });
    case '../../resources/nls/cs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/cs/bundle.js'); });
    case '../../resources/nls/da/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/da/bundle.js'); });
    case '../../resources/nls/de/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/de/bundle.js'); });
    case '../../resources/nls/el/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/el/bundle.js'); });
    case '../../resources/nls/en/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en/bundle.js'); });
    case '../../resources/nls/en-XA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XA/bundle.js'); });
    case '../../resources/nls/en-XC/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XC/bundle.js'); });
    case '../../resources/nls/es/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/es/bundle.js'); });
    case '../../resources/nls/et/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/et/bundle.js'); });
    case '../../resources/nls/fi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fi/bundle.js'); });
    case '../../resources/nls/fr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr/bundle.js'); });
    case '../../resources/nls/fr-CA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr-CA/bundle.js'); });
    case '../../resources/nls/he/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/he/bundle.js'); });
    case '../../resources/nls/hr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hr/bundle.js'); });
    case '../../resources/nls/hu/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hu/bundle.js'); });
    case '../../resources/nls/is/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/is/bundle.js'); });
    case '../../resources/nls/it/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/it/bundle.js'); });
    case '../../resources/nls/ja/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ja/bundle.js'); });
    case '../../resources/nls/ko/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ko/bundle.js'); });
    case '../../resources/nls/lt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lt/bundle.js'); });
    case '../../resources/nls/lv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lv/bundle.js'); });
    case '../../resources/nls/ms/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ms/bundle.js'); });
    case '../../resources/nls/nl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/nl/bundle.js'); });
    case '../../resources/nls/no/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/no/bundle.js'); });
    case '../../resources/nls/pl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pl/bundle.js'); });
    case '../../resources/nls/pt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt/bundle.js'); });
    case '../../resources/nls/pt-PT/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt-PT/bundle.js'); });
    case '../../resources/nls/ro/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ro/bundle.js'); });
    case '../../resources/nls/ru/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ru/bundle.js'); });
    case '../../resources/nls/sk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sk/bundle.js'); });
    case '../../resources/nls/sl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sl/bundle.js'); });
    case '../../resources/nls/sr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr/bundle.js'); });
    case '../../resources/nls/sr-Latn/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr-Latn/bundle.js'); });
    case '../../resources/nls/sv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sv/bundle.js'); });
    case '../../resources/nls/th/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/th/bundle.js'); });
    case '../../resources/nls/tr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/tr/bundle.js'); });
    case '../../resources/nls/uk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/uk/bundle.js'); });
    case '../../resources/nls/vi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/vi/bundle.js'); });
    case '../../resources/nls/zh-Hans/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hans/bundle.js'); });
    case '../../resources/nls/zh-Hant/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hant/bundle.js'); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
describe('ReadonlyTextFieldInput - TabbableModeContext', () => {
    let env;
    beforeEach(async function () {
        env = env !== null && env !== void 0 ? env : (await getEnvironmentContext());
    });
    it('as div, TabbableModeContext not provided', async () => {
        const value = 'sample text';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { as: "div", value: value }) })));
        const divElement = await content.findByText(value);
        chai.expect(divElement).not.to.be.null;
        const tabindex = divElement === null || divElement === void 0 ? void 0 : divElement.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('0');
    });
    it('as div, TabbableModeContext isTabbable=true', async () => {
        const value = 'sample text';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: true } }, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { as: "div", value: value }) })) })));
        const divElement = await content.findByText(value);
        chai.expect(divElement).not.to.be.null;
        const tabindex = divElement === null || divElement === void 0 ? void 0 : divElement.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('0');
    });
    it('as div, TabbableModeContext isTabbable=false', async () => {
        const value = 'sample text';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: false } }, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { as: "div", value: value }) })) })));
        const divElement = await content.findByText(value);
        chai.expect(divElement).not.to.be.null;
        const tabindex = divElement === null || divElement === void 0 ? void 0 : divElement.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('-1');
    });
    it('as input, TabbableModeContext not provided', async () => {
        const value = 'sample text';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { as: "input", type: "text", value: value }) })));
        const inputElement = await content.findByDisplayValue(value);
        chai.expect(inputElement).not.to.be.null;
        const tabindex = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('tabindex');
        chai.expect(tabindex).to.be.null;
    });
    it('as input, TabbableModeContext isTabbable=true', async () => {
        const value = 'sample text';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: true } }, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { as: "input", type: "text", value: value }) })) })));
        const inputElement = await content.findByDisplayValue(value);
        chai.expect(inputElement).not.to.be.null;
        const tabindex = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('tabindex');
        chai.expect(tabindex).to.be.null;
    });
    it('as input, TabbableModeContext isTabbable=false', async () => {
        const value = 'sample text';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: false } }, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { as: "input", type: "text", value: value }) })) })));
        const inputElement = await content.findByDisplayValue(value);
        chai.expect(inputElement).not.to.be.null;
        const tabindex = inputElement === null || inputElement === void 0 ? void 0 : inputElement.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('-1');
    });
    it('as textarea, TabbableModeContext not provided', async () => {
        const value = 'sample text';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { as: "textarea", value: value }) })));
        const textareaElement = await content.findByDisplayValue(value);
        chai.expect(textareaElement).not.to.be.null;
        const tabindex = textareaElement === null || textareaElement === void 0 ? void 0 : textareaElement.getAttribute('tabindex');
        chai.expect(tabindex).to.be.null;
    });
    it('as textarea, TabbableModeContext isTabbable=true', async () => {
        const value = 'sample text';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: true } }, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { as: "textarea", value: value }) })) })));
        const textareaElement = await content.findByDisplayValue(value);
        chai.expect(textareaElement).not.to.be.null;
        const tabindex = textareaElement === null || textareaElement === void 0 ? void 0 : textareaElement.getAttribute('tabindex');
        chai.expect(tabindex).to.be.null;
    });
    it('as textarea, TabbableModeContext isTabbable=false', async () => {
        const value = 'sample text';
        const content = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: false } }, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { as: "textarea", value: value }) })) })));
        const textareaElement = await content.findByDisplayValue(value);
        chai.expect(textareaElement).not.to.be.null;
        const tabindex = textareaElement === null || textareaElement === void 0 ? void 0 : textareaElement.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('-1');
    });
    afterEach(preact.cleanup);
});
async function getEnvironmentContext() {
    const locale = utils_UNSAFE_matchTranslationBundle.matchTranslationBundle(['en'], new Set(['en-US', 'en']));
    const { default: translations } = await __variableDynamicImportRuntime0__(`../../resources/nls/${locale}/bundle.ts`);
    return {
        translations: { '@oracle/oraclejet-preact': translations }
    };
}
/*  */
//# sourceMappingURL=ReadonlyTextFieldInput.spec.js.map
