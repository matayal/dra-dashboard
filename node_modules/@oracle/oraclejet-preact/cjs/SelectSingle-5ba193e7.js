/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('preact');
var compat = require('preact/compat');
var hooks_UNSAFE_useFocusableTextField = require('./hooks/UNSAFE_useFocusableTextField.js');
var hooks_UNSAFE_useFormContext = require('./hooks/UNSAFE_useFormContext.js');
var hooks_UNSAFE_useFormFieldContext = require('./hooks/UNSAFE_useFormFieldContext.js');
var hooks_UNSAFE_useLoadingIndicatorTimer = require('./hooks/UNSAFE_useLoadingIndicatorTimer.js');
var hooks_UNSAFE_useTextField = require('./hooks/UNSAFE_useTextField.js');
var UNSAFE_Label = require('./UNSAFE_Label.js');
var UNSAFE_LiveRegion = require('./UNSAFE_LiveRegion.js');
var UNSAFE_TextField = require('./UNSAFE_TextField.js');
var UNSAFE_UserAssistance = require('./UNSAFE_UserAssistance.js');
var PRIVATE_SelectCommon = require('./PRIVATE_SelectCommon.js');
var hooks = require('preact/hooks');
var utils_UNSAFE_mergeProps = require('./utils/UNSAFE_mergeProps.js');
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
var ReadonlyTextFieldInput = require('./ReadonlyTextFieldInput-ec13a273.js');
var TextFieldInput = require('./TextFieldInput-c5f861ba.js');

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
function useDisplayValue(itemText, valueItem) {
    // create the text displayed in the field from the selected value
    const displayValue = hooks.useMemo(() => {
        var _a;
        return valueItem === undefined ? '' : (_a = PRIVATE_SelectCommon.renderItemText(valueItem, itemText)) !== null && _a !== void 0 ? _a : '';
    }, [valueItem, itemText]);
    return displayValue;
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
/**
 * Hook that manages SelectSingle state and behavior.  This hook creates state variables and
 * event listeners, returning properties to apply to components internally rendered by
 * SelectSingle, as well as state information.
 *
 * @param data Specifies data for the dropdown list.
 * @param inputRef Ref to the input element.
 * @param isDisabled Specifies whether the component is disabled.
 * @param isFocused Specifies whether the component has focus.
 * @param isReadonly Specifies whether the component is readonly.
 * @param onCommit Callback invoked when the selected value is committed.
 * @param onFilter Callback function to trigger loading data for the dropdown list,
 * which may or may not be filtered by user entered text.
 * @param valueItem Specifies the key, data, and optional metadata for the selected value.
 *
 * @returns Properties to apply to internal components that SelectSingle renders, and component
 * state.
 */
function useSelectSingle({ data, inputRef, isDisabled, isFocused: propIsFocused, isReadonly, onCommit: propOnCommit, onFilter, valueItem }) {
    const { currentRow, dropdownRef, handleDropdownArrowClick, handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss, handleDropdownPosition, handleInput, handleMainFieldKeyDown: baseHandleMainFieldKeyDown, handleMainFieldKeyUp, isDropdownAbove, isDropdownOpen, isFocused, isUserFiltering, mainFieldRef, onCurrentKeyChange, onMouseDown, searchText, selectedKeys, setCurrentRow, setDropdownOpen, setSelectedKeys, stopFiltering, userInput } = PRIVATE_SelectCommon.useSelectCommon({
        data,
        inputRef,
        isFocused: propIsFocused,
        onFilter
    });
    // refs used by some of the effects below to determine whether the effect needs to run,
    // for when the list of dependencies is longer than what we want the trigger to actually be
    const prevDataRef = hooks.useRef(data);
    const prevDropdownOpenRef = hooks.useRef(isDropdownOpen);
    const prevSearchText = hooks.useRef(searchText);
    const onCommit = hooks.useCallback((value) => {
        propOnCommit === null || propOnCommit === void 0 ? void 0 : propOnCommit({
            value: value,
            previousValue: valueItem !== undefined ? valueItem.key : undefined
        });
    }, [propOnCommit, valueItem]);
    const clearValue = hooks.useCallback(() => {
        setDropdownOpen(false);
        setSelectedKeys(new Set());
        // call the onCommit callback so that the consuming code can update the valueItem
        onCommit(undefined);
    }, [onCommit]);
    const clearValueIfNeeded = hooks.useCallback(() => {
        if (isUserFiltering && userInput === '' && valueItem !== undefined) {
            clearValue();
            return true;
        }
        return false;
    }, [clearValue, isUserFiltering, userInput, valueItem]);
    // when the field loses focus, check to see if we need to clear the value
    hooks.useEffect(() => {
        if (!isFocused) {
            clearValueIfNeeded();
        }
        // only run when focus changes, at which point the current value of clearValueIfNeeded will
        // be used
    }, [isFocused]);
    const focusInput = hooks.useCallback(() => {
        var _a;
        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, []);
    const removeDropdown = hooks.useCallback(() => {
        var _a, _b;
        (_b = (_a = dropdownRef.current) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(dropdownRef.current);
    }, []);
    const myHandleDropdownAutoDismiss = hooks.useCallback((event) => {
        if (isDropdownOpen) {
            if ((event === null || event === void 0 ? void 0 : event.type) === 'keydown') {
                const keyboardEvent = event;
                switch (keyboardEvent.code) {
                    case PRIVATE_SelectCommon.KEYS.TAB:
                        // if there is a currentRow in the dropdown, select it and commit it
                        if (currentRow !== undefined && currentRow.rowKey !== undefined) {
                            setSelectedKeys(new Set([currentRow.rowKey]));
                            onCommit(currentRow.rowKey);
                        }
                        // Put focus on an element in the main field, but don't kill the event, so that
                        // the browser can naturally transfer focus to the next focusable item relative
                        // to the element in the main field.
                        focusInput();
                        // Remove the dropdown immediately, without waiting for a rerender based on changing
                        // state, so that the open dropdown cannot get focus when the browser handles the
                        // Tab key.
                        removeDropdown();
                        break;
                    default:
                        break;
                }
            }
        }
    }, [currentRow, focusInput, isDropdownOpen, onCommit]);
    const myHandleMainFieldKeyDown = hooks.useCallback((event) => {
        var _a, _b;
        // ignore control key and function key
        if (PRIVATE_SelectCommon.isControlOrFunctionKey(event)) {
            return;
        }
        switch (event.code) {
            case PRIVATE_SelectCommon.KEYS.TAB:
                // check whether we need to clear the value;
                // if not, check whether we need to select the current item
                const isValueClearedTab = clearValueIfNeeded();
                if (!isValueClearedTab && isDropdownOpen && data != null && data.data.length > 0) {
                    // if there is a currentRow in the dropdown (meaning a highlighted item that would
                    // have keyboard focus if the dropdown list had physical focus, which may be different
                    // from the currently selected item), select it and commit it;
                    // otherwise commit the currently selected value again so that a valueAction event
                    // will be fired
                    if (currentRow !== undefined && currentRow.rowKey !== undefined) {
                        setSelectedKeys(new Set([currentRow.rowKey]));
                        onCommit(currentRow.rowKey);
                    }
                    else {
                        onCommit((_a = valueItem === null || valueItem === void 0 ? void 0 : valueItem.key) !== null && _a !== void 0 ? _a : undefined);
                    }
                }
                // Remove the dropdown immediately, without waiting for a rerender based on changing
                // state, so that the open dropdown cannot get focus when the browser handles the
                // Tab key.
                removeDropdown();
                setDropdownOpen(false);
                break;
            case PRIVATE_SelectCommon.KEYS.ENTER:
                // check whether we need to clear the value;
                // if not, check whether we need to select the current item
                const isValueCleared = clearValueIfNeeded();
                if (!isValueCleared && isDropdownOpen && data != null && data.data.length > 0) {
                    setDropdownOpen(false);
                    // after selecting a value, the user is no longer actively filtering, so update related
                    // state accordingly so that the newly selected value appears in the field
                    stopFiltering();
                    // if there is a currentRow in the dropdown, select it and commit it;
                    // otherwise commit the currently selected value again
                    if (currentRow !== undefined && currentRow.rowKey !== undefined) {
                        setSelectedKeys(new Set([currentRow.rowKey]));
                        onCommit(currentRow.rowKey);
                    }
                    else {
                        onCommit((_b = valueItem === null || valueItem === void 0 ? void 0 : valueItem.key) !== null && _b !== void 0 ? _b : undefined);
                    }
                }
                break;
            default:
                break;
        }
    }, [clearValueIfNeeded, currentRow, data, isDropdownOpen, onCommit, valueItem]);
    // when the valueItem changes, save the new selectedKeys
    hooks.useEffect(() => {
        setSelectedKeys(valueItem === undefined ? undefined : new Set([valueItem.key]));
    }, [valueItem]);
    const onItemAction = hooks.useCallback((detail) => {
        focusInput();
        setDropdownOpen(false);
        // after selecting a value, the user is no longer actively filtering, so update related
        // state accordingly so that the newly selected value appears in the field
        stopFiltering();
        const newKey = detail.context.metadata.key;
        // update the selectedKeys so that the selection visual state of the collection
        // updates immediately while waiting for a new valueItem to be set
        setSelectedKeys(new Set([newKey]));
        // call the onCommit callback so that the consuming code can update the valueItem
        onCommit(newKey);
    }, [focusInput, onCommit]);
    hooks.useEffect(() => {
        // only run this effect when data changes because we need to wait for the new set of
        // filtered data to be set before highlighting the first result
        if (data === prevDataRef.current) {
            return;
        }
        // when filtering, set the first result of the filtered data set to be the current item
        // (check the data offset so we don't try to highlight again if the user scrolls through
        // the list and more data is fetched)
        if (isDropdownOpen &&
            isUserFiltering &&
            data != null &&
            data.offset === 0 &&
            data.data.length > 0) {
            // if there are results and search text, highlight the first row, otherwise clear
            // an existing highlight
            setCurrentRow({
                rowKey: searchText !== undefined && (searchText === null || searchText === void 0 ? void 0 : searchText.length) > 0 ? data.data[0].metadata.key : undefined
            });
        }
    }, [data, isDropdownOpen, isUserFiltering, searchText]);
    hooks.useEffect(() => {
        // only run this effect when the state of the dropdown changes
        if (isDropdownOpen === prevDropdownOpenRef.current) {
            return;
        }
        // clear the current item when the dropdown opens if there is no filter text
        if (isDropdownOpen &&
            (!isUserFiltering || searchText === undefined || searchText.length === 0)) {
            setCurrentRow({ rowKey: undefined });
        }
    }, [isDropdownOpen, isUserFiltering, searchText]);
    const dropdownEventHandlers = hooks.useMemo(() => {
        return utils_UNSAFE_mergeProps.mergeProps({
            onAutoDismiss: baseHandleDropdownAutoDismiss,
            onPosition: handleDropdownPosition
        }, { onAutoDismiss: myHandleDropdownAutoDismiss });
    }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);
    const inputEventHandlers = hooks.useMemo(() => {
        return utils_UNSAFE_mergeProps.mergeProps({
            onInput: handleInput,
            onKeyDown: baseHandleMainFieldKeyDown,
            onKeyUp: handleMainFieldKeyUp
        }, { onKeyDown: myHandleMainFieldKeyDown });
    }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);
    // update refs used in some of the above effects in a useEffect on every render so that they
    // update after the above effects run
    hooks.useEffect(() => {
        prevDataRef.current = data;
        prevDropdownOpenRef.current = isDropdownOpen;
        prevSearchText.current = searchText;
    });
    return {
        collectionProps: {
            currentKey: currentRow.rowKey,
            onCurrentKeyChange,
            onItemAction,
            selectedKeys
        },
        dropdownArrowEventHandlers: {
            onClick: handleDropdownArrowClick
        },
        dropdownEventHandlers,
        dropdownRef,
        inputEventHandlers,
        inputRef,
        isDropdownAbove,
        isDropdownOpen,
        isFocused,
        isUserFiltering,
        mainFieldRef,
        mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },
        searchText,
        userInput
    };
}

/**
 * A SelectSingle is a dropdown list that supports single selection and search filtering.
 */
const SelectSingle = compat.forwardRef(({ ariaDescribedBy, assistiveText, data, helpSourceLink, helpSourceText, isDisabled: propIsDisabled, isLoading: propIsLoading, isReadonly: propIsReadonly, isRequired, isRequiredShown, itemText, label, labelEdge: propLabelEdge, labelStartWidth: propLabelStartWidth, messages, onCommit, onFilter, onLoadRange, placeholder, textAlign: propTextAlign, userAssistanceDensity: propUserAssistanceDensity, valueItem, variant = 'default', virtualKeyboard }, ref) => {
    const { isDisabled: isFormDisabled, isReadonly: isFormReadonly, labelEdge: formLabelEdge, labelStartWidth: formLabelStartWidth, textAlign: formTextAlign, userAssistanceDensity: formUserAssistanceDensity } = hooks_UNSAFE_useFormContext.useFormContext();
    // default to FormContext values if component properties are not specified
    const isDisabled = propIsDisabled !== null && propIsDisabled !== void 0 ? propIsDisabled : isFormDisabled;
    const isReadonly = propIsReadonly !== null && propIsReadonly !== void 0 ? propIsReadonly : isFormReadonly;
    const labelEdge = propLabelEdge !== null && propLabelEdge !== void 0 ? propLabelEdge : formLabelEdge;
    const labelStartWidth = propLabelStartWidth !== null && propLabelStartWidth !== void 0 ? propLabelStartWidth : formLabelStartWidth;
    const textAlign = propTextAlign !== null && propTextAlign !== void 0 ? propTextAlign : formTextAlign;
    const userAssistanceDensity = propUserAssistanceDensity !== null && propUserAssistanceDensity !== void 0 ? propUserAssistanceDensity : formUserAssistanceDensity;
    const { enabledElementRef, focusProps, isFocused: origIsFocused, readonlyElementRef } = hooks_UNSAFE_useFocusableTextField.useFocusableTextField({ isDisabled, isReadonly, ref });
    const { collectionProps, dropdownArrowEventHandlers, dropdownEventHandlers, dropdownRef, inputEventHandlers, isDropdownAbove, isDropdownOpen, isFocused, isUserFiltering, mainFieldRef, mouseProps, searchText, userInput } = useSelectSingle({
        data,
        inputRef: enabledElementRef,
        isDisabled,
        isFocused: origIsFocused,
        isReadonly,
        onCommit,
        onFilter,
        valueItem
    });
    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to
    // show the loading indicator until after a delay, because showing it immediately could result
    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer
    // after the delay, when the timer expires, at which point we should show the loading indicator.
    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled
    // and no loading indicator will be shown.
    // (ListView detects its loading state by checking data === null.  While it would be nice for
    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.
    // If valueItems === null triggers our loading state, then the selections in the dropdown
    // are cleared for that period of time, which is undesirable.)
    const isLoading = hooks_UNSAFE_useLoadingIndicatorTimer.useLoadingIndicatorTimer(propIsLoading !== null && propIsLoading !== void 0 ? propIsLoading : false);
    const { baseId, formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } = hooks_UNSAFE_useTextField.useTextField({
        ariaDescribedBy,
        isDisabled,
        isFocused,
        isLoading,
        isReadonly,
        labelEdge,
        messages,
        styleVariant: variant,
        value: valueItem !== undefined ? true : undefined
    });
    const dropdownId = `${baseId}-dropdown`;
    const displayValue = useDisplayValue(itemText, valueItem);
    const labelComp = labelEdge !== 'none' ? jsxRuntime.jsx(UNSAFE_Label.Label, Object.assign({}, labelProps, { children: label })) : undefined;
    const fieldLabelProps = {
        label: labelEdge !== 'none' ? labelComp : undefined,
        labelEdge: labelEdge !== 'none' ? labelEdge : undefined,
        labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined
    };
    const ariaLabel = labelEdge === 'none' ? label : undefined;
    const inlineUserAssistance = isDisabled || isReadonly ? (
    // save space for user assistance if density is 'efficient', even though we don't
    // render user assistance for disabled or readonly fields
    userAssistanceDensity !== 'efficient' ? undefined : (jsxRuntime.jsx(UNSAFE_UserAssistance.InlineUserAssistance, Object.assign({ userAssistanceDensity: userAssistanceDensity }, userAssistanceProps)))) : (jsxRuntime.jsx(UNSAFE_UserAssistance.InlineUserAssistance, Object.assign({ assistiveText: assistiveText, fieldLabel: label, helpSourceLink: helpSourceLink, helpSourceText: helpSourceText, messages: messages, isRequiredShown: isRequiredShown, userAssistanceDensity: userAssistanceDensity }, userAssistanceProps)));
    const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
    if (isReadonly) {
        return (jsxRuntime.jsx(hooks_UNSAFE_useFormFieldContext.FormFieldContext.Provider, Object.assign({ value: formFieldContext }, { children: jsxRuntime.jsx(UNSAFE_TextField.ReadonlyTextField, Object.assign({ role: "presentation", inlineUserAssistance: inlineUserAssistance, onBlur: focusProps.onfocusout, onFocus: focusProps.onfocusin }, fieldLabelProps, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { ariaDescribedBy: ariaDescribedBy, ariaLabel: ariaLabel, ariaLabelledBy: labelProps.id, as: "div", elementRef: readonlyElementRef, hasInsideLabel: label !== undefined && labelEdge === 'inside', textAlign: textAlign, value: displayValue }) })) })));
    }
    const isDataFetched = data !== undefined && data !== null && !PRIVATE_SelectCommon.isBeforeDataFetch(data);
    const hasInsideLabel = labelComp !== undefined && labelEdge === 'inside';
    const liveRegionText = isDropdownOpen && isDataFetched
        ? (data === null || data === void 0 ? void 0 : data.totalSize) === 0
            ? translations.select_noMatchesFound()
            : (data === null || data === void 0 ? void 0 : data.totalSize) === 1
                ? translations.select_oneMatchFound()
                : (data === null || data === void 0 ? void 0 : data.sizePrecision) === 'exact'
                    ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data === null || data === void 0 ? void 0 : data.totalSize}` })
                    : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data === null || data === void 0 ? void 0 : data.totalSize}` })
        : '';
    const mainContent = (jsxRuntime.jsxs(preact.Fragment, { children: [jsxRuntime.jsx(TextFieldInput.TextFieldInput, Object.assign({ ariaAutoComplete: "list", ariaControls: dropdownId, ariaExpanded: isDropdownOpen, ariaLabel: ariaLabel, autoComplete: "off", hasInsideLabel: hasInsideLabel, inputRef: enabledElementRef, isRequired: isRequired }, inputEventHandlers, { placeholder: placeholder, role: "combobox", spellcheck: false, textAlign: textAlign, type: PRIVATE_SelectCommon.isMobile() ? (virtualKeyboard === 'auto' ? 'search' : virtualKeyboard) : undefined, value: isUserFiltering ? userInput : displayValue }, inputProps)), jsxRuntime.jsx(UNSAFE_LiveRegion.LiveRegion, { children: liveRegionText })] }));
    const dropdownArrow = (jsxRuntime.jsx(PRIVATE_SelectCommon.DropdownArrow, Object.assign({ isDisabled: isDisabled, size: hasInsideLabel ? 'md' : 'sm' }, dropdownArrowEventHandlers)));
    const dropdownInlineUserAssistance = isDropdownOpen &&
        !isDropdownAbove &&
        !isDisabled &&
        !isReadonly &&
        (assistiveText || helpSourceLink) &&
        (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (jsxRuntime.jsx(PRIVATE_SelectCommon.DropdownUserAssistance, { assistiveText: assistiveText, fieldLabel: label, helpSourceLink: helpSourceLink, helpSourceText: helpSourceText, userAssistanceDensity: userAssistanceDensity })) : undefined;
    const isEmptyResults = isDataFetched && (data === null || data === void 0 ? void 0 : data.totalSize) === 0;
    const dropdownListContent = isEmptyResults ? (jsxRuntime.jsx(PRIVATE_SelectCommon.EmptyResults, {})) : (jsxRuntime.jsx(PRIVATE_SelectCommon.DefaultList, Object.assign({}, collectionProps, { accessibleSummary: label !== null && label !== void 0 ? label : '', currentItemVariant: "highlight", data: data, itemText: itemText, onLoadRange: onLoadRange, searchText: isUserFiltering ? searchText : undefined, selectionMode: "single" })));
    return (jsxRuntime.jsxs(preact.Fragment, { children: [jsxRuntime.jsx(hooks_UNSAFE_useFormFieldContext.FormFieldContext.Provider, Object.assign({ value: formFieldContext }, { children: jsxRuntime.jsx(UNSAFE_TextField.TextField, Object.assign({ endContent: isLoading ? undefined : dropdownArrow, inlineUserAssistance: inlineUserAssistance, mainContent: mainContent, mainFieldRef: mainFieldRef, onBlur: focusProps === null || focusProps === void 0 ? void 0 : focusProps.onfocusout, onFocus: focusProps === null || focusProps === void 0 ? void 0 : focusProps.onfocusin }, textFieldProps, fieldLabelProps, mouseProps)) })), jsxRuntime.jsxs(PRIVATE_SelectCommon.Dropdown, Object.assign({ dropdownRef: dropdownRef, id: dropdownId, isOpen: isDropdownOpen &&
                    data !== undefined &&
                    (data === null || data.totalSize > 0 || PRIVATE_SelectCommon.isBeforeDataFetch(data) || isEmptyResults), anchorRef: mainFieldRef }, dropdownEventHandlers, { children: [jsxRuntime.jsx(PRIVATE_SelectCommon.DropdownList, Object.assign({ hasBottomGap: dropdownInlineUserAssistance === undefined, isLoading: data === null }, { children: dropdownListContent })), dropdownInlineUserAssistance] }))] }));
});

exports.SelectSingle = SelectSingle;
/*  */
//# sourceMappingURL=SelectSingle-5ba193e7.js.map
