/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var tslib_es6 = require('../../tslib.es6-6f60dd09.js');
var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var hooks = require('preact/hooks');
var Sinon = require('sinon');
var UNSAFE_Environment = require('../../UNSAFE_Environment.js');
var utils_UNSAFE_matchTranslationBundle = require('../../utils/UNSAFE_matchTranslationBundle.js');
var MessageToast = require('../../MessageToast-3ef5b6c9.js');
require('preact');
require('../../UNSAFE_Layer.js');
require('preact/compat');
require("identity-obj-proxy");
require('../../hooks/PRIVATE_useMessagesFocusManager.js');
require('../../hooks/UNSAFE_useBreakpointValues.js');
require('../../hooks/UNSAFE_useBreakpoints.js');
require('../../hooks/UNSAFE_useTranslationBundle.js');
require('../../PRIVATE_Message.js');
require('../../UNSAFE_Flex.js');
require('../../Flex-b113edd5.js');
require('../../utils/UNSAFE_interpolations/dimensions.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../utils/UNSAFE_size.js');
require('../../_curry1-f1ebd742.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../_has-2eedb7e0.js');
require('../../utils/UNSAFE_interpolations/boxalignment.js');
require('../../keys-326d80d5.js');
require('../../utils/UNSAFE_interpolations/flexbox.js');
require('../../flexbox-6deddb70.js');
require('../../utils/UNSAFE_interpolations/flexitem.js');
require('../../flexitem-0c1e9a72.js');
require('../../utils/PRIVATE_timer.js');
require('../../MessageCloseButton-66757186.js');
require('../../UNSAFE_Button.js');
require('../../Button-07d97191.js');
require('../../UNSAFE_BaseButton.js');
require('../../BaseButton-9bfe304e.js');
require('../../hooks/UNSAFE_usePress.js');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('../../hooks/UNSAFE_useActive.js');
require('../../utils/PRIVATE_clientHints.js');
require('../../clientHints-e821b5ee.js');
require('../../hooks/UNSAFE_useTabbableMode.js');
require('../../utils/UNSAFE_mergeProps.js');
require('../../index-3651c0e7.js');
require('../../index-d5067e50.js');
require('../../UNSAFE_Icon.js');
require('../../Icon-c44e10c9.js');
require('../../hooks/UNSAFE_useTooltip.js');
require('../../hooks/UNSAFE_useId.js');
require('../../UNSAFE_Floating.js');
require('../../Floating-48167355.js');
require('../../index-55dfe40c.js');
require('../../hooks/UNSAFE_useUser.js');
require('../../utils/PRIVATE_floatingUtils.js');
require('../../utils/PRIVATE_refUtils.js');
require('../../hooks/UNSAFE_useOutsideClick.js');
require('../../hooks/UNSAFE_useFocus.js');
require('../../hooks/UNSAFE_useTouch.js');
require('../../hooks/UNSAFE_useAnimation.js');
require('../../useAnimation-576ef8bc.js');
require('../../hooks/UNSAFE_useTheme.js');
require('../../MessageDetail-9ab2fec2.js');
require('../../MessageFormattingUtils-fac29bd4.js');
require('../../utils/UNSAFE_getLocale.js');
require('../../utils/UNSAFE_stringUtils.js');
require('../../stringUtils-dad38408.js');
require('../../Message.types-d5b1820f.js');
require('../../MessageStartIcon-5cdb8fbe.js');
require('../../MessageSummary-ea4ba9b8.js');
require('../../MessageTimestamp-cb7998db.js');
require('../../MessageUtils-c82ad817.js');
require('../../utils/UNSAFE_logger.js');
require('../../utils/UNSAFE_soundUtils.js');
require('../../MessagesManager-88e137d7.js');
require('../../PRIVATE_TransitionGroup.js');
require('../../hooks/UNSAFE_useMessagesContext.js');
require('../../PRIVATE_MessageLayer.js');
require('../../MessageLayer-2d31300d.js');
require('../../UNSAFE_WindowOverlay.js');
require('../../UNSAFE_FocusTrap.js');
require('../../FocusTrap-8af50913.js');
require('../../utils/PRIVATE_tabbableUtils.js');
require('../../UNSAFE_LiveRegion.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Sinon__default = /*#__PURE__*/_interopDefaultLegacy(Sinon);

function __variableDynamicImportRuntime1__(path) {
  switch (path) {
    case '../../resources/nls/ar/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar/bundle.js'); });
    case '../../resources/nls/ar-XB/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar-XB/bundle.js'); });
    case '../../resources/nls/bg/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bg/bundle.js'); });
    case '../../resources/nls/bs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs/bundle.js'); });
    case '../../resources/nls/bs-Cyrl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs-Cyrl/bundle.js'); });
    case '../../resources/nls/cs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/cs/bundle.js'); });
    case '../../resources/nls/da/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/da/bundle.js'); });
    case '../../resources/nls/de/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/de/bundle.js'); });
    case '../../resources/nls/el/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/el/bundle.js'); });
    case '../../resources/nls/en/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en/bundle.js'); });
    case '../../resources/nls/en-XA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XA/bundle.js'); });
    case '../../resources/nls/en-XC/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XC/bundle.js'); });
    case '../../resources/nls/es/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/es/bundle.js'); });
    case '../../resources/nls/et/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/et/bundle.js'); });
    case '../../resources/nls/fi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fi/bundle.js'); });
    case '../../resources/nls/fr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr/bundle.js'); });
    case '../../resources/nls/fr-CA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr-CA/bundle.js'); });
    case '../../resources/nls/he/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/he/bundle.js'); });
    case '../../resources/nls/hr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hr/bundle.js'); });
    case '../../resources/nls/hu/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hu/bundle.js'); });
    case '../../resources/nls/is/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/is/bundle.js'); });
    case '../../resources/nls/it/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/it/bundle.js'); });
    case '../../resources/nls/ja/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ja/bundle.js'); });
    case '../../resources/nls/ko/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ko/bundle.js'); });
    case '../../resources/nls/lt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lt/bundle.js'); });
    case '../../resources/nls/lv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lv/bundle.js'); });
    case '../../resources/nls/ms/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ms/bundle.js'); });
    case '../../resources/nls/nl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/nl/bundle.js'); });
    case '../../resources/nls/no/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/no/bundle.js'); });
    case '../../resources/nls/pl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pl/bundle.js'); });
    case '../../resources/nls/pt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt/bundle.js'); });
    case '../../resources/nls/pt-PT/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt-PT/bundle.js'); });
    case '../../resources/nls/ro/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ro/bundle.js'); });
    case '../../resources/nls/ru/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ru/bundle.js'); });
    case '../../resources/nls/sk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sk/bundle.js'); });
    case '../../resources/nls/sl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sl/bundle.js'); });
    case '../../resources/nls/sr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr/bundle.js'); });
    case '../../resources/nls/sr-Latn/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr-Latn/bundle.js'); });
    case '../../resources/nls/sv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sv/bundle.js'); });
    case '../../resources/nls/th/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/th/bundle.js'); });
    case '../../resources/nls/tr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/tr/bundle.js'); });
    case '../../resources/nls/uk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/uk/bundle.js'); });
    case '../../resources/nls/vi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/vi/bundle.js'); });
    case '../../resources/nls/zh-Hans/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hans/bundle.js'); });
    case '../../resources/nls/zh-Hant/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hant/bundle.js'); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }

function __variableDynamicImportRuntime0__(path) {
  switch (path) {
    case '../../resources/nls/ar/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar/bundle.js'); });
    case '../../resources/nls/ar-XB/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ar-XB/bundle.js'); });
    case '../../resources/nls/bg/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bg/bundle.js'); });
    case '../../resources/nls/bs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs/bundle.js'); });
    case '../../resources/nls/bs-Cyrl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/bs-Cyrl/bundle.js'); });
    case '../../resources/nls/cs/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/cs/bundle.js'); });
    case '../../resources/nls/da/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/da/bundle.js'); });
    case '../../resources/nls/de/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/de/bundle.js'); });
    case '../../resources/nls/el/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/el/bundle.js'); });
    case '../../resources/nls/en/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en/bundle.js'); });
    case '../../resources/nls/en-XA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XA/bundle.js'); });
    case '../../resources/nls/en-XC/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/en-XC/bundle.js'); });
    case '../../resources/nls/es/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/es/bundle.js'); });
    case '../../resources/nls/et/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/et/bundle.js'); });
    case '../../resources/nls/fi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fi/bundle.js'); });
    case '../../resources/nls/fr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr/bundle.js'); });
    case '../../resources/nls/fr-CA/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/fr-CA/bundle.js'); });
    case '../../resources/nls/he/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/he/bundle.js'); });
    case '../../resources/nls/hr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hr/bundle.js'); });
    case '../../resources/nls/hu/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/hu/bundle.js'); });
    case '../../resources/nls/is/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/is/bundle.js'); });
    case '../../resources/nls/it/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/it/bundle.js'); });
    case '../../resources/nls/ja/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ja/bundle.js'); });
    case '../../resources/nls/ko/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ko/bundle.js'); });
    case '../../resources/nls/lt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lt/bundle.js'); });
    case '../../resources/nls/lv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/lv/bundle.js'); });
    case '../../resources/nls/ms/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ms/bundle.js'); });
    case '../../resources/nls/nl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/nl/bundle.js'); });
    case '../../resources/nls/no/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/no/bundle.js'); });
    case '../../resources/nls/pl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pl/bundle.js'); });
    case '../../resources/nls/pt/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt/bundle.js'); });
    case '../../resources/nls/pt-PT/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/pt-PT/bundle.js'); });
    case '../../resources/nls/ro/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ro/bundle.js'); });
    case '../../resources/nls/ru/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/ru/bundle.js'); });
    case '../../resources/nls/sk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sk/bundle.js'); });
    case '../../resources/nls/sl/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sl/bundle.js'); });
    case '../../resources/nls/sr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr/bundle.js'); });
    case '../../resources/nls/sr-Latn/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sr-Latn/bundle.js'); });
    case '../../resources/nls/sv/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/sv/bundle.js'); });
    case '../../resources/nls/th/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/th/bundle.js'); });
    case '../../resources/nls/tr/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/tr/bundle.js'); });
    case '../../resources/nls/uk/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/uk/bundle.js'); });
    case '../../resources/nls/vi/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/vi/bundle.js'); });
    case '../../resources/nls/zh-Hans/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hans/bundle.js'); });
    case '../../resources/nls/zh-Hant/bundle.ts': return Promise.resolve().then(function () { return require('../../resources/nls/zh-Hant/bundle.js'); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
describe('Test MessageToast component', () => {
    let env;
    const locale = utils_UNSAFE_matchTranslationBundle.matchTranslationBundle(['en'], new Set(['en-US', 'en']));
    beforeEach(async () => {
        var _a;
        const { default: translations } = await __variableDynamicImportRuntime0__(`../../resources/nls/${locale}/bundle.ts`);
        env =
            env ||
                {
                    translations: { '@oracle/oraclejet-preact': translations }
                };
        // use fake matchMedia in jest
        if ((_a = !window.matchMedia) !== null && _a !== void 0 ? _a : jest) {
            Object.defineProperty(window, 'matchMedia', {
                writable: true,
                value: jest.fn().mockImplementation((query) => ({
                    matches: false,
                    media: query,
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    addEventListener: jest.fn(),
                    removeEventListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }))
            });
        }
    });
    it('renders data correctly', async () => {
        const data = [
            { key: 0, data: { summary: 'primary text', detail: 'data attribute', severity: 'error' } },
            { key: 1, data: { summary: 'primary text', detail: 'data attribute', severity: 'error' } },
            { key: 2, data: { summary: 'primary text', detail: 'data attribute', severity: 'error' } }
        ];
        const { queryAllByRole, queryAllByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        const summaries = queryAllByText('primary text', { exact: true });
        const details = queryAllByText('data attribute', { exact: true });
        chai.expect(messages[0].contains(summaries[0])).be.true;
        chai.expect(messages[0].contains(details[0])).be.true;
        chai.expect(messages[1].contains(summaries[1])).be.true;
        chai.expect(messages[1].contains(details[1])).be.true;
        chai.expect(messages[2].contains(summaries[2])).be.true;
        chai.expect(messages[2].contains(details[2])).be.true;
    });
    it('renders nothing when no data', async () => {
        const { queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: [] }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(0);
    });
    it('renders as error by default', async () => {
        const data = [{ key: 0, data: { summary: 'test toast' } }];
        const { container, queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(1);
        const errorTitle = container.querySelector('[title="Error"]');
        chai.expect(errorTitle).not.be.null;
    });
    it('renders as warning message', async () => {
        const data = [
            { key: 0, data: { severity: 'warning', summary: 'test toast' } }
        ];
        const { container, queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(1);
        const warningTitle = container.querySelector('[title="Warning"]');
        chai.expect(warningTitle).not.be.null;
    });
    it('renders as confirmation message', async () => {
        const data = [
            { key: 0, data: { severity: 'confirmation', summary: 'test toast' } }
        ];
        const { container, queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(1);
        const confirmationTitle = container.querySelector('[title="Confirmation"]');
        chai.expect(confirmationTitle).not.be.null;
    });
    it('renders as info message', async () => {
        const data = [
            { key: 0, data: { severity: 'info', summary: 'test toast' } }
        ];
        const { container, queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(1);
        const infoTitle = container.querySelector('[title="Info"]');
        chai.expect(infoTitle).not.be.null;
    });
    it('renders as neutral message', async () => {
        const data = [
            { key: 0, data: { severity: 'none', summary: 'test toast' } }
        ];
        const { queryAllByRole, queryByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(1);
        const severityIcon = queryByRole('img');
        chai.expect(severityIcon).be.null;
    });
    it('renders as close button by default', async () => {
        const data = [{ key: 0, data: { summary: 'test toast' } }];
        const { queryAllByRole, queryByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(1);
        const closeButton = queryByRole('button');
        chai.expect(closeButton).not.be.null;
    });
    it('renders without close button', async () => {
        const data = [
            { key: 0, data: { closeAffordance: 'off', summary: 'test toast' } }
        ];
        const { queryAllByRole, queryByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(1);
        const closeButton = queryByRole('button');
        chai.expect(closeButton).be.null;
    });
    it('renders custom detail content for all messages', async () => {
        const data = [
            { key: 0, data: { summary: 'test toast', detail: 'detail text' } },
            { key: 1, data: { summary: 'test toast', detail: 'detail text' } },
            { key: 2, data: { summary: 'test toast', detail: 'detail text' } }
        ];
        const { queryAllByRole, queryAllByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data, renderers: { customRenderer: () => jsxRuntime.jsx("div", { children: "Custom text" }) }, detailRendererKey: "customRenderer" }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        // default rendering should not have happened
        const detailText = queryAllByText('detail text');
        chai.expect(detailText).be.empty;
        // all the messages should have used custom rendering
        const customText = queryAllByText('Custom text');
        chai.expect(customText.length).equals(3);
    });
    it('passes correct argument for custom detail renderers', async () => {
        const data = [
            { key: 0, data: { summary: 'test toast', detail: 'detail text' } },
            { key: 1, data: { summary: 'test toast', detail: 'detail text' } },
            { key: 2, data: { summary: 'test toast', detail: 'detail text' } }
        ];
        const customRenderer = Sinon__default["default"].spy(() => jsxRuntime.jsx("div", { children: "Custom text" }));
        const { queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data, renderers: { customRenderer }, detailRendererKey: "customRenderer" }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        // renderer should be called thrice for each render
        chai.expect(customRenderer.callCount).equals(6);
        chai.expect(customRenderer.calledWith(Sinon__default["default"].match({
            data: data[0].data,
            key: data[0].key
        }))).be.true;
        chai.expect(customRenderer.calledWith(Sinon__default["default"].match({
            data: data[1].data,
            key: data[1].key
        }))).be.true;
        chai.expect(customRenderer.calledWith(Sinon__default["default"].match({
            data: data[2].data,
            key: data[2].key
        }))).be.true;
    });
    it('renders custom detail content for selective messages', async () => {
        const data = [
            { key: 0, data: { summary: 'test toast', detail: 'detail text' } },
            { key: 1, data: { summary: 'test toast', detail: 'detail text' } },
            { key: 2, data: { summary: 'test toast', detail: 'detail text' } }
        ];
        const detailRendererKey = ({ key }) => {
            if (key === 1) {
                return 'customRenderer';
            }
            return undefined;
        };
        const { queryAllByRole, queryAllByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data, renderers: { customRenderer: () => jsxRuntime.jsx("div", { children: "Custom text" }) }, detailRendererKey: detailRendererKey }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        // default rendering should have happened for 2 messages
        const detailText = queryAllByText('detail text');
        chai.expect(detailText.length).equals(2);
        // custom rendering should have happened for 1 message
        const customText = queryAllByText('Custom text');
        chai.expect(customText.length).equals(1);
    });
    it('passes correct argument for detailRendererKey', async () => {
        const data = [
            { key: 0, data: { summary: 'test toast', detail: 'detail text' } },
            { key: 1, data: { summary: 'test toast', detail: 'detail text' } },
            { key: 2, data: { summary: 'test toast', detail: 'detail text' } }
        ];
        const detailRendererKey = Sinon__default["default"].spy(({ key }) => {
            if (key === 1) {
                return 'customRenderer';
            }
            return undefined;
        });
        const { queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data, renderers: { customRenderer: () => jsxRuntime.jsx("div", { children: "Custom text" }) }, detailRendererKey: detailRendererKey }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        // renderer should be called thrice for each render
        chai.expect(detailRendererKey.callCount).equals(6);
        chai.expect(detailRendererKey.calledWith(Sinon__default["default"].match(data[0]))).be.true;
        chai.expect(detailRendererKey.calledWith(Sinon__default["default"].match(data[1]))).be.true;
        chai.expect(detailRendererKey.calledWith(Sinon__default["default"].match(data[2]))).be.true;
    });
    it('renders custom start icon content for all messages', async () => {
        const data = [
            { key: 0, data: { summary: 'test toast', severity: 'error' } },
            { key: 1, data: { summary: 'test toast', severity: 'warning' } },
            { key: 2, data: { summary: 'test toast', severity: 'none' } }
        ];
        const { queryAllByRole, queryAllByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data, renderers: { customRenderer: () => jsxRuntime.jsx("div", { children: "X" }) }, iconRendererKey: "customRenderer" }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        // default rendering should not have happened
        const defaultIcons = queryAllByRole('img');
        chai.expect(defaultIcons).be.empty;
        // all the messages should have used custom rendering
        const customIcon = queryAllByText('X');
        chai.expect(customIcon.length).equals(3);
    });
    it('passes correct argument for custom icon renderers', async () => {
        const data = [
            { key: 0, data: { summary: 'test toast', severity: 'error' } },
            { key: 1, data: { summary: 'test toast', severity: 'warning' } },
            { key: 2, data: { summary: 'test toast', severity: 'none' } }
        ];
        const customRenderer = Sinon__default["default"].spy(() => jsxRuntime.jsx("div", { children: "X" }));
        const { queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data, renderers: { customRenderer }, iconRendererKey: "customRenderer" }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        // renderer should be called thrice for each render
        chai.expect(customRenderer.callCount).equals(6);
        chai.expect(customRenderer.calledWith(Sinon__default["default"].match({
            data: data[0].data,
            key: data[0].key
        }))).be.true;
        chai.expect(customRenderer.calledWith(Sinon__default["default"].match({
            data: data[1].data,
            key: data[1].key
        }))).be.true;
        chai.expect(customRenderer.calledWith(Sinon__default["default"].match({
            data: data[2].data,
            key: data[2].key
        }))).be.true;
    });
    it('renders custom start icon content for selective messages', async () => {
        const data = [
            { key: 0, data: { summary: 'test toast', severity: 'error' } },
            { key: 1, data: { summary: 'test toast', severity: 'warning' } },
            { key: 2, data: { summary: 'test toast', severity: 'none' } }
        ];
        const iconRendererKey = ({ key }) => {
            if (key === 1) {
                return 'customRenderer';
            }
            return undefined;
        };
        const { queryAllByRole, queryAllByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data, renderers: { customRenderer: () => jsxRuntime.jsx("div", { children: "X" }) }, iconRendererKey: iconRendererKey }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        // default rendering should have happened for 2 messages
        // since we have `none` for 1 message, we should have only one icon.
        const icon = queryAllByRole('img');
        chai.expect(icon.length).equals(1);
        // custom rendering should have happened for 1 message
        const customIcon = queryAllByText('X');
        chai.expect(customIcon.length).equals(1);
    });
    it('passes correct argument for iconRendererKey', async () => {
        const data = [
            { key: 0, data: { summary: 'test toast', severity: 'error' } },
            { key: 1, data: { summary: 'test toast', severity: 'warning' } },
            { key: 2, data: { summary: 'test toast', severity: 'none' } }
        ];
        const iconRendererKey = Sinon__default["default"].spy(({ key }) => {
            if (key === 1) {
                return 'customRenderer';
            }
            return undefined;
        });
        const { queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data, renderers: { customRenderer: () => jsxRuntime.jsx("div", { children: "X" }) }, iconRendererKey: iconRendererKey }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        // renderer should be called thrice for each render
        chai.expect(iconRendererKey.callCount).equals(6);
        chai.expect(iconRendererKey.calledWith(Sinon__default["default"].match(data[0]))).be.true;
        chai.expect(iconRendererKey.calledWith(Sinon__default["default"].match(data[1]))).be.true;
        chai.expect(iconRendererKey.calledWith(Sinon__default["default"].match(data[2]))).be.true;
    });
});
describe('Test MessageToast interaction', () => {
    function UncontrolledMessageToast(_a) {
        var { data: propData, onClose: propOnClose } = _a, props = tslib_es6.__rest(_a, ["data", "onClose"]);
        const [data, setData] = hooks.useState(propData);
        const onClose = hooks.useCallback((args) => {
            // When no close handler is provided, close the corresponding
            // message. Otherwise let the provided handler do things.
            if (propOnClose === undefined) {
                setData(data.filter((i) => i.key !== args.key));
                return;
            }
            propOnClose.call(null, args);
        }, [propOnClose]);
        console.log(data);
        return jsxRuntime.jsx(MessageToast.MessageToast, Object.assign({}, props, { data: data, onClose: onClose }));
    }
    let env;
    beforeEach(async () => {
        const locale = utils_UNSAFE_matchTranslationBundle.matchTranslationBundle(['en'], new Set(['en-US', 'en']));
        const { default: translations } = await __variableDynamicImportRuntime1__(`../../resources/nls/${locale}/bundle.ts`);
        env = {
            translations: { '@oracle/oraclejet-preact': translations }
        };
        if (typeof jest !== 'undefined') {
            jest.useFakeTimers();
        }
    });
    // TODO: fix removal issue (for some reason the test cannot be made to wait for the removal of the message)
    // it works in the UI, but not in the test
    xit('closes messages correctly', async () => {
        const data = [
            { key: 0, data: { summary: 'first message', detail: 'data attribute', severity: 'error' } },
            { key: 1, data: { summary: 'second message', detail: 'data attribute', severity: 'error' } },
            { key: 2, data: { summary: 'third message', detail: 'data attribute', severity: 'error' } }
        ];
        const { queryAllByRole, queryByText } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(UncontrolledMessageToast, { data: data }) })));
        let messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        // close the second message
        let closeButton = queryAllByRole('button')[1];
        chai.expect(closeButton).not.be.null;
        preact.act(() => closeButton.click());
        // TODO: wait for animations when it is implemented
        messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(2);
        // second message should be closed
        chai.expect(queryByText('second message')).be.null;
        // close the now second message
        closeButton = queryAllByRole('button')[1];
        chai.expect(closeButton).not.be.null;
        preact.act(() => closeButton.click());
        // TODO: wait for animations when it is implemented
        messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(1);
        // originally third message should be closed
        chai.expect(queryByText('third message')).be.null;
    });
    it('has correct close button payload', async () => {
        const data = [
            { key: 0, data: { summary: 'first message', detail: 'data attribute', severity: 'error' } },
            { key: 1, data: { summary: 'second message', detail: 'data attribute', severity: 'error' } },
            { key: 2, data: { summary: 'third message', detail: 'data attribute', severity: 'error' } }
        ];
        const onClose = Sinon__default["default"].spy();
        const { queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(MessageToast.MessageToast, { data: data, onClose: onClose }) })));
        const messages = queryAllByRole('alert');
        chai.expect(messages.length).equals(3);
        const closeButtons = queryAllByRole('button');
        chai.expect(closeButtons.length).equals(3);
        preact.act(() => closeButtons[0].click());
        chai.expect(onClose.calledOnceWith(Sinon__default["default"].match(data[0]))).be.true;
        onClose.resetHistory();
        preact.act(() => closeButtons[1].click());
        chai.expect(onClose.calledOnceWith(Sinon__default["default"].match(data[1]))).be.true;
        onClose.resetHistory();
        preact.act(() => closeButtons[2].click());
        chai.expect(onClose.calledOnceWith(Sinon__default["default"].match(data[2]))).be.true;
        onClose.resetHistory();
    });
    // test only in jest environment
    if (typeof jest !== 'undefined') {
        // TODO: fix removal issue (for some reason the test cannot be made to wait for the removal of the message)
        // it works in the UI, but not in the test
        xit('auto dismiss works with default', async () => {
            const data = [
                {
                    key: 'message1',
                    data: {
                        severity: 'info',
                        summary: 'Info Text',
                        detail: 'Auto Timeout On',
                        closeAffordance: 'off',
                        autoTimeout: 'on'
                    }
                },
                {
                    key: 'message3',
                    data: {
                        severity: 'error',
                        summary: 'Error Text',
                        detail: 'Auto Timeout Off',
                        closeAffordance: 'on',
                        autoTimeout: 'off'
                    }
                }
            ];
            const { queryAllByRole } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(UncontrolledMessageToast, { data: data }) })));
            const messages = queryAllByRole('alert');
            chai.expect(messages.length).equals(2);
            // advanced past default
            await preact.act(async () => {
                jest === null || jest === void 0 ? void 0 : jest.advanceTimersByTime(6000);
            });
            // rerender(
            //   <RootEnvironmentProvider environment={env}>
            //     <UncontrolledMessageToast data={data} />
            //   </RootEnvironmentProvider>
            // );
            const messagesSecond = queryAllByRole('alert');
            chai.expect(messagesSecond.length).equals(1);
        });
        // TODO: fix removal issue (for some reason the test cannot be made to wait for the removal of the message)
        // it works in the UI, but not in the test
        xit('auto dismiss works with user defined', async () => {
            const data = [
                {
                    key: 'message1',
                    data: {
                        severity: 'info',
                        summary: 'Info Text',
                        detail: 'Auto Timeout On',
                        closeAffordance: 'off',
                        autoTimeout: 10000
                    }
                },
                {
                    key: 'message3',
                    data: {
                        severity: 'error',
                        summary: 'Error Text',
                        detail: 'Auto Timeout Off',
                        closeAffordance: 'on',
                        autoTimeout: 'off'
                    }
                }
            ];
            const { queryAllByRole, rerender } = preact.render(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(UncontrolledMessageToast, { data: data }) })));
            const messages = queryAllByRole('alert');
            chai.expect(messages.length).equals(2);
            // advanced past default
            await preact.act(async () => {
                jest === null || jest === void 0 ? void 0 : jest.advanceTimersByTime(11000);
            });
            rerender(jsxRuntime.jsx(UNSAFE_Environment.RootEnvironmentProvider, Object.assign({ environment: env }, { children: jsxRuntime.jsx(UncontrolledMessageToast, { data: data }) })));
            const messagesSecond = queryAllByRole('alert');
            chai.expect(messagesSecond.length).equals(1);
        });
    }
    if (typeof jest !== 'undefined') {
        afterEach(() => {
            jest.runOnlyPendingTimers();
            jest.useRealTimers();
        });
    }
});
/*  */
//# sourceMappingURL=MessageToast.spec.js.map
