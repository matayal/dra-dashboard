/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var BaseButton = require('../../BaseButton-9bfe304e.js');
var hooks_UNSAFE_useTabbableMode = require('../../hooks/UNSAFE_useTabbableMode.js');
require('../../tslib.es6-6f60dd09.js');
require('../../hooks/UNSAFE_usePress.js');
require('preact/hooks');
require('../../hooks/UNSAFE_useHover.js');
require('../../hooks/UNSAFE_useToggle.js');
require('../../hooks/UNSAFE_useActive.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('preact/compat');
require("identity-obj-proxy");
require('../../utils/UNSAFE_interpolations/dimensions.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../utils/UNSAFE_size.js');
require('../../_curry1-f1ebd742.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../_has-2eedb7e0.js');
require('../../utils/PRIVATE_clientHints.js');
require('../../clientHints-e821b5ee.js');
require('../../utils/UNSAFE_mergeProps.js');
require('preact');

afterEach(preact.cleanup);
describe('Test BaseButton component', () => {
    it('render', async function () {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, { children: "Press Me" }));
        const label = await content.findByText('Press Me');
        chai.expect(label).not.null;
    });
    it('click', async function () {
        let count = 0;
        const increment = () => {
            count++;
        };
        const content = preact.render(jsxRuntime.jsxs("div", { children: [jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ onAction: increment }, { children: "Press Me" })), jsxRuntime.jsx("span", { children: count })] }));
        const button = await content.findByText('Press Me');
        chai.expect(button).not.null;
        preact.fireEvent.click(button);
        chai.expect(count).to.equal(1);
    });
    it('ENTER', async function () {
        let count = 0;
        const increment = () => {
            count++;
        };
        const content = preact.render(jsxRuntime.jsxs("div", { children: [jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ onAction: increment }, { children: "Press Me" })), jsxRuntime.jsx("span", { children: count })] }));
        const button = await content.findByText('Press Me');
        chai.expect(button).not.null;
        //    fireEvent.keyDown(button, { code: 'Enter', key: 'Enter', keyCode: 13, charCode: 13 });
        preact.fireEvent.keyUp(button, { code: 'Enter', key: 'Enter', keyCode: 13, charCode: 13 });
        chai.expect(count).to.equal(1);
    });
    it('Space', async function () {
        let count = 0;
        const increment = () => {
            count++;
        };
        const content = preact.render(jsxRuntime.jsxs("div", { children: [jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ onAction: increment }, { children: "Press Me" })), jsxRuntime.jsx("span", { children: count })] }));
        const button = await content.findByText('Press Me');
        chai.expect(button).not.null;
        //   fireEvent.keyDown(button, { code: 'Space', key: 'Space', keyCode: 32, charcode: 32 });
        preact.fireEvent.keyUp(button, { code: 'Space', key: 'Space', keyCode: 32, charcode: 32 });
        chai.expect(count).to.equal(1);
    });
    it('variant borderless', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ variant: "borderless" }, { children: "button" })));
        const button = content.container.querySelector('.oj-c-base-button-borderless');
        chai.expect(button, 'borderless button found').not.null;
    });
    it('variant callToAction', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ variant: "callToAction" }, { children: "button" })));
        const button = content.container.querySelector('.oj-c-base-button-callToAction');
        chai.expect(button, 'callToAction button found').not.null;
    });
    it('variant danger', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ variant: "danger" }, { children: "button" })));
        const button = content.container.querySelector('.oj-c-base-button-danger');
        chai.expect(button, 'danger button found').not.null;
    });
    it('variant outlined', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ variant: "outlined" }, { children: "button" })));
        const button = content.container.querySelector('.oj-c-base-button-outlined');
        chai.expect(button, 'outlined button found').not.null;
    });
    it('variant solid', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ variant: "solid" }, { children: "button" })));
        const button = content.container.querySelector('.oj-c-base-button-solid');
        chai.expect(button, 'solid button found').not.null;
    });
    it('variant ghost', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ variant: "ghost" }, { children: "button" })));
        const button = content.container.querySelector('.oj-c-base-button-ghost');
        chai.expect(button, 'ghost button found').not.null;
    });
    it('tabindex default ', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, { children: "button" }));
        const button = content.container.firstElementChild;
        if (button) {
            const tabindex = button.getAttribute('tabindex');
            chai.expect(tabindex).to.equal('0');
        }
    });
    it('size default ', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, { children: "button" }));
        const button = content.container.querySelector('.oj-c-base-button-md');
        chai.expect(button, 'default size button found').not.null;
    });
    it('size sm ', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ size: "sm" }, { children: "button" })));
        const button = content.container.querySelector('.oj-c-base-button-sm');
        chai.expect(button, 'sm size button found').not.null;
    });
    it('size md ', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ size: "md" }, { children: "button" })));
        const button = content.container.querySelector('.oj-c-base-button-md');
        chai.expect(button, 'md size button found').not.null;
    });
    it('size lg ', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ size: "lg" }, { children: "button" })));
        const button = content.container.querySelector('.oj-c-base-button-lg');
        chai.expect(button, 'lg size button found').not.null;
    });
    it('disabled default', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, { children: "button" }));
        const button = content.container.firstElementChild;
        if (button) {
            const disabled = button.getAttribute('disabled');
            chai.expect(disabled).null;
        }
    });
    it('disabled', async () => {
        const content = preact.render(jsxRuntime.jsx(BaseButton.BaseButton, Object.assign({ isDisabled: true }, { children: "button" })));
        const button = content.container.firstElementChild;
        if (button) {
            const disabled = button.getAttribute('disabled');
            const tabindex = button.getAttribute('tabindex');
            chai.expect(tabindex).to.equal('-1');
            chai.expect(disabled).not.null;
        }
    });
    it('with TabbableModeContext isTabbable=true', async () => {
        const content = preact.render(jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: true } }, { children: jsxRuntime.jsx(BaseButton.BaseButton, { children: "button" }) })));
        const button = await content.findByText('button');
        const tabindex = button.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('0');
    });
    it('with TabbableModeContext isTabbable=false', async () => {
        const content = preact.render(jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: false } }, { children: jsxRuntime.jsx(BaseButton.BaseButton, { children: "button" }) })));
        const button = await content.findByText('button');
        const tabindex = button.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('-1');
    });
});
/*  */
//# sourceMappingURL=BaseButton.spec.js.map
