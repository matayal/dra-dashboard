/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var Text = require('../../Text-cdd6f2fd.js');
require('../../tslib.es6-6f60dd09.js');
require("identity-obj-proxy");
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('../../_curry1-f1ebd742.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../_has-2eedb7e0.js');

/*TO DO: Use computed style instead of classList length. */
describe('Test Text component', () => {
    it('default text', async function () {
        const content = preact.render(jsxRuntime.jsx(Text.Text, { children: "Hello world" }));
        const textSpan = await content.findByText('Hello world');
        chai.expect(textSpan).not.null;
    });
    it('lineClamp applies css class and lineClamp value', async () => {
        const content = preact.render(jsxRuntime.jsx(Text.Text, Object.assign({ lineClamp: 4 }, { children: "Hello world" })));
        const firstElement = content.container.firstElementChild;
        const lineClampValue = firstElement.style.webkitLineClamp;
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(6);
        chai.expect(lineClampValue).equals('4');
    });
    it('truncation applies css class', async () => {
        const content = preact.render(jsxRuntime.jsx(Text.Text, Object.assign({ truncation: "ellipsis" }, { children: "Hello world" })));
        const firstElement = content.container.firstElementChild;
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(6);
    });
    it('has id property', async function () {
        var _a;
        const content = preact.render(jsxRuntime.jsx(Text.Text, Object.assign({ id: "textId" }, { children: "Test Text" })));
        const text = await content.findByText('Test Text');
        const id = (_a = text.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute('id');
        chai.expect(id).to.equal('textId');
    });
});
/*  */
//# sourceMappingURL=Text.spec.js.map
