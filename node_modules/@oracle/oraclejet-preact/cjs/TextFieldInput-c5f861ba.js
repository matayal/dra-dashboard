/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var tslib_es6 = require('./tslib.es6-6f60dd09.js');
var jsxRuntime = require('preact/jsx-runtime');

var hooks_UNSAFE_useFormFieldContext = require('./hooks/UNSAFE_useFormFieldContext.js');
var hooks_UNSAFE_useTabbableMode = require('./hooks/UNSAFE_useTabbableMode.js');
var hooks_UNSAFE_useTextFieldInputHandlers = require('./hooks/UNSAFE_useTextFieldInputHandlers.js');
require('./utils/UNSAFE_classNames.js');
var utils_UNSAFE_interpolations_text = require('./utils/UNSAFE_interpolations/text.js');
var utils_UNSAFE_mergeInterpolations = require('./utils/UNSAFE_mergeInterpolations.js');
var FormControlUtils = require('./FormControlUtils-c960c51d.js');
var classNames = require('./classNames-55bceee6.js');

const textFieldStyles = {
  base: "_3navvy",
  embedded: "_1u199qo",
  nonReadonly: "gol8rq"
};
const readonlyStyles = {
  base: "_1kz2e2a",
  insideEnabledForm: "_1i0hm4r",
  textarea: "_1e7m3af",
  insideEnabledFormLabelInside: "_60ovt4",
  notInsideEnabledForm: "_13qk218",
  textareaNotInsideEnabledForm: "_1auvrj3"
}; //Consolidating all loading styles on form elements here

const loadingStyles = "xy1wrz";
const getTextFieldClasses = (readonly, variant) => {
  return classNames.classNames([textFieldStyles.base, variant === 'embedded' && textFieldStyles.embedded, !readonly && textFieldStyles.nonReadonly]);
};
const getReadonlyClasses = (isInsideNonReadonlyForm, hasInsideLabel, variant) => {
  const classes = classNames.classNames([readonlyStyles.base, variant === 'textarea' && readonlyStyles.textarea, isInsideNonReadonlyForm ? readonlyStyles.insideEnabledForm : readonlyStyles.notInsideEnabledForm, variant === 'textarea' && !isInsideNonReadonlyForm && readonlyStyles.textareaNotInsideEnabledForm, isInsideNonReadonlyForm && hasInsideLabel && readonlyStyles.insideEnabledFormLabelInside]);
  return classes;
};
const getInputId = id => {
  return (id !== null && id !== void 0 ? id : '') + '|input';
};
const isInputPlaceholderShown = (hasInsideLabel, hasValue, isFocused) => {
  return !(hasInsideLabel && !hasValue && !isFocused);
};

const rootStyles = {
  base: "r31ub9",
  // removes margin that Safari adds to the input element
  input: "_1xcja60",
  textarea: "_18nhsex",
  password: "_7ug75m",
  labelDefaultPadding: "_1j3ipzy",
  labelInsideBase: "_8uf9oc",
  textareaLabelInsideBase: "kvvgcx",
  labelInsideNoValueAndHasFocus: "pzinoo",
  hasStartContent: "urhp59",
  hasEndContent: "_1d42cg5",
  defaultColor: "_821xj3",
  disabledColor: "_1a5o460",
  // The 0.25em is the space between the prefix and the input. This is equivalent to ' '.
  hasPrefix: "_4fcmfv",
  hasSuffix: "fpdz8q",
  default: "gius89",
  defaultPaddingStart: "_13165zu",
  defaultPaddingEnd: "oe9gzv",
  embedded: "xp01v6"
};
const interpolations = [...Object.values(utils_UNSAFE_interpolations_text.textInterpolations)];
const styleInterpolations = utils_UNSAFE_mergeInterpolations.mergeInterpolations(interpolations);
const TextFieldInput = _a => {
  var {
    as = 'input',
    ariaAutoComplete,
    ariaControls,
    ariaDescribedBy,
    ariaExpanded,
    ariaInvalid,
    ariaLabel,
    ariaLabelledBy,
    ariaValueMax,
    ariaValueMin,
    ariaValueNow,
    ariaValueText,
    autoComplete,
    autoFocus,
    currentCommitValue,
    hasEndContent = false,
    hasInsideLabel = false,
    hasPrefix = false,
    hasStartContent = false,
    hasSuffix = false,
    id,
    inputRef,
    placeholder,
    isRequired,
    role,
    rows,
    spellcheck,
    type,
    value = '',
    variant = 'default',
    onInput,
    onCommit,
    onKeyDown,
    onKeyUp
  } = _a,
      props = tslib_es6.__rest(_a, ["as", "ariaAutoComplete", "ariaControls", "ariaDescribedBy", "ariaExpanded", "ariaInvalid", "ariaLabel", "ariaLabelledBy", "ariaValueMax", "ariaValueMin", "ariaValueNow", "ariaValueText", "autoComplete", "autoFocus", "currentCommitValue", "hasEndContent", "hasInsideLabel", "hasPrefix", "hasStartContent", "hasSuffix", "id", "inputRef", "placeholder", "isRequired", "role", "rows", "spellcheck", "type", "value", "variant", "onInput", "onCommit", "onKeyDown", "onKeyUp"]);

  const hasValue = value !== '';
  const {
    isDisabled,
    isFocused,
    isLoading,
    isReadonly
  } = hooks_UNSAFE_useFormFieldContext.useFormFieldContext();
  const myPlaceholder = isInputPlaceholderShown(hasInsideLabel, hasValue, isFocused) ? placeholder : undefined;
  const {
    class: styleInterpolationClasses
  } = styleInterpolations(props);
  const renderPrefix = !isDisabled && hasPrefix;
  const renderSuffix = !isDisabled && hasSuffix;
  const inputClasses = classNames.classNames(['oj-c-text-field-input', rootStyles.base, variant === 'default' ? classNames.classNames([rootStyles.default, as === 'textarea' && rootStyles.textarea, as === 'input' && rootStyles.input, type === 'password' && rootStyles.password, !hasStartContent && !renderPrefix && rootStyles.defaultPaddingStart, !hasEndContent && !renderSuffix && rootStyles.defaultPaddingEnd]) : rootStyles.embedded, hasInsideLabel && classNames.classNames([rootStyles.labelInsideBase, as === 'textarea' && rootStyles.textareaLabelInsideBase, !hasValue && isFocused && rootStyles.labelInsideNoValueAndHasFocus]), !hasInsideLabel && as !== 'textarea' && rootStyles.labelDefaultPadding, // We want the input to have padding on itself. This gives the user more space to click on to set focus to the input.
  // The padding between the input and the icon is different than the padding between the input and prefix/suffix (since they are both text)
  // startcontentpadding+input+endcontentpadding
  hasStartContent && !hasPrefix && rootStyles.hasStartContent, hasEndContent && !hasSuffix && rootStyles.hasEndContent, isDisabled ? rootStyles.disabledColor : rootStyles.defaultColor, // prefix+prefixpadding+input+suffixpadding+suffix
  // if there is also a startcontent or end content,
  // the prefix/suffix will have that padding on it (see PrefixSuffix)
  renderPrefix && rootStyles.hasPrefix, renderSuffix && rootStyles.hasSuffix, styleInterpolationClasses]);
  const Comp = as || 'input';
  const handlers = hooks_UNSAFE_useTextFieldInputHandlers.useTextFieldInputHandlers({
    currentCommitValue,
    value,
    onInput,
    onCommit,
    onKeyDown
  }); // the implicit default for tabindex on an input is 0, so do not explicitly set it.
  // JET-52914 - Implement Tabbable mode API contract in InputText
  // if not tabbable, spread tabbableModeProps on component

  const {
    isTabbable,
    tabbableModeProps
  } = hooks_UNSAFE_useTabbableMode.useTabbableMode(); // TODO: for autoComplete='off', need to configure attrs appropriately to make sure it
  // works across browsers and versions  (from review on 3/11/22)

  return jsxRuntime.jsx(Comp, Object.assign({
    "aria-autocomplete": ariaAutoComplete,
    "aria-controls": ariaControls,
    "aria-describedby": ariaDescribedBy,
    "aria-expanded": ariaExpanded,
    "aria-invalid": ariaInvalid,
    "aria-label": isLoading ? FormControlUtils.getLoadingAriaLabel() : ariaLabel ? ariaLabel : undefined,
    "aria-labelledby": ariaLabelledBy,
    "aria-required": isRequired ? true : undefined,
    "aria-valuemax": ariaValueMax,
    "aria-valuemin": ariaValueMin,
    "aria-valuenow": ariaValueNow,
    "aria-valuetext": ariaValueText,
    autocomplete: autoComplete,
    autofocus: autoFocus,
    class: inputClasses,
    disabled: isDisabled,
    id: id,
    onKeyUp: onKeyUp,
    placeholder: myPlaceholder,
    readonly: isReadonly,
    // @ts-ignore
    ref: inputRef,
    role: role,
    rows: rows,
    spellcheck: spellcheck,
    type: type,
    value: value
  }, handlers, !isTabbable && tabbableModeProps));
};

exports.TextFieldInput = TextFieldInput;
exports.getInputId = getInputId;
exports.getReadonlyClasses = getReadonlyClasses;
exports.getTextFieldClasses = getTextFieldClasses;
exports.loadingStyles = loadingStyles;
/*  */
//# sourceMappingURL=TextFieldInput-c5f861ba.js.map
