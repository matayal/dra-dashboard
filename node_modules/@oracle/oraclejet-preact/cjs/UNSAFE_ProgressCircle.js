/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./tslib.es6-6f60dd09.js');
var jsxRuntime = require('preact/jsx-runtime');
require('./utils/UNSAFE_classNames.js');
require("identity-obj-proxy");
var PRIVATE_Meter = require('./PRIVATE_Meter.js');
var utils_PRIVATE_meterUtils = require('./utils/PRIVATE_meterUtils.js');
var hooks_UNSAFE_useTranslationBundle = require('./hooks/UNSAFE_useTranslationBundle.js');
var classNames = require('./classNames-55bceee6.js');
require('preact/compat');
require('./utils/UNSAFE_dvtCommonUtils.js');
require('preact/hooks');
require('./UNSAFE_Environment.js');
require('preact');
require('./UNSAFE_Layer.js');

/**
 * A progress circle allows the user to visualize the progression of an extended computer operation.
 */

function ProgressCircle(_a) {
  var {
    value,
    max
  } = _a,
      otherProps = tslib_es6.__rest(_a, ["value", "max"]);

  return value === 'indeterminate' ? jsxRuntime.jsx(IndeterminateProgressCircle, Object.assign({}, otherProps)) : jsxRuntime.jsx(DeterminateProgressCircle, Object.assign({
    value: value,
    max: max
  }, otherProps));
}

const IndeterminateProgressCircle = ({
  accessibleLabel,
  id,
  size = 'md'
}) => {
  const baseClasses = classNames.classNames([styles.base, `oj-c-progress-circle-${size}`, styles.indeterminateOuter]);
  const translations = hooks_UNSAFE_useTranslationBundle.useTranslationBundle('@oracle/oraclejet-preact');
  const ariaProps = {
    'aria-valuetext': accessibleLabel || translations.progressIndeterminate(),
    role: 'progressbar'
  };
  return jsxRuntime.jsx(PRIVATE_Meter.CircleWrapper, Object.assign({
    id: id,
    ariaProps: ariaProps,
    class: baseClasses
  }, {
    children: jsxRuntime.jsx(PRIVATE_Meter.CircleInner, {
      class: styles.indeterminateInner
    })
  }));
};

const DeterminateProgressCircle = ({
  value = 0,
  max = 100,
  id,
  size = 'md'
}) => {
  const percentage = Math.min(Math.max(0, value / max), 1);
  const baseClasses = classNames.classNames([styles.base, `oj-c-progress-circle-${size}`]);
  const clipPath = utils_PRIVATE_meterUtils.getClipPath(90, percentage * 360, false, 'full');
  const ariaProps = {};
  ariaProps['aria-valuemin'] = value != null ? '0' : undefined;
  ariaProps['aria-valuemax'] = value != null ? `${max}` : undefined;
  ariaProps['aria-valuenow'] = value != null ? `${value}` : undefined;
  ariaProps['role'] = 'progressbar';
  return jsxRuntime.jsxs(PRIVATE_Meter.CircleWrapper, Object.assign({
    id: id,
    ariaProps: ariaProps,
    class: baseClasses
  }, {
    children: [jsxRuntime.jsx(PRIVATE_Meter.CircleInner, {
      class: classNames.classNames([styles.determinateInner, styles.track])
    }), jsxRuntime.jsx(PRIVATE_Meter.CircleInner, {
      class: classNames.classNames([styles.determinateInner, styles.value]),
      clipPath: clipPath
    })]
  }));
};

const styles = {
  base: "_1ivmimp",
  indeterminateOuter: "_3eumd1",
  indeterminateInner: "_155v4vm",
  determinateInner: "_1u04gql",
  track: "_1sosepj",
  value: "pkonds"
};

exports.ProgressCircle = ProgressCircle;
/*  */
//# sourceMappingURL=UNSAFE_ProgressCircle.js.map
