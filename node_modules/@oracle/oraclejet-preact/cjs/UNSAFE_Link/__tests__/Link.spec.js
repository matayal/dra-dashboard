/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact$1 = require('preact');
var preact = require('@testing-library/preact');
var chai = require('chai');
var Link = require('../../Link-2180b804.js');
var userEvent = require('@testing-library/user-event');
require("identity-obj-proxy");
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('../../hooks/UNSAFE_usePress.js');
require('preact/hooks');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var userEvent__default = /*#__PURE__*/_interopDefaultLegacy(userEvent);

describe('Test Link component', () => {
    it('render', () => {
        const content = preact.render(jsxRuntime.jsx(Link.Link, Object.assign({ href: "#" }, { children: "Link" })));
        const link = content.queryByText('Link', { exact: false });
        chai.expect(link).not.null;
    });
    it('applies default CSS classes', async function () {
        const content = preact.render(jsxRuntime.jsx(Link.Link, Object.assign({ href: "#" }, { children: "Link" })));
        const firstElement = content.container.firstElementChild;
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(2);
    });
    it('variant selected', async function () {
        const content = preact.render(jsxRuntime.jsx(Link.Link, Object.assign({ href: "#", variant: "primary" }, { children: "Link" })));
        const firstElement = content.container.firstElementChild;
        // @ts-ignore
        const classList = firstElement.classList;
        chai.expect(classList.length).equals(3);
    });
    it('event', async function () {
        let count = 0;
        const increment = () => count++;
        const content = preact.render(jsxRuntime.jsx(Link.Link, Object.assign({ href: "#", onClick: increment }, { children: "Link" })));
        const link = await content.findByText('Link');
        chai.expect(link).not.null;
        userEvent__default["default"].click(link);
        chai.expect(count).equals(1);
    });
    it('has single label id as aria-labelledby attribute value', async () => {
        const labelId = 'sampleLabelId';
        const content = preact.render(jsxRuntime.jsxs(preact$1.Fragment, { children: [jsxRuntime.jsx("p", { id: labelId }), jsxRuntime.jsx(Link.Link, Object.assign({ href: "#", ariaLabelledBy: labelId }, { children: "Link" }))] }));
        const link = await content.findByText('Link');
        const ariaLabelledBy = link.getAttribute('aria-labelledBy');
        chai.expect(ariaLabelledBy).to.equal(labelId);
    });
    it('has multiple label ids as aria-labelledby attribute value', async () => {
        const labelId1 = 'sampleLabelId1';
        const labelId2 = 'sampleLabelId2';
        const content = preact.render(jsxRuntime.jsxs(preact$1.Fragment, { children: [jsxRuntime.jsx("p", { id: labelId1 }), jsxRuntime.jsx("p", { id: labelId2 }), jsxRuntime.jsx(Link.Link, Object.assign({ href: "#", ariaLabelledBy: `${labelId1} ${labelId2}` }, { children: "Link" }))] }));
        const link = await content.findByText('Link');
        const ariaLabelledBy = link.getAttribute('aria-labelledBy');
        chai.expect(ariaLabelledBy).to.equal(`${labelId1} ${labelId2}`);
    });
    it('has accessible aria-label and aria-describedby values', async () => {
        var _a;
        const testAccessibleLabel = 'TEST-ACCESSIBLE-LABEL';
        const testAriaDescribedBy = 'TEST ARIA-DESCRIBED-BY';
        const content = preact.render(jsxRuntime.jsx(preact$1.Fragment, { children: jsxRuntime.jsx(Link.Link, Object.assign({ href: "#", accessibleLabel: testAccessibleLabel, ariaDescribedBy: testAriaDescribedBy }, { children: "Link" })) }));
        const link = await content.findByText('Link');
        chai.expect(link.getAttribute('aria-label')).equals(testAccessibleLabel);
        const describedByIds = (_a = link.getAttribute('aria-describedby')) === null || _a === void 0 ? void 0 : _a.split(' ');
        if (describedByIds && describedByIds.length > 0) {
            chai.expect(describedByIds[0]).equals('TEST');
            chai.expect(describedByIds[1]).equals('ARIA-DESCRIBED-BY');
        }
    });
});
/*  */
//# sourceMappingURL=Link.spec.js.map
