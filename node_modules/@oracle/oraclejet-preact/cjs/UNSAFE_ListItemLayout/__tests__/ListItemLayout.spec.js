/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var ListItemTextLayout = require('../../ListItemTextLayout-fb97c73d.js');
var hooks_UNSAFE_useTabbableMode = require('../../hooks/UNSAFE_useTabbableMode.js');
require("identity-obj-proxy");
require('../../UNSAFE_Grid.js');
require('../../tslib.es6-6f60dd09.js');
require('../../utils/UNSAFE_interpolations/grid.js');
require('../../utils/UNSAFE_interpolations/boxalignment.js');
require('../../keys-326d80d5.js');
require('../../_curry1-f1ebd742.js');
require('../../_has-2eedb7e0.js');
require('../../utils/UNSAFE_size.js');
require('../../utils/UNSAFE_arrayUtils.js');
require('../../utils/UNSAFE_mergeInterpolations.js');
require('../../utils/UNSAFE_classNames.js');
require('../../classNames-55bceee6.js');
require('../../_curry3-bc6e6a86.js');
require('../../_curry2-588f7ddc.js');
require('../../UNSAFE_Text.js');
require('../../Text-cdd6f2fd.js');
require('preact');
require('preact/hooks');

afterEach(preact.cleanup);
describe('Test ListItemLayout component', () => {
    it('render ListItemLayout', async function () {
        const content = preact.render(jsxRuntime.jsx(ListItemTextLayout.ListItemLayout, { primary: "Simple Text" }));
        const label = await content.findByText('Simple Text');
        chai.expect(label).not.to.be.null;
    });
    it('render ListItemText', async function () {
        const content = preact.render(jsxRuntime.jsx(ListItemTextLayout.ListItemLayout, { primary: jsxRuntime.jsx(ListItemTextLayout.ListItemText, Object.assign({ variant: "primary" }, { children: "ListItemText Sample" })) }));
        const label = await content.findByText('ListItemText Sample');
        chai.expect(label).not.to.be.null;
    });
    it('render ListItemTextLayout', async function () {
        const content = preact.render(jsxRuntime.jsx(ListItemTextLayout.ListItemLayout, { children: jsxRuntime.jsx(ListItemTextLayout.ListItemTextLayout, { primary: "ListItemTextLayout Sample" }) }));
        const label = await content.findByText('ListItemTextLayout Sample');
        chai.expect(label).not.to.be.null;
    });
    it('ListItemText, TabbableModeContext isTabbable=true', async () => {
        const { container } = preact.render(jsxRuntime.jsx(hooks_UNSAFE_useTabbableMode.TabbableModeContext.Provider, Object.assign({ value: { isTabbable: true } }, { children: jsxRuntime.jsx(ListItemTextLayout.ListItemText, Object.assign({ variant: "secondary" }, { children: "Tabbing with mode" })) })));
        const div = container.querySelector('div');
        chai.expect(div).not.to.be.null;
        const tabindex = div === null || div === void 0 ? void 0 : div.getAttribute('tabindex');
        chai.expect(tabindex).to.equal('0');
    });
});
/*  */
//# sourceMappingURL=ListItemLayout.spec.js.map
