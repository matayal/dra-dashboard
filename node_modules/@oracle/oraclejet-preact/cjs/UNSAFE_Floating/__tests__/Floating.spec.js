/* @oracle/oraclejet-preact: 14.1.0 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('@testing-library/preact');
var chai = require('chai');
var Floating = require('../../Floating-48167355.js');
var hooks = require('preact/hooks');
var UNSAFE_Environment = require('../../UNSAFE_Environment.js');
require('preact/compat');
require('../../index-55dfe40c.js');
require('../../hooks/UNSAFE_useUser.js');
require('preact');
require('../../UNSAFE_Layer.js');
require('../../utils/PRIVATE_floatingUtils.js');
require('../../utils/PRIVATE_refUtils.js');
require('../../hooks/UNSAFE_useOutsideClick.js');
require('../../utils/UNSAFE_arrayUtils.js');

function TestComponent() {
    const buttonRef = hooks.useRef(null);
    return (jsxRuntime.jsxs(UNSAFE_Environment.RootEnvironmentProvider, { children: [jsxRuntime.jsx("button", Object.assign({ ref: buttonRef }, { children: "Anchor" })), jsxRuntime.jsx(Floating.Floating, Object.assign({ anchorRef: buttonRef, placement: "bottom", offsetValue: { mainAxis: 0, crossAxis: 0 } }, { children: jsxRuntime.jsx("div", Object.assign({ style: {
                        border: '2px solid',
                        backgroundColor: 'white',
                        width: '100px',
                        textAlign: 'center',
                        padding: '10px'
                    } }, { children: jsxRuntime.jsx("p", { children: "Hello World!" }) })) }))] }));
}
describe('Test Floating component', () => {
    beforeEach(() => {
        if (!window.ResizeObserver) {
            // ResizeObserver isn't available in test environment
            const MockResizeObserver = jest.fn();
            MockResizeObserver.mockReturnValue({
                observe: () => null,
                unobserve: () => null,
                disconnect: () => null
            });
            Object.defineProperty(global, 'ResizeObserver', {
                writable: true,
                configurable: true,
                value: MockResizeObserver
            });
        }
    });
    it('render', async function () {
        const content = preact.render(jsxRuntime.jsx(TestComponent, {}));
        const initials = await content.getAllByText('Hello World!');
        chai.expect(initials).not.null;
    });
});
/*  */
//# sourceMappingURL=Floating.spec.js.map
