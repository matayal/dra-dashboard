import type { Ref } from 'preact/hooks';
import { Threshold } from '../utils/UNSAFE_meterTypes';
export declare function getValue(pageX: number, max: number, step: number, dimensionsRef: Ref<{
    width: number;
    x: number;
}>, isRtl: boolean): number;
export declare function getDimensions(element: HTMLElement | null): {
    width: number;
    x: number;
};
/**
 * Returns the aria properties of the rating gauge.
 * @param value The value of the rating gauge.
 * @param max The maximum value of the rating gauge.
 * @param valueText The default aria value text for the rating gauge.
 * @param accessibleLabel The aria label of the rating gauge.
 * @param ariaLabelledby The ariaLabelledBy of the rating gauge.
 * @param thresholds The thresholds values for the rating gauge.
 * @returns The aria properties of the rating gauge.
 */
export declare function getRatingAriaProps(value: number, max: number, accessibleLabel?: string, ariaLabelledby?: string, isDisabled?: boolean, isReadonly?: boolean, thresholds?: Threshold[], tooltip?: string): {
    'aria-label': string | undefined;
    'aria-valuenow': string;
    'aria-valuetext': string;
    'aria-valuemax': string;
    'aria-labelledby': string | undefined;
    'aria-disabled': boolean | undefined;
    'aria-readonly': boolean | undefined;
    'aria-valuemin': string;
    role: string;
};
/**
 * Returns whether the color is a valid enum.
 * @param color The color in rating gauge.
 * @returns true if the color enum is supported. false otherwise.
 */
export declare function isColorEnum(color: string | undefined): boolean;
