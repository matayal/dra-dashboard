import { RefObject } from 'preact';
import { useModal } from './hooks/useModal';
import { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';
declare type IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children'>;
declare type UseModalProps = Parameters<typeof useModal>[0];
declare type Props = UseModalProps & IntrinsicProps & {
    /**
     * Optional Ref to an element to focus on when component mounts
     * @default - undefined - behavior is to focus on first tabbableElement
     */
    autoFocusRef?: RefObject<HTMLElement>;
    /**
     * Optional Ref to element to focus on when component un-mounts
     * @default - undefined - behavior is to focus on the original activeElement when focus trap was enabled
     */
    restoreFocusRef?: RefObject<HTMLElement>;
};
declare const Modal: ({ autoFocusRef, children, isOpen, onBackdropClick, restoreFocusRef }: Props) => import("preact").JSX.Element | null;
export default Modal;
