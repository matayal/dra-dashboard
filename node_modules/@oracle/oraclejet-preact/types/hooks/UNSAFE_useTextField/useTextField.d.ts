import { ComponentProps } from 'preact';
import { TextField } from '../../UNSAFE_TextField';
import { InlineUserAssistance } from '../../UNSAFE_UserAssistance';
import { FormFieldContextProps } from '../UNSAFE_useFormFieldContext';
declare type PickedUserAssistanceProps = Pick<ComponentProps<typeof InlineUserAssistance>, 'messages'>;
declare type UseTextFieldProps<V> = PickedUserAssistanceProps & {
    ariaDescribedBy?: string;
    contentVariant?: 'input' | 'textarea';
    isDisabled?: boolean;
    isFocused?: boolean;
    isLoading?: boolean;
    isReadonly?: boolean;
    labelEdge?: ComponentProps<typeof TextField>['labelEdge'] | 'none';
    styleVariant?: 'default' | 'embedded';
    value?: V;
};
/**
 * A custom hook to determine the props for a component that renders
 * a text field
 */
export declare function useTextField<V>({ ariaDescribedBy, contentVariant, isDisabled, isFocused, isLoading, isReadonly, labelEdge, messages, styleVariant, value }: UseTextFieldProps<V>): {
    baseId: string;
    formFieldContext: FormFieldContextProps;
    inputProps: {
        id: string | undefined;
        ariaDescribedBy: string | undefined;
        ariaInvalid: string | undefined;
        variant: "default" | "embedded" | undefined;
    };
    labelProps: {
        forId: string | undefined;
        id: string | undefined;
        variant: "start" | "top" | "inside" | "insideError" | "insideWarning" | undefined;
    };
    textFieldProps: {
        contentVariant: "textarea" | "input" | undefined;
        statusVariant: "warning" | "error" | undefined;
        styleVariant: "default" | "embedded" | undefined;
    };
    userAssistanceProps: {
        id: string | undefined;
    };
};
export {};
