/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * Licensed under The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
import { ComponentChildren } from 'preact';
import { DataState, ItemContext, Range, Metadata } from '../UNSAFE_Collection';
import { ViewportConfig } from '../hooks/UNSAFE_useViewportIntersect';
/**
 * Props for the VirtualizedCollection component
 */
declare type Props<K, D> = {
    /**
     * A DataState object that provide information including data and metadata to the VirtualizedCollection.
     */
    data: DataState<K, D> | null;
    /**
     * Renderer callback used to render each item
     */
    children: (context: ItemContext<{
        data: D;
        metadata: Metadata<K>;
    }>) => ComponentChildren;
    /**
     * Viewport configuration including specifying the element which is used to determine what range
     * of data to render
     */
    viewportConfig: ViewportConfig;
    /**
     * Callback function to handle when viewport has changed, including the case
     * where user scrolls to the end of the component and there are more items to load.
     * The function should sets a new DataState on the component for the specified range.
     */
    onLoadRange: (range: Range) => void;
    /**
     * Optionally specify the custom load more indicator
     */
    loadMoreIndicator?: ComponentChildren;
    /**
     * Optionally provide the suggestion indicator sparkle
     */
    suggestions?: ComponentChildren;
};
/**
 * Component that only render items in the specified viewport.
 * @param props
 */
export declare function LoadMoreCollection<K, D>({ data, children, viewportConfig, onLoadRange, loadMoreIndicator, suggestions }: Props<K, D>): import("preact").JSX.Element;
export {};
