/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * Licensed under The Universal Permissive License (UPL), Vers.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
import { ComponentChildren } from 'preact';
import type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';
import { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';
declare type BaseButtonElementDetails = {
    type: 'button';
} | {
    type: 'a';
    href: string;
    target?: string;
    rel?: string;
} | {
    type: 'span';
};
declare type IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLElement>, 'autofocus' | 'title' | 'onBlur' | 'onFocus' | 'onMouseEnter' | 'onMouseLeave' | 'onTouchEnd' | 'onTouchStart'>;
export declare type StylingOptions = 'default' | 'min' | 'embedded' | 'container' | 'unstyled' | 'fill' | 'noBorderRadiusEnd' | 'noBorderRadiusStart' | 'active';
declare type AriaProps = {
    ariaHidden?: boolean;
    ariaExpanded?: boolean;
    ariaRoledescription?: string;
};
export declare type Props = IntrinsicProps & AriaProps & DimensionProps & {
    /**
     *The default slot is the button's text label. The oj-c-base-button element accepts plain text or DOM nodes as children for the default slot."
     */
    children?: ComponentChildren;
    /**
     * Specifies that the button element should be disabled.
     */
    isDisabled?: boolean;
    /**
     * Specifies if repeated events are dispatched for key or pointer held down
     */
    isRepeat?: boolean;
    /**
     *
     * Indicates in what states the button has chrome (background and border).
     *     "ghost": "Ghost buttons are the least prominent variation.  Ghost buttons are
     * useful for performing low-priority tasks, such as manipulating the UI.",
     *     "borderless"': "Borderless buttons are a more prominent variation. Borderless
     * buttons are useful for supplemental actions that require minimal emphasis.",
     *     "outlined"': "Outlined buttons are salient, but lighter weight than
     * solid buttons. Outlined buttons are useful for secondary actions.",
     *     "solid"': "Solid buttons stand out, and direct the user's attention to the
     *  most important actions in the UI.",
     *     "callToAction"': "A Call To Action (CTA) button guides the user to take or
     * complete the action that is the main goal of the page or page section. There
     * should only be one CTA button on a page at any given time.",
     *     "danger"': "A Danger button alerts the user to a dangerous situation."
     */
    variant?: 'ghost' | 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';
    /**
     * The size indicates how large the button is rendered: "sm", "md" (default), "lg".
     */
    size?: 'sm' | 'md' | 'lg';
    /**
     * Edge can be used to specify that the button is intended to go at the bottom of
     * a region, stretching from left to right: "bottom" or "none" (default).
     */
    edge?: 'none' | 'bottom';
    /**
     * The accessibleLabel is used to provide guidance for screen readers.
     */
    accessibleLabel?: string;
    /**
     * Styling can be used for customizing buttons by removing label padding ("min") or
     * removing all styling ("unstyled").
     */
    styling?: StylingOptions[];
    /**
     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.
     */
    onAction?: () => void;
    /**
     * Indicate element type and associated details
     */
    elementDetails?: BaseButtonElementDetails;
    /**
     * The ID of an element (or space separated IDs of multiple elements) that
     * describes the button.
     */
    'aria-describedby'?: string;
};
export declare const BaseButton: import("preact").FunctionalComponent<Omit<Props, "ref"> & {
    ref?: import("preact").Ref<HTMLSpanElement> | undefined;
}>;
export {};
