/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
import { ComponentChildren } from 'preact';
import { CurrentKeyDetail, DataState, ListItemContext, Range, SelectionDetail, SelectionMode, ItemActionDetail, CurrentItemVariant, ViewportInfo } from '../UNSAFE_Collection';
import { Keys } from '../utils/UNSAFE_keys';
import { ViewportConfig } from '../hooks/UNSAFE_useViewportIntersect';
/**
 * Types used by public and private list modules need to be exported publicly.
 */
/**
 * List supports a finite set of roles,
 */
export declare const roles: ("listbox" | "grid" | "treegrid")[];
export declare type Roles = typeof roles[number];
/**
 * Type for gridlines
 */
export declare const gridlinesValues: ("hidden" | "visible")[];
export declare type Gridlines = {
    item?: typeof gridlinesValues[number];
    top?: typeof gridlinesValues[number];
    bottom?: typeof gridlinesValues[number];
};
/**
 * Full set of props exposed in the Internal List Component
 *  This component is composed by ListViw, SelectMultiple and CardView components
 */
declare type PublicListProps<K, D> = {
    /**
     * A text that provides a summary of this ListView for the purpose of accessibility.
     * This is required in order to make ListView accessible.
     */
    accessibleSummary: string;
    /**
     * Option to toggle off tabbable mode, used by Select Multiple
     * @default: true
     */
    allowTabbableMode?: boolean;
    /**
     * A function to render each item
     */
    children: (context: ListItemContext<K, D>) => ComponentChildren;
    /**
     * The key of the item that currently have keyboard focus. Ignored if the current item is not
     * currently in the viewport.
     */
    currentKey?: K;
    /**
     * A property that can specify highlight styles on current item.
     */
    currentItemVariant?: CurrentItemVariant;
    /**
     * A DataState object that provide information including data and metadata to this ListView.
     * If the value is null, then ListView will show loading indicator until a DataState is set.
     */
    data: DataState<K, D> | null;
    gridlines?: Gridlines;
    /**
     * Callback function to handle when current focused item has changed.  The function should
     * update the currentKey prop with a new current key.
     */
    onCurrentKeyChange?: (detail: CurrentKeyDetail<K>) => void;
    /**
     * Callback function to handle when viewport has changed, including the case
     * where user scrolls to the end of the component and there are more items to load.
     * The function should sets a new DataState on the component for the specified range.
     */
    onLoadRange: (range: Range) => void;
    /**
     * Callback function to handle when selection has changed.  The function should update
     * the selectedKeys prop with a new set of selected keys.
     */
    onSelectionChange?: (detail: SelectionDetail<K>) => void;
    /**
     * A function to handle when user performs an action gesture (e.g. click, press enter key, press spacebar)
     * on an item while ListView is in navigation mode
     */
    onItemAction?: (detail: ItemActionDetail<K, D>) => void;
    /**
     * The keys of the current selected items in the ListView.
     */
    selectedKeys?: Keys<K>;
    /**
     * The type of selection behavior that is enabled on the ListView. This property controls the number
     * of selections that can be made via selection gestures at any given time.
     */
    selectionMode?: SelectionMode;
    /**
     * Viewport configuration which the application can specify the element to determine what range
     * of data to render.
     */
    viewportConfig?: ViewportConfig;
};
/**
 * These are the PRIVATE props implemented by the core PRIVATE_List module which are used by wrapper components such as ListView and SelectMultiple
 */
declare type PrivateListProps = {
    /**
     * Optional custom load more indicator
     */
    loadingIndicator?: ComponentChildren;
    /**
     * Optionally provide a custom callback to return the range to render based on viewport info
     */
    rangeExtractor?: (info: ViewportInfo) => Range;
    /**
     * Top-level aria role.
     * @default 'grid'
     */
    role?: Roles;
    /**
     * Whether virtualization should be used
     */
    isVirtualized?: boolean;
};
export declare type ListProps<K, D> = PublicListProps<K, D> & PrivateListProps;
export {};
