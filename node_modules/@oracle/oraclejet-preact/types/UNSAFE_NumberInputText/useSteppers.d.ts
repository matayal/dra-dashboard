/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
import { Ref } from 'preact/hooks';
export declare type StepDirection = 'increase' | 'decrease';
export declare type StepEvent = {
    /**
     * The direction of the requested step.
     */
    direction: StepDirection;
};
declare type Props = {
    /**
     * Controls whether the step buttons are shown.
     */
    hasSteppers?: boolean;
    /**
     * A ref to the input element.
     */
    inputRef: Ref<HTMLInputElement>;
    /**
     * Controls whether the step down button is disabled.
     */
    isStepDownDisabled?: boolean;
    /**
     * Controls whether the step up button is disabled.
     */
    isStepUpDisabled?: boolean;
    /**
     * Called when a continuous step is requested (aka "spin")
     * by holding down the arrow up or arrow down keys, or
     * by pressing and holding down a step button.
     */
    onSpin?: (event: StepEvent) => void;
    /**
     * Called when spinning is complete and the user has
     * released the arrow key or step button.
     */
    onSpinComplete?: () => void;
    /**
     * Called when a single step is requested by clicking a step button
     * or by pressing the arrow up or arrow down keys.
     */
    onStep?: (event: StepEvent) => void;
};
/**
 * A hook for using stepping functionality with NumberInputText. Stepping can
 * be accomplished using the step up or down buttons or by pressing the arrow
 * up or arrow down keys. Holding down the buttons or keys produces continuous
 * step events.
 *
 * @param hasSteppers Controls whether the step buttons are shown
 * @param inputRef A ref to the input element
 * @param isStepDownDisabled Controls whether stepping down is disabled
 * @param isStepUpDisabled Controls whether stepping up is disabled
 * @param onSpin Called when a continuous step (aka spin) is requested
 * @param onSpinComplete Called when spinning is complete
 * @param onStep Called when a single step is requested
 * @returns A JSX element which can be placed in the endContent of NumberInputText.
 */
export declare const useSteppers: ({ hasSteppers, inputRef, isStepDownDisabled, isStepUpDisabled, onSpin, onSpinComplete, onStep }: Props) => {
    steppers: import("preact").JSX.Element | undefined;
    stepHandlerProps: {
        onKeyDown: (event: KeyboardEvent) => void;
        onKeyUp: (event: KeyboardEvent) => void;
    } | {
        onKeyDown?: undefined;
        onKeyUp?: undefined;
    };
};
export {};
