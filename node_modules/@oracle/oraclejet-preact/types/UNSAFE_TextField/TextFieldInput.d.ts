import { Ref } from 'preact';
import type { TextProps } from '../utils/UNSAFE_interpolations/text';
import { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';
import { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';
declare type Autocomplete = 'off' | 'on' | string;
declare type OrigPickedPropsFromInput = Pick<HTMLAttributesSignalExcluded<HTMLInputElement>, 'autofocus' | 'id' | 'placeholder' | 'required' | 'role' | 'spellcheck' | 'type'>;
declare type RenamedPropsFromInput = Omit<OrigPickedPropsFromInput, 'autofocus' | 'required'> & {
    autoFocus?: OrigPickedPropsFromInput['autofocus'];
    isRequired?: OrigPickedPropsFromInput['required'];
};
declare type InputProps = {
    as?: 'input';
    type?: Pick<HTMLAttributesSignalExcluded<HTMLInputElement>, 'type'>['type'];
    rows?: never;
    inputRef?: Ref<HTMLInputElement>;
    hasPrefix?: boolean;
    hasSuffix?: boolean;
};
declare type TextAreaProps = {
    as: 'textarea';
    type?: never;
    rows?: number;
    inputRef?: Ref<HTMLTextAreaElement>;
    hasPrefix?: never;
    hasSuffix?: never;
};
declare type UniqueProps = InputProps | TextAreaProps;
declare type AriaProps = {
    ariaAutoComplete?: 'none' | 'inline' | 'list' | 'both';
    ariaControls?: string;
    ariaDescribedBy?: string;
    ariaExpanded?: boolean;
    ariaInvalid?: string;
    ariaLabel?: string;
    ariaLabelledBy?: string;
    ariaValueMax?: number;
    ariaValueMin?: number;
    ariaValueNow?: number;
    ariaValueText?: string;
};
declare type Props = UniqueProps & TextProps & RenamedPropsFromInput & AriaProps & {
    autoComplete?: Autocomplete;
    currentCommitValue?: string;
    hasEndContent?: boolean;
    hasInsideLabel?: boolean;
    hasStartContent?: boolean;
    value?: string;
    variant?: 'default' | 'embedded';
    onInput?: (detail: ValueUpdateDetail<string>) => void;
    onCommit?: (detail: ValueUpdateDetail<string>) => void;
    onKeyDown?: (event: KeyboardEvent) => void;
    onKeyUp?: (event: KeyboardEvent) => void;
};
export declare const TextFieldInput: ({ as, ariaAutoComplete, ariaControls, ariaDescribedBy, ariaExpanded, ariaInvalid, ariaLabel, ariaLabelledBy, ariaValueMax, ariaValueMin, ariaValueNow, ariaValueText, autoComplete, autoFocus, currentCommitValue, hasEndContent, hasInsideLabel, hasPrefix, hasStartContent, hasSuffix, id, inputRef, placeholder, isRequired, role, rows, spellcheck, type, value, variant, onInput, onCommit, onKeyDown, onKeyUp, ...props }: Props) => import("preact").JSX.Element;
export {};
