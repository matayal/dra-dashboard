{"version":3,"file":"List.spec.js","sources":["../../../../src/PRIVATE_List/__tests__/List.spec.tsx"],"sourcesContent":["/**\n * General List tests\n */\nimport { ComponentChildren } from 'preact';\nimport { useRef, useState } from 'preact/hooks';\nimport { render } from '@testing-library/preact';\nimport userEvent from '@testing-library/user-event';\nimport { expect } from 'chai';\nimport { getContents, getItems, getRoot } from './shared/testHelpers';\n\nimport { CurrentKeyDetail, DataState, ListItemContext, Metadata } from '../../UNSAFE_Collection';\nimport { useTabbableMode } from '../../hooks/UNSAFE_useTabbableMode';\nimport { List } from '../List';\nimport { Roles } from '../../UNSAFE_ListView';\nimport { Flex } from '../../UNSAFE_Flex';\nimport { HTMLAttributesSignalExcluded } from '../../utils/UNSAFE_attributeUtils';\n\n/**\n * Tests props solely exposed by List.tsx generic, used by external components (e.g. SelectMultiple),\n * the rest of the coverage for List.tsx comes from List.spec.tsx\n */\n\ndescribe('Test List component', () => {\n  beforeEach(() => {\n    if (!window.IntersectionObserver) {\n      // IntersectionObserver isn't available in test environment\n      const MockIntersectionObserver = jest.fn();\n      MockIntersectionObserver.mockReturnValue({\n        observe: () => null,\n        unobserve: () => null,\n        disconnect: () => null\n      });\n\n      Object.defineProperty(global, 'IntersectionObserver', {\n        writable: true,\n        configurable: true,\n        value: MockIntersectionObserver\n      });\n    }\n  });\n\n  /**\n   * custom loader test-cases\n   */\n\n  it('renders with custom loader', () => {\n    const loadingComponent = <div data-testid=\"load-more-component\">Loading</div>;\n\n    const { getAllByTestId, queryByTestId, rerender } = render(\n      <TestComponent data={null}></TestComponent>\n    );\n    expect(queryByTestId('load-more-component')).to.be.null;\n    rerender(<TestComponent data={null} loadingIndicator={loadingComponent}></TestComponent>);\n    expect(getAllByTestId('load-more-component').length).eq(1);\n  });\n\n  /**\n   * custom aria role test-cases\n   */\n\n  it('renders with default roles', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata}></TestComponent>);\n    const grid = await getRoot(list);\n    expect(grid.getAttribute('aria-rowcount')).eq('100');\n    const items = await getItems(list);\n    expect(items.length).eq(25);\n    const cells = await getContents(list);\n    expect(cells.length).eq(25);\n  });\n\n  it('renders with listbox rows', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} role=\"listbox\"></TestComponent>);\n    const grid = await getRoot(list, 'listbox');\n    expect(grid.getAttribute('aria-rowcount')).eq('100');\n    const items = await getItems(list, 'presentation');\n    expect(items.length).eq(25);\n    const cells = await getContents(list, 'option');\n    expect(cells.length).eq(25);\n  });\n\n  it('renders with treegrid rows', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n    const list = render(<TestComponent data={dataMetadata} role=\"treegrid\"></TestComponent>);\n    const grid = await getRoot(list, 'treegrid');\n    expect(grid.getAttribute('aria-rowcount')).eq('100');\n    const items = await getItems(list, 'row');\n    expect(items.length).eq(25);\n    const cells = await getContents(list, 'gridcell');\n    expect(cells.length).eq(25);\n  });\n\n  it('allows toggling off F2 mode', async () => {\n    const data = populateData(100) as Employee<string>[];\n    const dataMetadata: { data: Employee<string>; metadata: Metadata<string> }[] = data.map(\n      (data) => {\n        return { data: data, metadata: { key: data.id } };\n      }\n    );\n\n    const { getByTestId, rerender } = render(<TestComponent data={dataMetadata}></TestComponent>);\n\n    // validate tabbable mode is working first\n    const firstRowInput = getByTestId('input-i0');\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n    userEvent.click(firstRowInput);\n    rerender(<TestComponent data={dataMetadata}></TestComponent>);\n    expect(firstRowInput.getAttribute('tabindex')).equals('0');\n\n    // now toggle off the mode and see click does not set the mode on\n    rerender(<TestComponent allowTabbableMode={false} data={dataMetadata}></TestComponent>);\n    userEvent.click(firstRowInput);\n    expect(firstRowInput.getAttribute('tabindex')).equals('-1');\n  });\n});\n\ntype Employee<K> = {\n  id: K;\n  name: string;\n};\n\ntype Data<K> = { data: Employee<K>; metadata: Metadata<K> }[] | null;\n\ntype Props<K> = {\n  allowTabbableMode?: boolean;\n  data: Data<K>;\n  role?: Roles;\n  loadingIndicator?: ComponentChildren;\n};\nfunction TestComponent<K extends string | number>({\n  allowTabbableMode,\n  data,\n  loadingIndicator,\n  role\n}: Props<K>) {\n  const rootRef = useRef(null);\n  const [currentKey, setCurrentKey] = useState<K | undefined>(undefined);\n  const [dataState, _] = useState<DataState<K, Employee<K>> | null>(\n    data\n      ? {\n          offset: 0,\n          data: data.slice(0, 25),\n          totalSize: data.length,\n          sizePrecision: 'exact'\n        }\n      : null\n  );\n\n  const getConfig = () => {\n    return {\n      scroller: () => {\n        return rootRef.current;\n      }\n    };\n  };\n\n  return (\n    <div\n      style=\"height: calc(10 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x));overflow: auto\"\n      ref={rootRef}>\n      <List\n        accessibleSummary=\"Basic list\"\n        allowTabbableMode={allowTabbableMode}\n        currentKey={currentKey}\n        data={dataState}\n        loadingIndicator={loadingIndicator}\n        onCurrentKeyChange={(detail: CurrentKeyDetail<K>) => setCurrentKey(detail.value)}\n        onLoadRange={() => {}}\n        role={role}\n        viewportConfig={getConfig()}>\n        {(context: ListItemContext<K, Employee<K>>) => (\n          <Flex>\n            {context.selector && context.selector()}\n            <Input data-testid={'input-' + context.data.id} />\n            <div\n              className=\"item\"\n              style={{\n                height: 'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x))',\n                padding: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)'\n              }}>\n              {context.data.name}\n            </div>\n          </Flex>\n        )}\n      </List>\n    </div>\n  );\n}\n\nfunction populateData(\n  count: number,\n  isNumberKey?: boolean\n): Employee<string>[] | Employee<number>[] {\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    if (isNumberKey) {\n      data.push({ id: i, name: 'Employee ' + i });\n    } else {\n      data.push({ id: 'i' + i, name: 'Employee ' + i });\n    }\n  }\n  return isNumberKey ? (data as Employee<number>[]) : (data as Employee<string>[]);\n}\n\n/**\n * Declare a tabbableMode aware component\n */\nconst Input = (props: HTMLAttributesSignalExcluded<HTMLInputElement>) => {\n  const { tabbableModeProps } = useTabbableMode();\n  return <input tabIndex={tabbableModeProps.tabIndex} {...props} />;\n};\n"],"names":["TestComponent","allowTabbableMode","data","loadingIndicator","role","rootRef","useRef","currentKey","setCurrentKey","useState","undefined","dataState","_","offset","slice","totalSize","length","sizePrecision","_jsx","style","ref","children","List","Object","assign","accessibleSummary","onCurrentKeyChange","detail","value","onLoadRange","viewportConfig","scroller","current","context","_jsxs","Flex","selector","Input","id","className","height","padding","name","populateData","count","isNumberKey","i","push","describe","beforeEach","window","IntersectionObserver","MockIntersectionObserver","jest","fn","mockReturnValue","observe","unobserve","disconnect","defineProperty","global","writable","configurable","it","loadingComponent","jsx","getAllByTestId","queryByTestId","rerender","render","expect","to","be","null","eq","async","dataMetadata","map","metadata","key","list","grid","getRoot","getAttribute","items","getItems","cells","getContents","getByTestId","firstRowInput","equals","userEvent","click","props","tabbableModeProps","useTabbableMode","tabIndex"],"mappings":"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"}