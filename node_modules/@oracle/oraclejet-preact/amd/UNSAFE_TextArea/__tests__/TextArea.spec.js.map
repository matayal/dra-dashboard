{"version":3,"file":"TextArea.spec.js","sources":["../../../../src/UNSAFE_TextArea/__tests__/TextArea.spec.tsx"],"sourcesContent":["import { cleanup, render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { TextArea } from '../TextArea';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\n\nasync function getEnvironmentContext() {\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n  const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n  return {\n    translations: { '@oracle/oraclejet-preact': translations }\n  } as Partial<RootEnvironment>;\n}\n\nconst noOp = () => {};\n\ndescribe('TextArea - remaining text counter', () => {\n  it('verifies counter text is shown by default', async () => {\n    const env = await getEnvironmentContext();\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TextArea\n          ariaDescribedBy=\"testId\"\n          label=\"Test Label\"\n          value=\"1234\"\n          maxLength={50}\n          onInput={noOp}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    const siblingElement = textAreaElement?.nextElementSibling;\n    const children = siblingElement?.children;\n    const childSpanElement = children && children.length !== 0 ? children[0] : null;\n    expect(childSpanElement).not.to.be.null;\n    expect(childSpanElement?.tagName).to.equal('SPAN');\n    expect(childSpanElement?.textContent).to.equal('4/50');\n  });\n  it('verifies counter text is shown for maxLengthCounter == \"remaining\"', async () => {\n    const env = await getEnvironmentContext();\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TextArea\n          ariaDescribedBy=\"testId\"\n          label=\"Test Label\"\n          value=\"1234\"\n          maxLength={50}\n          maxLengthCounter=\"remaining\"\n          onInput={noOp}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    const siblingElement = textAreaElement?.nextElementSibling;\n    const children = siblingElement?.children;\n    const childSpanElement = children && children.length !== 0 ? children[0] : null;\n    expect(childSpanElement).not.to.be.null;\n    expect(childSpanElement?.tagName).to.equal('SPAN');\n    expect(childSpanElement?.textContent).to.equal('4/50');\n  });\n  it('verifies counter text is not shown for maxLengthCounter == \"none\"', async () => {\n    const env = await getEnvironmentContext();\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TextArea\n          ariaDescribedBy=\"testId\"\n          label=\"Test Label\"\n          value=\"1234\"\n          maxLength={50}\n          maxLengthCounter=\"none\"\n          onInput={noOp}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    const siblingElement = textAreaElement?.nextElementSibling;\n    const children = siblingElement?.children;\n    const childSpanElement = children && children.length !== 0 ? children[0] : null;\n    expect(childSpanElement).to.be.null;\n  });\n\n  afterEach(cleanup);\n});\n"],"names":["async","getEnvironmentContext","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","noOp","describe","it","env","container","render","_jsx","RootEnvironmentProvider","Object","assign","environment","children","TextArea","ariaDescribedBy","label","value","maxLength","onInput","textAreaElement","querySelector","siblingElement","nextElementSibling","childSpanElement","length","expect","not","to","be","null","tagName","equal","textContent","maxLengthCounter","afterEach","cleanup"],"mappings":"26GAOAA,eAAeC,KACb,MAAMC,EAASC,yBAAuB,CAAC,MAAO,IAAIC,IAAI,CAAC,QAAS,SACxDC,QAASC,q0KAAuBC,CAAO,uBAAuBL,eACtE,MAAO,CACLI,aAAc,CAAE,2BAA4BA,IAIhD,MAAME,GAAO,OAEbC,SAAS,oCAAqC,KAC5CC,GAAG,4CAA6CV,UAC9C,MAAMW,QAAYV,MACZW,UAAEA,GAAcC,SACpBC,EAAAA,IAACC,EAAAA,wBAAwBC,OAAAC,OAAA,CAAAC,YAAaP,GAAG,CAAAQ,SACvCL,EAAAA,IAACM,EAAAA,SAAQ,CACPC,gBAAgB,SAChBC,MAAM,aACNC,MAAM,OACNC,UAAW,GACXC,QAASjB,SAKTkB,EAAkBd,EAAUe,cAAc,YAC1CC,EAAiBF,MAAAA,OAAA,EAAAA,EAAiBG,mBAClCV,EAAWS,MAAAA,OAAA,EAAAA,EAAgBT,SAC3BW,EAAmBX,GAAgC,IAApBA,EAASY,OAAeZ,EAAS,GAAK,KAC3Ea,EAAMA,OAACF,GAAkBG,IAAIC,GAAGC,GAAGC,KACnCJ,EAAAA,OAAOF,MAAAA,OAAgB,EAAhBA,EAAkBO,SAASH,GAAGI,MAAM,QAC3CN,EAAAA,OAAOF,MAAAA,OAAgB,EAAhBA,EAAkBS,aAAaL,GAAGI,MAAM,UAEjD5B,GAAG,qEAAsEV,UACvE,MAAMW,QAAYV,MACZW,UAAEA,GAAcC,EAAMA,OAC1BC,MAACC,EAAuBA,wBAAAC,OAAAC,OAAA,CAACC,YAAaP,aACpCG,EAAAA,IAACM,EAAAA,UACCC,gBAAgB,SAChBC,MAAM,aACNC,MAAM,OACNC,UAAW,GACXgB,iBAAiB,YACjBf,QAASjB,SAKTkB,EAAkBd,EAAUe,cAAc,YAC1CC,EAAiBF,MAAAA,OAAA,EAAAA,EAAiBG,mBAClCV,EAAWS,MAAAA,OAAA,EAAAA,EAAgBT,SAC3BW,EAAmBX,GAAgC,IAApBA,EAASY,OAAeZ,EAAS,GAAK,KAC3Ea,EAAMA,OAACF,GAAkBG,IAAIC,GAAGC,GAAGC,KACnCJ,EAAAA,OAAOF,MAAAA,OAAgB,EAAhBA,EAAkBO,SAASH,GAAGI,MAAM,QAC3CN,EAAAA,OAAOF,MAAAA,OAAgB,EAAhBA,EAAkBS,aAAaL,GAAGI,MAAM,UAEjD5B,GAAG,oEAAqEV,UACtE,MAAMW,QAAYV,MACZW,UAAEA,GAAcC,EAAMA,OAC1BC,MAACC,EAAuBA,wBAAAC,OAAAC,OAAA,CAACC,YAAaP,aACpCG,EAAAA,IAACM,EAAAA,UACCC,gBAAgB,SAChBC,MAAM,aACNC,MAAM,OACNC,UAAW,GACXgB,iBAAiB,OACjBf,QAASjB,SAKTkB,EAAkBd,EAAUe,cAAc,YAC1CC,EAAiBF,MAAAA,OAAA,EAAAA,EAAiBG,mBAClCV,EAAWS,MAAAA,OAAA,EAAAA,EAAgBT,SAC3BW,EAAmBX,GAAgC,IAApBA,EAASY,OAAeZ,EAAS,GAAK,KAC3Ea,EAAAA,OAAOF,GAAkBI,GAAGC,GAAGC,OAGjCK,UAAUC,EAAOA"}