{"version":3,"file":"Environment.spec.js","sources":["../../../../src/UNSAFE_Environment/__tests__/Environment.spec.tsx"],"sourcesContent":["import { RootEnvironmentProvider, EnvironmentProvider } from '../EnvironmentProvider';\nimport type { RootEnvironment, Environment } from '../EnvironmentContext';\nimport { render } from '@testing-library/preact';\nimport { expect } from 'chai';\n\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { useUser } from '../../hooks/UNSAFE_useUser';\nimport { useTheme } from '../../hooks/UNSAFE_useTheme';\nimport { useScale } from '../../hooks/UNSAFE_useScale';\nimport { useColorScheme } from '../../hooks/UNSAFE_useColorScheme';\nimport { useTranslationBundle } from '../../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../../resources/nls/bundle';\n\nfunction TestConsumer() {\n  const { locale, direction, forcedColors } = useUser();\n  const { name } = useTheme();\n  const scale = useScale();\n  const colorScheme = useColorScheme();\n  return (\n    <div>\n      <ul>\n        <li>\n          {locale},{direction},{forcedColors}\n        </li>\n        <li>\n          {name},{scale},{colorScheme}\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nfunction TestEnvironmentOverwrite() {\n  const customisedEnv: Environment = { scale: 'md' };\n  return (\n    <EnvironmentProvider environment={customisedEnv}>\n      <div id=\"testModifiedEnv\">\n        <TestConsumer />\n      </div>\n    </EnvironmentProvider>\n  );\n}\n\nfunction TestTranslationBundle() {\n  const bundle = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return (\n    <ul>\n      <li>{bundle.info()}</li>\n      <li>{bundle.confirmation()}</li>\n    </ul>\n  );\n}\n\ndescribe('Test initial rendering', () => {\n  it('Test default values from RootEnvironmentProvider', () => {\n    const content = render(\n      <RootEnvironmentProvider>\n        <TestConsumer />\n      </RootEnvironmentProvider>\n    );\n    const listItems = content.container.querySelectorAll('li');\n    expect(listItems.length).equals(2);\n    expect(listItems[0].textContent).equals('en,ltr,none');\n    expect(listItems[1].textContent).equals('redwood,lg,light');\n  });\n\n  it('Initial values from RootEnvironmentProvider', () => {\n    const env: Partial<RootEnvironment> = {\n      user: { locale: 'es' },\n      colorScheme: 'dark'\n    };\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestConsumer />\n      </RootEnvironmentProvider>\n    );\n\n    const listItems = content.container.querySelectorAll('li');\n    expect(listItems.length).equals(2);\n    expect(listItems[0].textContent).equals('es,ltr,none');\n    expect(listItems[1].textContent).equals('redwood,lg,dark');\n  });\n\n  it('Replacing theme value with EnvironmentProvider', () => {\n    const env: Partial<RootEnvironment> = {\n      user: { locale: 'es' },\n      colorScheme: 'dark'\n    };\n\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestConsumer />\n        <TestEnvironmentOverwrite />\n      </RootEnvironmentProvider>\n    );\n\n    const listItems = content.container.querySelectorAll('li');\n    expect(listItems.length).equals(4);\n    expect(listItems[0].textContent).equals('es,ltr,none');\n    expect(listItems[1].textContent).equals('redwood,lg,dark');\n    expect(listItems[2].textContent).equals('es,ltr,none');\n    expect(listItems[3].textContent).equals('redwood,md,dark');\n  });\n\n  it('Using translation bundle from RootEnvironmentProvider', async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      user: { locale: 'es' },\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestTranslationBundle />\n      </RootEnvironmentProvider>\n    );\n\n    const listItems = content.container.querySelectorAll('li');\n    expect(listItems.length).equals(2);\n    expect(listItems[0].textContent).equals('Info');\n    expect(listItems[1].textContent).equals('Confirmation');\n  });\n\n  it('Overwrite translation bundle value for the subtree', async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const rootEnv: Partial<RootEnvironment> = {\n      user: { locale: 'es' },\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const env: Partial<Environment> = {\n      translations: { '@oracle/oraclejet-preact': { info: () => 'updatedInfo' } }\n    };\n    const content = render(\n      <RootEnvironmentProvider environment={rootEnv}>\n        <TestTranslationBundle />\n        <EnvironmentProvider environment={env}>\n          <TestTranslationBundle />\n        </EnvironmentProvider>\n      </RootEnvironmentProvider>\n    );\n\n    const listItems = content.container.querySelectorAll('li');\n    expect(listItems.length).equals(4);\n    expect(listItems[0].textContent).equals('Info');\n    expect(listItems[1].textContent).equals('Confirmation');\n    expect(listItems[2].textContent).equals('updatedInfo');\n    expect(listItems[3].textContent).equals('Confirmation');\n  });\n});\n"],"names":["TestConsumer","locale","direction","forcedColors","useUser","name","useTheme","scale","useScale","colorScheme","useColorScheme","_jsx","_jsxs","jsxs","children","TestEnvironmentOverwrite","EnvironmentProvider","environment","Object","assign","id","TestTranslationBundle","bundle","useTranslationBundle","info","confirmation","describe","it","listItems","render","jsx","RootEnvironmentProvider","container","querySelectorAll","expect","length","equals","textContent","user","async","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","env","__variableDynamicImportRuntime1__","rootEnv"],"mappings":"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"}