{"version":3,"file":"NumberInputText.spec.js","sources":["../../../../src/UNSAFE_NumberInputText/__dev__/NumberInputText.stories.tsx","../../../../src/UNSAFE_NumberInputText/__tests__/NumberInputText.spec.tsx"],"sourcesContent":["import { Meta, Story } from '@storybook/preact';\nimport { ComponentProps } from 'preact';\nimport { useCallback, useState } from 'preact/hooks';\nimport { FormContext, FormContextProps } from '../../hooks/UNSAFE_useFormContext';\nimport { NumberInputText } from '../NumberInputText';\nimport { StepDirection, StepEvent } from '../useSteppers';\nimport { ValueUpdateDetail } from '../../utils/UNSAFE_valueUpdateDetail';\n\nexport default {\n  title: 'Forms/UNSAFE_NumberInputText',\n  component: NumberInputText,\n  decorators: [\n    (Story: any) => (\n      <div style={{ minWidth: '18rem', maxWidth: '28rem', width: '50%' }}>{Story()}</div>\n    )\n  ]\n} as Meta;\n\ntype PickedPropsFromNumberInputText = Pick<\n  ComponentProps<typeof NumberInputText>,\n  | 'assistiveText'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'isRequired'\n  | 'label'\n  | 'labelEdge'\n  | 'messages'\n  | 'placeholder'\n  | 'prefix'\n  | 'suffix'\n  | 'textAlign'\n  | 'userAssistanceDensity'\n  | 'value'\n  | 'variant'\n>;\n\nconst DemoNumberInputText = ({\n  assistiveText,\n  helpSourceLink,\n  helpSourceText,\n  isDisabled,\n  isReadonly,\n  isRequired,\n  label,\n  labelEdge,\n  messages,\n  placeholder,\n  prefix,\n  suffix,\n  textAlign,\n  userAssistanceDensity,\n  value,\n  variant\n}: PickedPropsFromNumberInputText) => {\n  const [displayValue, setDisplayValue] = useState(value ?? '');\n  const handleInput = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (displayValue !== detail.value) {\n        setDisplayValue(detail.value ?? '');\n      }\n    },\n    [displayValue]\n  );\n\n  // In Redwood UX spec Required text should hide when the user types in a value and commits it,\n  // not when the user starts typing. Because of that we set isRequiredShown based on the\n  // committedValue being empty and isRequired.\n  const [valueCommitted, setValueCommitted] = useState(value ?? '');\n  const handleCommit = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (valueCommitted !== detail.value) {\n        setValueCommitted(detail.value ?? '');\n      }\n    },\n    [valueCommitted]\n  );\n\n  const valueNow = valueCommitted === '' ? undefined : +valueCommitted;\n\n  return (\n    <NumberInputText\n      ariaValueNow={valueNow}\n      ariaValueText={valueCommitted}\n      assistiveText={assistiveText}\n      helpSourceLink={helpSourceLink}\n      helpSourceText={helpSourceText}\n      isDisabled={isDisabled}\n      isReadonly={isReadonly}\n      isRequired={isRequired}\n      isRequiredShown={isRequired && valueCommitted === ''}\n      label={label}\n      labelEdge={labelEdge}\n      messages={messages}\n      onCommit={handleCommit}\n      onInput={handleInput}\n      placeholder={placeholder}\n      prefix={prefix}\n      suffix={suffix}\n      textAlign={textAlign}\n      userAssistanceDensity={userAssistanceDensity}\n      value={displayValue}\n      variant={variant}\n    />\n  );\n};\n\nconst demoContainerStyle = {\n  backgroundColor: 'aliceblue',\n  border: 'yellow dotted 2px',\n  boxSizing: 'border-box',\n  color: 'orangered',\n  height: '80px',\n  minWidth: '6em',\n  textAlign: 'right',\n  width: '25em'\n};\nconst DemoEmbeddedNumberInputText = (props: Omit<PickedPropsFromNumberInputText, 'variant'>) => (\n  <div style={demoContainerStyle}>\n    <DemoNumberInputText {...props} variant=\"embedded\" />\n  </div>\n);\n\ntype DemoSteppersProps = Pick<\n  ComponentProps<typeof NumberInputText>,\n  'isDisabled' | 'isReadonly' | 'label' | 'labelEdge'\n>;\n\nconst DemoSteppers = ({ isDisabled, isReadonly, label, labelEdge }: DemoSteppersProps) => {\n  // Note: unary + converts empty string to 0 so use parseInt for this example.\n  const parse = (value: string) => parseInt(value.replace(/[^\\d]+/gi, ''));\n  const min = 10,\n    max = 100,\n    step = 5;\n\n  const [displayValue, setDisplayValue] = useState('20');\n  const handleInput = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (displayValue !== detail.value) {\n        setDisplayValue(detail.value ?? '');\n      }\n    },\n    [displayValue]\n  );\n\n  const [committedValue, setCommittedValue] = useState(20);\n  const handleCommit = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      // On commit, filter out any non-numbers and parse the value.\n      // If the result is NaN, clear the display value.\n      const numberValue = parse(detail.value ?? '');\n      const newValue = Number.isNaN(numberValue) ? '' : numberValue.toString();\n      if (displayValue !== newValue) {\n        setDisplayValue(newValue);\n      }\n      if (committedValue !== numberValue) {\n        setCommittedValue(numberValue);\n      }\n    },\n    [displayValue, committedValue]\n  );\n\n  const doStep = (currentValue: number, direction: StepDirection) => {\n    if (Number.isNaN(currentValue)) {\n      // currentValue is not a valid number, return min\n      return min;\n    }\n\n    const modulo = currentValue % step;\n    let newValue: number;\n    if (modulo !== 0) {\n      // If currentValue is not a step match, snap it.\n      newValue = direction === 'increase' ? currentValue + (step - modulo) : currentValue - modulo;\n    } else {\n      // If currentValue is already a step match, just increment or decrement it.\n      newValue = direction === 'increase' ? currentValue + step : currentValue - step;\n    }\n    return newValue > max ? max : newValue < min ? min : newValue;\n  };\n\n  // Increment or decrement the current display value and then update the\n  // display and committed values to match.\n  const handleStep = useCallback((event: StepEvent) => {\n    setDisplayValue((current) => {\n      const currentValue = parse(current);\n      const newValue = doStep(currentValue, event.direction);\n      setCommittedValue(newValue);\n      return newValue.toString();\n    });\n  }, []);\n\n  const numberTooHigh: PickedPropsFromNumberInputText['messages'] = [\n    {\n      severity: 'error',\n      detail: 'Enter 100 or a lower number.'\n    }\n  ];\n  const numberTooLow: PickedPropsFromNumberInputText['messages'] = [\n    {\n      severity: 'error',\n      detail: 'Enter 10 or a higher number.'\n    }\n  ];\n  const messages: PickedPropsFromNumberInputText['messages'] =\n    committedValue !== NaN\n      ? committedValue > max\n        ? numberTooHigh\n        : committedValue < min\n        ? numberTooLow\n        : []\n      : [];\n\n  // If the committed value is not a valid number, don't update the aria value attributes.\n  const valueNow = Number.isNaN(committedValue) ? undefined : committedValue;\n  const valueText = Number.isNaN(committedValue) ? undefined : committedValue.toString();\n\n  return (\n    <NumberInputText\n      ariaValueMax={max}\n      ariaValueMin={min}\n      ariaValueNow={valueNow}\n      ariaValueText={valueText}\n      assistiveText=\"Enter a number between 10 and 100\"\n      hasSteppers={true}\n      isDisabled={isDisabled}\n      isReadonly={isReadonly}\n      isStepDownDisabled={committedValue <= min}\n      isStepUpDisabled={committedValue >= max}\n      label={label}\n      labelEdge={labelEdge}\n      messages={messages}\n      onCommit={handleCommit}\n      onInput={handleInput}\n      onSpin={handleStep}\n      onStep={handleStep}\n      value={displayValue}\n    />\n  );\n};\n\nconst numValue = '123';\nconst widthValue = '1920';\nconst accessCode = '58964';\nconst lbsValue = '140.5';\nconst longValue = '001-111222-3334-444444-555666666-777-8880-9099-0123456789';\nconst longText =\n  'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.';\n\nconst formContext: FormContextProps = {\n  isFormLayout: true,\n  userAssistanceDensity: 'efficient'\n};\n\nconst formContextWrap: FormContextProps = {\n  isFormLayout: true,\n  labelWrapping: 'wrap',\n  userAssistanceDensity: 'efficient'\n};\n\nconst formContextTruncate: FormContextProps = {\n  isFormLayout: true,\n  labelWrapping: 'truncate',\n  userAssistanceDensity: 'efficient'\n};\n\nexport const Overview = () => {\n  return (\n    <>\n      <h4>States inside form context</h4>\n      {/* TODO: use preact form layout in all these demos instead of FormContext.Provider\n          JET-49915 - Preact NumberInputText: replace FormContext.Provider with FormLayout in demos */}\n      <FormContext.Provider value={formContext}>\n        <DemoNumberInputText label=\"Enabled\" value={numValue} />\n        <DemoNumberInputText label=\"Disabled\" value={numValue} isDisabled={true} />\n        <DemoNumberInputText label=\"Readonly\" value={numValue} isReadonly={true} />\n        <DemoNumberInputText label=\"Enabled no value\" />\n        <DemoNumberInputText label=\"Disabled no value\" isDisabled={true} />\n        <DemoNumberInputText label=\"Readonly no value\" isReadonly={true} />\n      </FormContext.Provider>\n\n      <h4>States outside form context</h4>\n      <div>\n        <DemoNumberInputText label=\"Enabled\" value={numValue} />\n        <DemoNumberInputText label=\"Disabled\" value={numValue} isDisabled={true} />\n        <DemoNumberInputText label=\"Readonly\" value={numValue} isReadonly={true} />\n        <DemoNumberInputText label=\"Enabled no value\" />\n        <DemoNumberInputText label=\"Disabled no value\" isDisabled={true} />\n        <DemoNumberInputText label=\"Readonly no value\" isReadonly={true} />\n      </div>\n\n      <h4>Required & Placeholder</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoNumberInputText label=\"Required\" isRequired={true} />\n        <DemoNumberInputText label=\"Placeholder\" placeholder=\"placeholder text\" />\n      </FormContext.Provider>\n\n      <h4>Prefix & Suffix</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoNumberInputText label=\"Access Code\" prefix=\"IN\" value={accessCode} />\n        <DemoNumberInputText label=\"Width\" suffix=\"px\" value={widthValue} />\n      </FormContext.Provider>\n\n      <h4>Help</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoNumberInputText label=\"help text\" value={numValue} assistiveText=\"help text\" />\n        <DemoNumberInputText\n          label=\"help source\"\n          value={numValue}\n          helpSourceLink=\"https://www.oracle.com\"\n        />\n        <DemoNumberInputText\n          label=\"help source (custom text)\"\n          value={numValue}\n          helpSourceLink=\"https://www.oracle.com\"\n          helpSourceText=\"Click here\"\n        />\n      </FormContext.Provider>\n\n      <h4>Messages</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoNumberInputText\n          label=\"error\"\n          value={numValue}\n          messages={[{ severity: 'error', detail: 'detail' }]}\n        />\n        <DemoNumberInputText\n          label=\"warning\"\n          value={numValue}\n          messages={[{ severity: 'warning', detail: 'detail' }]}\n        />\n        <DemoNumberInputText\n          label=\"info\"\n          value={numValue}\n          messages={[{ severity: 'info', detail: 'detail' }]}\n        />\n        <DemoNumberInputText\n          label=\"confirmation\"\n          value={numValue}\n          messages={[{ severity: 'confirmation', detail: 'detail' }]}\n        />\n      </FormContext.Provider>\n    </>\n  );\n};\n\nexport const EmbeddedStylesOverview = () => {\n  return (\n    <div style=\"max-width: 50%;\">\n      <h4>States inside form context</h4>\n      {/* TODO: use preact form layout in all these demos instead of FormContext.Provider\n          JET-49915 - Preact InputText: replace FormContext.Provider with FormLayout in demos */}\n      <FormContext.Provider value={formContext}>\n        <DemoEmbeddedNumberInputText label=\"Enabled\" value={numValue}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Disabled\"\n          value={numValue}\n          isDisabled={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Readonly\"\n          value={numValue}\n          isReadonly={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText label=\"Enabled no value\"></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Disabled no value\"\n          isDisabled={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Readonly no value\"\n          isReadonly={true}></DemoEmbeddedNumberInputText>\n      </FormContext.Provider>\n\n      <h4>States outside form context</h4>\n      <div>\n        <DemoEmbeddedNumberInputText label=\"Enabled\" value={numValue}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Disabled\"\n          value={numValue}\n          isDisabled={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Readonly\"\n          value={numValue}\n          isReadonly={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText label=\"Enabled no value\"></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Disabled no value\"\n          isDisabled={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Readonly no value\"\n          isReadonly={true}></DemoEmbeddedNumberInputText>\n      </div>\n\n      <h4>No label</h4>\n      <div>\n        <DemoEmbeddedNumberInputText\n          label=\"Enabled\"\n          labelEdge=\"none\"\n          value={numValue}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Disabled\"\n          labelEdge=\"none\"\n          value={numValue}\n          isDisabled={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Readonly\"\n          labelEdge=\"none\"\n          value={numValue}\n          isReadonly={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Enabled no value\"\n          labelEdge=\"none\"></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Disabled no value\"\n          labelEdge=\"none\"\n          isDisabled={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Readonly no value\"\n          labelEdge=\"none\"\n          isReadonly={true}></DemoEmbeddedNumberInputText>\n      </div>\n\n      <h4>Required & Placeholder</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoEmbeddedNumberInputText\n          label=\"Required\"\n          isRequired={true}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"Placeholder\"\n          placeholder=\"placeholder text\"></DemoEmbeddedNumberInputText>\n      </FormContext.Provider>\n\n      <h4>Help</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoEmbeddedNumberInputText\n          label=\"help text\"\n          value={numValue}\n          assistiveText=\"help text\"></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"help source\"\n          value={numValue}\n          helpSourceLink=\"https://www.oracle.com\"></DemoEmbeddedNumberInputText>\n      </FormContext.Provider>\n\n      <h4>Messages</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoEmbeddedNumberInputText\n          label=\"error\"\n          value={numValue}\n          messages={[{ severity: 'error', detail: 'detail' }]}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"warning\"\n          value={numValue}\n          messages={[{ severity: 'warning', detail: 'detail' }]}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"info\"\n          value={numValue}\n          messages={[{ severity: 'info', detail: 'detail' }]}></DemoEmbeddedNumberInputText>\n        <DemoEmbeddedNumberInputText\n          label=\"confirmation\"\n          value={numValue}\n          messages={[{ severity: 'confirmation', detail: 'detail' }]}></DemoEmbeddedNumberInputText>\n      </FormContext.Provider>\n    </div>\n  );\n};\n\ntype EmbeddedStylesProps = Pick<\n  ComponentProps<typeof NumberInputText>,\n  | 'isDisabled'\n  | 'isReadonly'\n  | 'isRequiredShown'\n  | 'labelEdge'\n  | 'placeholder'\n  | 'textAlign'\n  | 'variant'\n>;\nexport const EmbeddedStyles: Story<EmbeddedStylesProps> = (args) => {\n  const demoContainerStyle = {\n    backgroundColor: 'aliceblue',\n    border: 'yellow dotted 2px',\n    boxSizing: 'border-box',\n    color: 'orangered',\n    height: '80px',\n    minWidth: '6em',\n    textAlign: 'right',\n    width: '25em'\n  };\n  return (\n    <div style={demoContainerStyle}>\n      <DemoNumberInputText label=\"Input Number\" {...args} />\n    </div>\n  );\n};\nEmbeddedStyles.args = {\n  isDisabled: false,\n  isReadonly: false,\n  labelEdge: 'none',\n  placeholder: 'Enter value',\n  textAlign: undefined,\n  variant: 'embedded'\n};\nEmbeddedStyles.parameters = {\n  controls: {\n    include: [...Object.keys(EmbeddedStyles.args)]\n  }\n};\n\ntype CreateNumberInputTextProps = {\n  textAlign?: 'start' | 'end' | 'right';\n  isDisabled?: boolean;\n  isReadonly?: boolean;\n  label: string;\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  value?: string;\n};\nconst createNumberInputText = ({\n  textAlign,\n  isDisabled,\n  isReadonly,\n  label,\n  labelEdge,\n  value = numValue\n}: CreateNumberInputTextProps) => {\n  return (\n    <DemoNumberInputText\n      textAlign={textAlign}\n      label={label}\n      labelEdge={labelEdge}\n      value={value}\n      isDisabled={isDisabled}\n      isReadonly={isReadonly}\n    />\n  );\n};\n\nexport const TextAlign = () => {\n  return (\n    <>\n      <FormContext.Provider value={formContext}>\n        <h4>Enabled</h4>\n        {createNumberInputText({ textAlign: 'start', label: 'start' })}\n        {createNumberInputText({ textAlign: 'end', label: 'end' })}\n        {createNumberInputText({ textAlign: 'right', label: 'right' })}\n\n        <h4>Disabled</h4>\n        {createNumberInputText({ textAlign: 'start', label: 'start', isDisabled: true })}\n        {createNumberInputText({ textAlign: 'end', label: 'end', isDisabled: true })}\n        {createNumberInputText({ textAlign: 'right', label: 'right', isDisabled: true })}\n\n        <h4>Readonly</h4>\n        {createNumberInputText({ textAlign: 'start', label: 'start', isReadonly: true })}\n        {createNumberInputText({ textAlign: 'end', label: 'end', isReadonly: true })}\n        {createNumberInputText({ textAlign: 'right', label: 'right', isReadonly: true })}\n      </FormContext.Provider>\n\n      <h4>Readonly outside form context</h4>\n      {createNumberInputText({ textAlign: 'start', label: 'start', isReadonly: true })}\n      {createNumberInputText({ textAlign: 'end', label: 'end', isReadonly: true })}\n      {createNumberInputText({ textAlign: 'right', label: 'right', isReadonly: true })}\n    </>\n  );\n};\n\nconst EnabledDisabledReadonly = ({\n  labelEdge = 'inside',\n  label,\n  value\n}: {\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  label?: string;\n  value?: string;\n}) => {\n  return (\n    <>\n      {createNumberInputText({ label: label || 'Enabled', labelEdge: labelEdge, value: value })}\n      {createNumberInputText({\n        label: label || 'Disabled',\n        isDisabled: true,\n        labelEdge: labelEdge,\n        value: value\n      })}\n      {createNumberInputText({\n        label: label || 'Readonly',\n        isReadonly: true,\n        labelEdge: labelEdge,\n        value: value\n      })}\n    </>\n  );\n};\n\nconst LabelEdge = ({\n  labelEdge = 'inside',\n  label\n}: {\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  label: string;\n}) => {\n  return (\n    <>\n      <FormContext.Provider value={formContext}>\n        <h4>Inside form context</h4>\n        <EnabledDisabledReadonly label={label} labelEdge={labelEdge} />\n      </FormContext.Provider>\n\n      <h4>Outside form context</h4>\n      <EnabledDisabledReadonly label={label} labelEdge={labelEdge} />\n    </>\n  );\n};\n\nexport const LabelEdgeInside = ({ label }: { label: string }) => <LabelEdge label={label} />;\nexport const LabelEdgeStart = ({ label }: { label: string }) => (\n  <LabelEdge labelEdge=\"start\" label={label} />\n);\nexport const LabelEdgeTop = ({ label }: { label: string }) => (\n  <LabelEdge labelEdge=\"top\" label={label} />\n);\nexport const NoLabel = ({ label }: { label: string }) => (\n  <LabelEdge labelEdge=\"none\" label={label} />\n);\n\nconst LongLabels = ({\n  labelEdge = 'inside',\n  label\n}: {\n  labelEdge?: 'inside' | 'start' | 'top';\n  label: string;\n}) => {\n  return (\n    <>\n      <FormContext.Provider value={formContextWrap}>\n        <h4>Inside form context - wrapped</h4>\n        <EnabledDisabledReadonly label={label} labelEdge={labelEdge} />\n      </FormContext.Provider>\n\n      <FormContext.Provider value={formContextTruncate}>\n        <h4>Inside form context - truncated</h4>\n        <EnabledDisabledReadonly label={label} labelEdge={labelEdge} />\n      </FormContext.Provider>\n\n      <h4>Outside form context</h4>\n      <EnabledDisabledReadonly label={label} labelEdge={labelEdge} />\n    </>\n  );\n};\n\nexport const LongLabelInside = () => <LabelEdgeInside label={longText} />;\nexport const LongLabelStart = () => <LongLabels label={longText} labelEdge=\"start\" />;\nexport const LongLabelTop = () => <LongLabels label={longText} labelEdge=\"top\" />;\n\nexport const LongValue = () => {\n  return (\n    <>\n      <FormContext.Provider value={formContext}>\n        <h4>Inside form context</h4>\n        <EnabledDisabledReadonly value={longValue} />\n      </FormContext.Provider>\n\n      <h4>Outside form context</h4>\n      <EnabledDisabledReadonly value={longValue} />\n    </>\n  );\n};\n\nexport const Prefix = () => {\n  return (\n    <>\n      <h4>States inside form context</h4>\n      {/* TODO: use preact form layout in all these demos instead of FormContext.Provider\n          JET-49915 - Preact NumberInputText: replace FormContext.Provider with FormLayout in demos */}\n      <FormContext.Provider value={formContext}>\n        <DemoNumberInputText label=\"Access code\" value={accessCode} prefix=\"IN\" />\n        <DemoNumberInputText label=\"Access code\" value={accessCode} isDisabled={true} prefix=\"IN\" />\n        <DemoNumberInputText label=\"Access code\" value={accessCode} isReadonly={true} prefix=\"IN\" />\n        <DemoNumberInputText label=\"Access code\" prefix=\"IN\" />\n        <DemoNumberInputText label=\"Access code\" isDisabled={true} prefix=\"IN\" />\n        <DemoNumberInputText label=\"Access code\" isReadonly={true} prefix=\"IN\" />\n      </FormContext.Provider>\n\n      <h4>Placeholder</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoNumberInputText label=\"Access code\" placeholder=\"placeholder text\" prefix=\"IN\" />\n      </FormContext.Provider>\n    </>\n  );\n};\n\nexport const Suffix = () => {\n  return (\n    <>\n      <h4>States inside form context</h4>\n      {/* TODO: use preact form layout in all these demos instead of FormContext.Provider\n          JET-49915 - Preact NumberInputText: replace FormContext.Provider with FormLayout in demos */}\n      <FormContext.Provider value={formContext}>\n        <DemoNumberInputText label=\"Enabled Weight\" value={lbsValue} suffix=\"lbs\" />\n        <DemoNumberInputText\n          label=\"Disabled Weight\"\n          value={lbsValue}\n          isDisabled={true}\n          suffix=\"lbs\"\n        />\n        <DemoNumberInputText\n          label=\"Readonly Weight\"\n          value={lbsValue}\n          isReadonly={true}\n          suffix=\"lbs\"\n        />\n        <DemoNumberInputText label=\"Enabled No Value Weight\" suffix=\"lbs\" />\n        <DemoNumberInputText label=\"Disabled No Value Weight\" isDisabled={true} suffix=\"lbs\" />\n        <DemoNumberInputText label=\"Readonly No Value Weight\" isReadonly={true} suffix=\"lbs\" />\n      </FormContext.Provider>\n\n      <h4>Placeholder</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoNumberInputText label=\"Target Weight\" placeholder=\"placeholder text\" suffix=\"lbs\" />\n      </FormContext.Provider>\n    </>\n  );\n};\n\nexport const MinAndMax = () => {\n  // Note: unary + converts empty string to 0, so use parseInt for this example.\n  const parse = (value: string) => parseInt(value.replace(/[^\\d]+/gi, ''));\n  const min = 10;\n  const max = 100;\n\n  const [displayValue, setDisplayValue] = useState('50');\n  const handleInput = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (displayValue !== detail.value) {\n        setDisplayValue(detail.value ?? '');\n      }\n    },\n    [displayValue]\n  );\n\n  const [committedValue, setCommittedValue] = useState(50);\n  const handleCommit = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      // On commit, filter out any non-numbers and parse the value.\n      // If the result is NaN, clear the display value.\n      const numberValue = parse(detail.value ?? '');\n      const newValue = Number.isNaN(numberValue) ? '' : numberValue.toString();\n      if (displayValue !== newValue) {\n        setDisplayValue(newValue);\n      }\n      if (committedValue !== numberValue) {\n        setCommittedValue(numberValue);\n      }\n    },\n    [displayValue, committedValue]\n  );\n\n  const numberTooHigh: PickedPropsFromNumberInputText['messages'] = [\n    {\n      severity: 'error',\n      detail: 'Enter 100 or a lower number.'\n    }\n  ];\n  const numberTooLow: PickedPropsFromNumberInputText['messages'] = [\n    {\n      severity: 'error',\n      detail: 'Enter 10 or a higher number.'\n    }\n  ];\n  const messages: PickedPropsFromNumberInputText['messages'] =\n    committedValue !== NaN\n      ? committedValue > max\n        ? numberTooHigh\n        : committedValue < min\n        ? numberTooLow\n        : []\n      : [];\n\n  // If the committed value is not a valid number, don't update the aria value attributes.\n  // Note that this applies when there is no value (empty string parses as NaN with parseInt).\n  const valueNow = Number.isNaN(committedValue) ? undefined : committedValue;\n  const valueText = Number.isNaN(committedValue) ? undefined : committedValue.toString();\n\n  return (\n    <>\n      <h4>Min and Max</h4>\n      <NumberInputText\n        ariaValueMax={max}\n        ariaValueMin={min}\n        ariaValueNow={valueNow}\n        ariaValueText={valueText}\n        assistiveText=\"Enter a number between 10 and 100\"\n        label=\"min=10, max=100\"\n        onCommit={handleCommit}\n        onInput={handleInput}\n        messages={messages}\n        value={displayValue}\n      />\n    </>\n  );\n};\n\nexport const StepButtonOverview = () => {\n  return (\n    <>\n      <h4>States inside form context</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoSteppers label=\"Enabled\" />\n        <DemoSteppers isDisabled={true} label=\"Disabled\" />\n        <DemoSteppers isReadonly={true} label=\"Readonly\" />\n      </FormContext.Provider>\n\n      <h4>No Label</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoSteppers labelEdge=\"none\" label=\"No label\" />\n      </FormContext.Provider>\n\n      <h4>Label Edge Top</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoSteppers labelEdge=\"top\" label=\"Top label\" />\n      </FormContext.Provider>\n\n      <h4>Label Edge Start</h4>\n      <FormContext.Provider value={formContext}>\n        <DemoSteppers labelEdge=\"start\" label=\"Start label\" />\n      </FormContext.Provider>\n    </>\n  );\n};\n\nexport const StepButtons = () => {\n  // Note: unary + converts empty string to 0 so use parseInt for this example.\n  const parse = (value: string) => parseInt(value.replace(/[^\\d]+/gi, ''));\n  const min = 10,\n    max = 100,\n    step = 5;\n\n  const [displayValue, setDisplayValue] = useState('10');\n  const handleInput = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      if (displayValue !== detail.value) {\n        setDisplayValue(detail.value ?? '');\n      }\n    },\n    [displayValue]\n  );\n\n  const [committedValue, setCommittedValue] = useState(10);\n  const handleCommit = useCallback(\n    (detail: ValueUpdateDetail<string>) => {\n      // On commit, filter out any non-numbers and parse the value.\n      // If the result is NaN, clear the display value.\n      const numberValue = parse(detail.value ?? '');\n      const newValue = Number.isNaN(numberValue) ? '' : numberValue.toString();\n      if (displayValue !== newValue) {\n        setDisplayValue(newValue);\n      }\n      if (committedValue !== numberValue) {\n        setCommittedValue(numberValue);\n      }\n    },\n    [displayValue, committedValue]\n  );\n\n  const doStep = (currentValue: number, direction: StepDirection) => {\n    if (Number.isNaN(currentValue)) {\n      // currentValue is not a valid number, return min\n      return min;\n    }\n\n    const modulo = currentValue % step;\n    let newValue: number;\n    if (modulo !== 0) {\n      // If currentValue is not a step match, snap it.\n      newValue = direction === 'increase' ? currentValue + (step - modulo) : currentValue - modulo;\n    } else {\n      // If currentValue is already a step match, just increment or decrement it.\n      newValue = direction === 'increase' ? currentValue + step : currentValue - step;\n    }\n    return newValue > max ? max : newValue < min ? min : newValue;\n  };\n\n  // Increment or decrement the current display value and then update the\n  // display and committed values to match.\n  const handleStep = useCallback((event: StepEvent) => {\n    setDisplayValue((current) => {\n      const currentValue = parse(current);\n      const newValue = doStep(currentValue, event.direction);\n      setCommittedValue(newValue);\n      return newValue.toString();\n    });\n  }, []);\n\n  const numberTooHigh: PickedPropsFromNumberInputText['messages'] = [\n    {\n      severity: 'error',\n      detail: 'Enter 100 or a lower number.'\n    }\n  ];\n  const numberTooLow: PickedPropsFromNumberInputText['messages'] = [\n    {\n      severity: 'error',\n      detail: 'Enter 10 or a higher number.'\n    }\n  ];\n  const messages: PickedPropsFromNumberInputText['messages'] =\n    committedValue !== NaN\n      ? committedValue > max\n        ? numberTooHigh\n        : committedValue < min\n        ? numberTooLow\n        : []\n      : [];\n\n  // If the committed value is not a valid number, don't update the aria value attributes.\n  const valueNow = Number.isNaN(committedValue) ? undefined : committedValue;\n  const valueText = Number.isNaN(committedValue) ? undefined : committedValue.toString();\n\n  return (\n    <>\n      <h4>Step Buttons</h4>\n      <NumberInputText\n        ariaValueMax={max}\n        ariaValueMin={min}\n        ariaValueNow={valueNow}\n        ariaValueText={valueText}\n        assistiveText=\"Enter a number between 10 and 100\"\n        hasSteppers={true}\n        isStepDownDisabled={committedValue <= min}\n        isStepUpDisabled={committedValue >= max}\n        label=\"min=10, max=100, step=5\"\n        messages={messages}\n        onCommit={handleCommit}\n        onInput={handleInput}\n        onSpin={handleStep}\n        onStep={handleStep}\n        value={displayValue}\n      />\n    </>\n  );\n};\n","import { cleanup, fireEvent, render, waitFor } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport userEvent from '@testing-library/user-event';\nimport { NumberInputText } from '../NumberInputText';\nimport { StepButtons as DemoStepButtons } from '../__dev__/NumberInputText.stories';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\n\nasync function getEnvironmentContext() {\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n  const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n  return {\n    translations: { '@oracle/oraclejet-preact': translations }\n  } as Partial<RootEnvironment>;\n}\n\nconst noOp = () => {};\n\ndescribe('Test NumberInputText', () => {\n  it('Renders', function () {\n    const { container } = render(<NumberInputText label=\"mylabel\" onInput={noOp} />);\n    const inputElement = container.querySelector('input');\n    expect(inputElement).not.to.be.null;\n  });\n\n  it('Does not have spinbutton role if no steppers are shown', function () {\n    const { container } = render(<NumberInputText label=\"mylabel\" onInput={noOp} />);\n    const match = container.querySelector('[role=spinbutton]');\n    expect(match).to.be.null;\n  });\n\n  afterEach(cleanup);\n});\n\ndescribe('Test NumberInputText aria-value attributes', () => {\n  it('Adds aria-valuemin and aria-valuemax when enabled', function () {\n    const { container } = render(\n      <NumberInputText ariaValueMin={0} ariaValueMax={100} label=\"min=0, max=100\" onInput={noOp} />\n    );\n    const inputElement = container.querySelector('input');\n    const ariaValueMin = inputElement?.getAttribute('aria-valuemin');\n    const ariaValueMax = inputElement?.getAttribute('aria-valuemax');\n    expect(ariaValueMin).to.equal('0');\n    expect(ariaValueMax).to.equal('100');\n  });\n\n  it('Adds aria-valuemin and aria-valuemax when disabled', function () {\n    const { container } = render(\n      <NumberInputText\n        ariaValueMin={0}\n        ariaValueMax={100}\n        isDisabled={true}\n        label=\"min=0, max=100\"\n        onInput={noOp}\n      />\n    );\n    const inputElement = container.querySelector('input');\n    const ariaValueMin = inputElement?.getAttribute('aria-valuemin');\n    const ariaValueMax = inputElement?.getAttribute('aria-valuemax');\n    expect(ariaValueMin).to.equal('0');\n    expect(ariaValueMax).to.equal('100');\n  });\n\n  it('Does not add aria-valuemin and aria-valuemax when readonly', function () {\n    const numberVal = '25';\n    const { getByText } = render(\n      <NumberInputText\n        ariaValueMin={0}\n        ariaValueMax={100}\n        isReadonly={true}\n        label=\"min=0, max=100\"\n        onInput={noOp}\n        value={numberVal}\n      />\n    );\n    // When readonly, only a div is shown which should not have aria value attributes set.\n    const inputDiv = getByText(numberVal);\n    const ariaValueMin = inputDiv.getAttribute('aria-valuemin');\n    const ariaValueMax = inputDiv.getAttribute('aria-valuemax');\n    expect(ariaValueMin).to.be.null;\n    expect(ariaValueMax).to.be.null;\n  });\n\n  it('Adds aria-valuenow and aria-valuetext when enabled', function () {\n    const currencyString = '$500';\n    const { container } = render(\n      <NumberInputText\n        ariaValueNow={500}\n        ariaValueText={currencyString}\n        label=\"min=0, max=1000\"\n        onInput={noOp}\n        value={currencyString}\n      />\n    );\n    const inputElement = container.querySelector('input');\n    const ariaValueNow = inputElement?.getAttribute('aria-valuenow');\n    const ariaValueText = inputElement?.getAttribute('aria-valuetext');\n    expect(ariaValueNow).to.equal('500');\n    expect(ariaValueText).to.equal(currencyString);\n  });\n\n  it('Adds aria-valuenow and aria-valuetext when disabled', function () {\n    const currencyString = '$500';\n    const { container } = render(\n      <NumberInputText\n        ariaValueNow={500}\n        ariaValueText={currencyString}\n        isDisabled={true}\n        label=\"min=0, max=1000\"\n        onInput={noOp}\n        value={currencyString}\n      />\n    );\n    const inputElement = container.querySelector('input');\n    const ariaValueNow = inputElement?.getAttribute('aria-valuenow');\n    const ariaValueText = inputElement?.getAttribute('aria-valuetext');\n    expect(ariaValueNow).to.equal('500');\n    expect(ariaValueText).to.equal(currencyString);\n  });\n\n  it('Does not add aria-valuenow and aria-valuetext when readonly', function () {\n    const currencyString = '$500';\n    const { getByText } = render(\n      <NumberInputText\n        ariaValueNow={500}\n        ariaValueText={currencyString}\n        isReadonly={true}\n        label=\"min=0, max=1000\"\n        onInput={noOp}\n        value={currencyString}\n      />\n    );\n    // When readonly, only a div is shown which should not have aria value attributes set.\n    const inputDiv = getByText(currencyString);\n    const ariaValueNow = inputDiv.getAttribute('aria-valuenow');\n    const ariaValueText = inputDiv.getAttribute('aria-valuetext');\n    expect(ariaValueNow).to.be.null;\n    expect(ariaValueText).to.be.null;\n  });\n\n  it('Does not add aria-valuetext when it is the same as aria-valuenow', function () {\n    const numberVal = '500';\n    const { container } = render(\n      <NumberInputText\n        ariaValueNow={500}\n        ariaValueText={numberVal}\n        label=\"min=0, max=1000\"\n        onInput={noOp}\n        value={numberVal}\n      />\n    );\n    const inputElement = container.querySelector('input');\n    const ariaValueNow = inputElement?.getAttribute('aria-valuenow');\n    const ariaValueText = inputElement?.getAttribute('aria-valuetext');\n    expect(ariaValueNow).to.equal(numberVal);\n    expect(ariaValueText).to.be.null;\n  });\n\n  afterEach(cleanup);\n});\n\ndescribe('Test NumberInputText steppers', () => {\n  let env: Partial<RootEnvironment>;\n  beforeEach(async function () {\n    env = env ?? (await getEnvironmentContext());\n  });\n  afterEach(cleanup);\n\n  const getStepUpButton = (container: Element) =>\n    container?.querySelector('button[title=\"Increase\"]');\n  const getStepDownButton = (container: Element) =>\n    container?.querySelector('button[title=\"Decrease\"]');\n\n  it('If hasSteppers=true and control is enabled, steppers are present and role is spinbutton', function () {\n    const { container, getByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <NumberInputText hasSteppers={true} label=\"mylabel\" onInput={noOp} />\n      </RootEnvironmentProvider>\n    );\n    const roleElement = getByRole('spinbutton');\n    expect(roleElement).not.to.be.null;\n    expect(roleElement?.tagName.toUpperCase()).to.equal('INPUT');\n    const upButton = getStepUpButton(container);\n    const downButton = getStepDownButton(container);\n    expect(upButton).not.to.be.null;\n    expect(downButton).not.to.be.null;\n  });\n\n  it('If hasSteppers=true and control is disabled, steppers are present and role is spinbutton', function () {\n    const { container, getByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <NumberInputText hasSteppers={true} isDisabled={true} label=\"mylabel\" onInput={noOp} />\n      </RootEnvironmentProvider>\n    );\n    const roleElement = getByRole('spinbutton');\n    expect(roleElement).not.to.be.null;\n    expect(roleElement?.tagName.toUpperCase()).to.equal('INPUT');\n    // If isDisabled is true, steppers are still present.\n    const upButton = getStepUpButton(container);\n    const downButton = getStepDownButton(container);\n    expect(upButton).not.to.be.null;\n    expect(downButton).not.to.be.null;\n  });\n\n  it('If hasSteppers=true and control is readonly, no steppers or spinbutton role', function () {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <NumberInputText hasSteppers={true} isReadonly={true} label=\"mylabel\" onInput={noOp} />\n      </RootEnvironmentProvider>\n    );\n    const match = container.querySelector('[role=spinbutton]');\n    expect(match).to.be.null;\n    const upButton = getStepUpButton(container);\n    const downButton = getStepDownButton(container);\n    expect(upButton).to.be.null;\n    expect(downButton).to.be.null;\n  });\n\n  it('Step buttons are shown with correct tabindex and title', function () {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <NumberInputText hasSteppers={true} label=\"mylabel\" onInput={noOp} />\n      </RootEnvironmentProvider>\n    );\n    const upButton = getStepUpButton(container);\n    const downButton = getStepDownButton(container);\n    expect(upButton?.getAttribute('tabindex')).to.equal('-1');\n    expect(downButton?.getAttribute('tabindex')).to.equal('-1');\n    expect(upButton?.getAttribute('title')).to.equal('Increase');\n    expect(downButton?.getAttribute('title')).to.equal('Decrease');\n  });\n\n  it('Step buttons can be disabled', function () {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <NumberInputText\n          hasSteppers={true}\n          isStepDownDisabled={true}\n          isStepUpDisabled={true}\n          label=\"mylabel\"\n          onInput={noOp}\n        />\n      </RootEnvironmentProvider>\n    );\n    const upButton = getStepUpButton(container);\n    const downButton = getStepDownButton(container);\n    expect(upButton).not.to.be.null;\n    expect(downButton).not.to.be.null;\n    const upDisabled = upButton?.getAttribute('disabled');\n    const downDisabled = downButton?.getAttribute('disabled');\n    expect(upDisabled).not.to.be.null;\n    expect(downDisabled).not.to.be.null;\n  });\n\n  it('If number input is disabled, the steppers are disabled', function () {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <NumberInputText hasSteppers={true} isDisabled={true} label=\"mylabel\" onInput={noOp} />\n      </RootEnvironmentProvider>\n    );\n    const upButton = getStepUpButton(container);\n    const downButton = getStepDownButton(container);\n    expect(upButton).not.to.be.null;\n    expect(downButton).not.to.be.null;\n    const upDisabled = upButton?.getAttribute('disabled');\n    const downDisabled = downButton?.getAttribute('disabled');\n    expect(upDisabled).not.to.be.null;\n    expect(downDisabled).not.to.be.null;\n  });\n});\n\ndescribe('Test NumberInputText stepping functionality', () => {\n  let env: Partial<RootEnvironment>;\n  beforeEach(async function () {\n    env = env ?? (await getEnvironmentContext());\n  });\n  afterEach(cleanup);\n\n  const getStepUpButton = (container: Element) =>\n    container?.querySelector('button[title=\"Increase\"]');\n  const getStepDownButton = (container: Element) =>\n    container?.querySelector('button[title=\"Decrease\"]');\n\n  it('Can step up/down by clicking on steppers', function () {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <DemoStepButtons />\n      </RootEnvironmentProvider>\n    );\n\n    // Initial value of DemoStepButtons is 10, min=10, max=100, step=5.\n    const upButton = getStepUpButton(container)!;\n    const downButton = getStepDownButton(container)!;\n    const inputElement = container.querySelector('input')!;\n\n    // Click step up 3 times to increment value to 25.\n    fireEvent.click(upButton);\n    fireEvent.click(upButton);\n    fireEvent.click(upButton);\n    expect(inputElement.value).to.equal('25');\n\n    // Click step down once to decrement value to 20.\n    fireEvent.click(downButton);\n    expect(inputElement.value).to.equal('20');\n  });\n\n  it('Can step up/down by pressing the arrow keys', async function () {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <DemoStepButtons />\n      </RootEnvironmentProvider>\n    );\n\n    // Initial value of DemoStepButtons is 10, min=10, max=100, step=5.\n    const inputElement = container.querySelector('input')!;\n    expect(inputElement).not.to.be.null;\n\n    // Press and release ArrowUp should step up.\n    inputElement.focus();\n    userEvent.keyboard('[ARROWUP]');\n    await waitFor(() => expect(inputElement.value).equals('15'));\n\n    // Press and release ArrowDown should step down.\n    userEvent.keyboard('[ARROWDOWN]');\n    await waitFor(() => expect(inputElement.value).equals('10'));\n  });\n\n  it('Clicking step down or pressing arrow down does nothing when disabled', async function () {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <DemoStepButtons />\n      </RootEnvironmentProvider>\n    );\n\n    // Initial value of DemoStepButtons is 10, min=10, max=100, step=5.\n    // DemoStepButtons disables step down when value reaches min, which\n    // means it's initially disabled.\n    const inputElement = container.querySelector('input')!;\n    const downButton = getStepDownButton(container)!;\n    expect(inputElement).not.to.be.null;\n    expect(downButton).not.to.be.null;\n    const initialValue = '10';\n\n    // Clicking disabled down button should do nothing.\n    fireEvent.click(downButton);\n    expect(inputElement.value).to.equal(initialValue);\n\n    // Arrow key down should also do nothing.\n    inputElement.focus();\n    userEvent.keyboard('[ARROWDOWN]');\n    await waitFor(() => expect(inputElement.value).equals(initialValue));\n  });\n\n  it('Clicking step up or pressing arrow up does nothing when disabled', async function () {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <>\n          <DemoStepButtons />\n          <button class=\"testclickmebutton\">Click me</button>\n        </>\n      </RootEnvironmentProvider>\n    );\n\n    // Initial value of DemoStepButtons is 10, min=10, max=100, step=5.\n    // DemoStepButtons disables step up when the value reaches max.\n    const inputElement = container.querySelector('input')!;\n    const upButton = getStepUpButton(container)!;\n    const testButton = container.querySelector('.testclickmebutton') as HTMLButtonElement;\n    expect(inputElement).not.to.be.null;\n    expect(upButton).not.to.be.null;\n    expect(testButton).not.to.be.null;\n\n    // Calling inputElement.blur did not commit the value, so set\n    // inputElement.value to 100 (max) and move the focus to commit it.\n    const maxValue = '100';\n    inputElement.focus();\n    inputElement.value = maxValue;\n    testButton.focus();\n    expect(inputElement.value).to.equal(maxValue);\n\n    // Clicking the disabled up button should do nothing.\n    fireEvent.click(upButton);\n    expect(inputElement.value).to.equal(maxValue);\n\n    // Arrow up key should also do nothing.\n    inputElement.focus();\n    userEvent.keyboard('[ARROWUP]');\n    await waitFor(() => expect(inputElement.value).equals(maxValue));\n  });\n});\n\ndescribe('Test NumberInputText spinning functionality', () => {\n  let env: Partial<RootEnvironment>;\n  beforeEach(async function () {\n    env = env ?? (await getEnvironmentContext());\n  });\n  afterEach(cleanup);\n\n  it('Can spin by holding down the arrow keys', async function () {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <DemoStepButtons />\n      </RootEnvironmentProvider>\n    );\n\n    // Initial value of DemoStepButtons is 10, min=10, max=100, step=5.\n    const inputElement = container.querySelector('input')!;\n    expect(inputElement).not.to.be.null;\n\n    // Holding down the arrow key triggers continuous step events.\n    // See https://testing-library.com/docs/user-event/keyboard/\n    inputElement.focus();\n    // Hold the arrow key down, trigger 10 keydown events, then send key up.\n    userEvent.keyboard('[ARROWUP>10/]');\n    await waitFor(() => expect(inputElement.value).equals('60'));\n\n    userEvent.keyboard('[ARROWDOWN>4/]');\n    await waitFor(() => expect(inputElement.value).equals('40'));\n  });\n});\n"],"names":["NumberInputText","DemoNumberInputText","assistiveText","helpSourceLink","helpSourceText","isDisabled","isReadonly","isRequired","label","labelEdge","messages","placeholder","prefix","suffix","textAlign","userAssistanceDensity","value","variant","displayValue","setDisplayValue","useState","handleInput","useCallback","detail","_a","valueCommitted","setValueCommitted","handleCommit","valueNow","undefined","_jsx","ariaValueNow","ariaValueText","isRequiredShown","onCommit","onInput","EmbeddedStyles","args","jsx","Object","assign","style","backgroundColor","border","boxSizing","color","height","minWidth","width","parameters","controls","include","keys","StepButtons","parse","parseInt","replace","min","max","committedValue","setCommittedValue","numberValue","newValue","Number","isNaN","toString","handleStep","event","current","currentValue","direction","modulo","doStep","NaN","severity","valueText","_jsxs","_Fragment","children","ariaValueMax","ariaValueMin","hasSteppers","isStepDownDisabled","isStepUpDisabled","onSpin","onStep","async","getEnvironmentContext","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","noOp","describe","it","container","render","inputElement","querySelector","expect","not","to","be","null","match","afterEach","cleanup","getAttribute","equal","getByText","inputDiv","currencyString","numberVal","env","beforeEach","getStepUpButton","getStepDownButton","getByRole","RootEnvironmentProvider","environment","roleElement","tagName","toUpperCase","upButton","downButton","upDisabled","downDisabled","DemoStepButtons","fireEvent","click","focus","userEvent","keyboard","waitFor","equals","class","testButton","maxValue"],"mappings":"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"}