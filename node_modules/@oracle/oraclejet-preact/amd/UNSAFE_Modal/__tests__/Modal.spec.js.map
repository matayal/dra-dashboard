{"version":3,"file":"Modal.spec.js","sources":["../../../../src/UNSAFE_Modal/__tests__/Modal.spec.tsx"],"sourcesContent":["/**\n * General FocusTrap tests\n */\nimport { Fragment, Ref } from 'preact';\nimport { useRef } from 'preact/hooks';\nimport { render, waitFor } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { LayerManager } from '../../UNSAFE_Layer';\nimport Modal from '../Modal';\n\nconst TestDialog = ({ submitButtonRef }: { submitButtonRef?: Ref<HTMLButtonElement> }) => (\n  <Fragment>\n    <input id=\"inside_input\" />\n    <button id=\"inside_cancel\">Cancel</button>\n    <button id=\"inside_submit\" ref={submitButtonRef}>\n      Submit\n    </button>\n  </Fragment>\n);\n\nconst TestComponent = ({\n  autoFocusTest = false,\n  isOpen = true,\n  restoreFocusTest = false\n}: {\n  autoFocusTest?: boolean;\n  isOpen?: boolean;\n  restoreFocusTest?: boolean;\n}) => {\n  const submitButtonRef = useRef<HTMLButtonElement>(null);\n  const followButtonRef = useRef<HTMLButtonElement>(null);\n\n  let maybeAutoFocusRef = undefined;\n  if (autoFocusTest) maybeAutoFocusRef = submitButtonRef;\n\n  let maybeRestoreFocusRef = undefined;\n  if (restoreFocusTest) maybeRestoreFocusRef = followButtonRef;\n\n  return (\n    <LayerManager>\n      <button>Preceding Button</button>\n      <Modal\n        autoFocusRef={maybeAutoFocusRef}\n        isOpen={isOpen}\n        restoreFocusRef={maybeRestoreFocusRef}>\n        <TestDialog submitButtonRef={submitButtonRef} />\n      </Modal>\n      <button ref={followButtonRef}>Following Button</button>\n    </LayerManager>\n  );\n};\n\ndescribe('Test Modal component', () => {\n  beforeEach(() => {\n    // need this as focus trap expects it to be set, it is used to determine if the tab stop is visible\n    Object.defineProperty(HTMLElement.prototype, 'offsetParent', {\n      get() {\n        return this.parentNode;\n      }\n    });\n  });\n  it('renders and sets default focus on first tabbable item', async () => {\n    const { getByRole } = render(<TestComponent />);\n    const insideInput = getByRole('textbox');\n    await waitFor(() => {\n      expect(document.activeElement).equals(insideInput);\n    });\n  });\n\n  it('renders and sets initial focus to specified element', async () => {\n    const { getByText } = render(<TestComponent autoFocusTest={true} />);\n    const autofocusButton = getByText('Submit');\n    await waitFor(() => {\n      expect(document.activeElement).equals(autofocusButton);\n    });\n  });\n\n  it('unmounts and resets focus to original element', async () => {\n    const { getByRole, getByText, rerender } = render(<TestComponent isOpen={false} />);\n    const precedingButton = getByText('Preceding Button');\n    // set original focus to button outside focus trap\n    precedingButton.focus();\n    expect(document.activeElement).equals(precedingButton);\n    rerender(<TestComponent isOpen={true} />);\n    const insideInput = getByRole('textbox');\n    expect(document.activeElement).equals(insideInput);\n    rerender(<TestComponent isOpen={false} />);\n    await waitFor(() => {\n      expect(document.activeElement).equals(precedingButton);\n    });\n  });\n\n  it('unmounts and resets focus to specified element', async () => {\n    const { getByRole, getByText, rerender } = render(<TestComponent isOpen={false} />);\n    const precedingButton = getByText('Preceding Button');\n    const followingButton = getByText('Following Button');\n    // set original focus to button outside focus trap\n    precedingButton.focus();\n    expect(document.activeElement).equals(precedingButton);\n    rerender(<TestComponent isOpen={true} restoreFocusTest={true} />);\n    const insideInput = getByRole('textbox');\n    expect(document.activeElement).equals(insideInput);\n    rerender(<TestComponent isOpen={false} />);\n    await waitFor(() => {\n      expect(document.activeElement).equals(followingButton);\n    });\n  });\n});\n"],"names":["TestDialog","submitButtonRef","_jsxs","Fragment","children","_jsx","id","jsx","Object","assign","ref","TestComponent","autoFocusTest","isOpen","restoreFocusTest","useRef","followButtonRef","maybeAutoFocusRef","maybeRestoreFocusRef","jsxs","LayerManager","Modal","autoFocusRef","restoreFocusRef","describe","beforeEach","defineProperty","HTMLElement","prototype","get","this","parentNode","it","async","getByRole","render","insideInput","waitFor","expect","document","activeElement","equals","getByText","autofocusButton","rerender","precedingButton","focus","followingButton"],"mappings":"idAUA,MAAMA,EAAa,EAAGC,gBAAAA,KACpBC,EAAAA,KAACC,EAAAA,SAAQ,CAAAC,SAAA,CACPC,MAAO,QAAA,CAAAC,GAAG,iBACVD,EAAAE,IAAA,SAAAC,OAAAC,OAAA,CAAQH,GAAG,iBAA+B,CAAAF,SAAA,YAC1CC,8BAAQC,GAAG,gBAAgBI,IAAKT,GAEvB,CAAAG,SAAA,eAIPO,EAAgB,EACpBC,cAAAA,GAAgB,EAChBC,OAAAA,GAAS,EACTC,iBAAAA,GAAmB,MAMnB,MAAMb,EAAkBc,SAA0B,MAC5CC,EAAkBD,SAA0B,MAElD,IAAIE,EAGAC,EAGJ,OALIN,IAAeK,EAAoBhB,GAGnCa,IAAkBI,EAAuBF,GAG3Cd,EAACiB,KAAAC,EAAYA,aACX,CAAAhB,SAAA,CAAAC,EAAAA,IAAA,SAAA,CAAAD,SAAA,qBACAC,EAAAA,IAACgB,EAAKA,MACJb,OAAAC,OAAA,CAAAa,aAAcL,EACdJ,OAAQA,EACRU,gBAAiBL,aACjBb,EAAAA,IAACL,EAAW,CAAAC,gBAAiBA,OAE/BI,EAAAA,4BAAQK,IAAKM,GAA0C,CAAAZ,SAAA,0BAK7DoB,SAAS,uBAAwB,KAC/BC,WAAW,KAETjB,OAAOkB,eAAeC,YAAYC,UAAW,eAAgB,CAC3DC,MACE,OAAOC,KAAKC,gBAIlBC,GAAG,wDAAyDC,UAC1D,MAAMC,UAAEA,GAAcC,EAAMA,OAAC9B,EAACE,IAAAI,EAAgB,KACxCyB,EAAcF,EAAU,iBACxBG,EAAOA,QAAC,KACZC,EAAAA,OAAOC,SAASC,eAAeC,OAAOL,OAI1CJ,GAAG,sDAAuDC,UACxD,MAAMS,UAAEA,GAAcP,EAAAA,OAAO9B,EAAAE,IAACI,EAAa,CAACC,eAAe,KACrD+B,EAAkBD,EAAU,gBAC5BL,EAAOA,QAAC,KACZC,EAAAA,OAAOC,SAASC,eAAeC,OAAOE,OAI1CX,GAAG,gDAAiDC,UAClD,MAAMC,UAAEA,EAASQ,UAAEA,EAASE,SAAEA,GAAaT,EAAMA,OAAC9B,MAACM,EAAc,CAAAE,QAAQ,KACnEgC,EAAkBH,EAAU,oBAElCG,EAAgBC,QAChBR,EAAAA,OAAOC,SAASC,eAAeC,OAAOI,GACtCD,EAASvC,MAACM,EAAa,CAACE,QAAQ,KAChC,MAAMuB,EAAcF,EAAU,WAC9BI,EAAAA,OAAOC,SAASC,eAAeC,OAAOL,GACtCQ,EAASvC,MAACM,EAAa,CAACE,QAAQ,WAC1BwB,EAAOA,QAAC,KACZC,EAAAA,OAAOC,SAASC,eAAeC,OAAOI,OAI1Cb,GAAG,iDAAkDC,UACnD,MAAMC,UAAEA,EAASQ,UAAEA,EAASE,SAAEA,GAAaT,EAAMA,OAAC9B,MAACM,EAAc,CAAAE,QAAQ,KACnEgC,EAAkBH,EAAU,oBAC5BK,EAAkBL,EAAU,oBAElCG,EAAgBC,QAChBR,EAAAA,OAAOC,SAASC,eAAeC,OAAOI,GACtCD,EAASvC,EAAAA,IAACM,EAAa,CAACE,QAAQ,EAAMC,kBAAkB,KACxD,MAAMsB,EAAcF,EAAU,WAC9BI,EAAAA,OAAOC,SAASC,eAAeC,OAAOL,GACtCQ,EAASvC,MAACM,EAAa,CAACE,QAAQ,WAC1BwB,EAAOA,QAAC,KACZC,EAAAA,OAAOC,SAASC,eAAeC,OAAOM"}