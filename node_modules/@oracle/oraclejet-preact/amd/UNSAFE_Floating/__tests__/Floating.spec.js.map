{"version":3,"file":"Floating.spec.js","sources":["../../../../src/UNSAFE_Floating/__tests__/Floating.spec.tsx"],"sourcesContent":["import { render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { Floating } from '../Floating';\nimport { useRef } from 'preact/hooks';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\n\nfunction TestComponent() {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  return (\n    <RootEnvironmentProvider>\n      <button ref={buttonRef}>Anchor</button>\n      <Floating\n        anchorRef={buttonRef}\n        placement=\"bottom\"\n        offsetValue={{ mainAxis: 0, crossAxis: 0 }}>\n        <div\n          style={{\n            border: '2px solid',\n            backgroundColor: 'white',\n            width: '100px',\n            textAlign: 'center',\n            padding: '10px'\n          }}>\n          <p>Hello World!</p>\n        </div>\n      </Floating>\n    </RootEnvironmentProvider>\n  );\n}\n\ndescribe('Test Floating component', () => {\n  beforeEach(() => {\n    if (!window.ResizeObserver) {\n      // ResizeObserver isn't available in test environment\n      const MockResizeObserver = jest.fn();\n      MockResizeObserver.mockReturnValue({\n        observe: () => null,\n        unobserve: () => null,\n        disconnect: () => null\n      });\n\n      Object.defineProperty(global, 'ResizeObserver', {\n        writable: true,\n        configurable: true,\n        value: MockResizeObserver\n      });\n    }\n  });\n\n  it('render', async function () {\n    const content = render(<TestComponent />);\n    const initials = await content.getAllByText('Hello World!');\n    expect(initials).not.null;\n  });\n});\n"],"names":["TestComponent","buttonRef","useRef","_jsxs","RootEnvironmentProvider","children","_jsx","ref","Floating","Object","assign","anchorRef","placement","offsetValue","mainAxis","crossAxis","jsx","style","border","backgroundColor","width","textAlign","padding","describe","beforeEach","window","ResizeObserver","MockResizeObserver","jest","fn","mockReturnValue","observe","unobserve","disconnect","defineProperty","global","writable","configurable","value","it","async","content","render","initials","getAllByText","expect","not","null"],"mappings":"kaAMA,SAASA,IACP,MAAMC,EAAYC,SAA0B,MAC5C,OACEC,EAAAA,KAACC,EAAAA,wBAAuB,CAAAC,SAAA,CACtBC,8BAAQC,IAAKN,GAAS,CAAAI,SAAA,YACtBC,EAAAA,IAACE,EAAAA,SACCC,OAAAC,OAAA,CAAAC,UAAWV,EACXW,UAAU,SACVC,YAAa,CAAEC,SAAU,EAAGC,UAAW,IACvC,CAAAV,SAAAC,EAAAU,IAAA,MAAAP,OAAAC,OAAA,CACEO,MAAO,CACLC,OAAQ,YACRC,gBAAiB,QACjBC,MAAO,QACPC,UAAW,SACXC,QAAS,SACV,CAAAjB,SACDC,MAAmB,IAAA,CAAAD,SAAA,0BAO7BkB,SAAS,0BAA2B,KAClCC,WAAW,KACT,IAAKC,OAAOC,eAAgB,CAE1B,MAAMC,EAAqBC,KAAKC,KAChCF,EAAmBG,gBAAgB,CACjCC,QAAS,IAAM,KACfC,UAAW,IAAM,KACjBC,WAAY,IAAM,OAGpBxB,OAAOyB,eAAeC,OAAQ,iBAAkB,CAC9CC,UAAU,EACVC,cAAc,EACdC,MAAOX,OAKbY,GAAG,SAAUC,iBACX,MAAMC,EAAUC,EAAAA,OAAOpC,EAAAA,IAACN,EAAa,KAC/B2C,QAAiBF,EAAQG,aAAa,gBAC5CC,EAAAA,OAAOF,GAAUG,IAAIC"}