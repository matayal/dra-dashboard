{"version":3,"file":"ListView.spec.js","sources":["../../../../src/UNSAFE_ListView/__tests__/ListView.spec.tsx"],"sourcesContent":["/**\n * General ListView tests\n */\nimport { useRef, useState } from 'preact/hooks';\n\nimport { DataState, ListItemContext, Range } from '../../UNSAFE_Collection';\nimport { Flex } from '../../UNSAFE_Flex';\nimport { Keys } from '../../utils/UNSAFE_keys';\nimport { ListView } from '..';\n\nimport { setupIntersectionObserverMock } from '../../../test/mocks/mockIntersectionObserver';\nimport * as ListTests from '../../PRIVATE_List/__tests__/shared/listViewTests';\nimport { testSelection } from '../../PRIVATE_List/__tests__/shared/listViewSelectionTests';\n\ntype Employee<K> = {\n  id: K;\n  name: string;\n};\n\ntype Props<K, D> = ListTests.Props<K, D>;\n\nfunction TestComponent<K extends string | number>({\n  currentItemVariant,\n  data,\n  initialKey,\n  gridlines,\n  onItemAction,\n  selectedKeys,\n  selectionMode,\n  onClick\n}: Props<K, Employee<K>>) {\n  const rootRef = useRef(null);\n  const [currentKey, setCurrentKey] = useState<K | undefined>(initialKey);\n  const [selection, setSelection] = useState<Keys<K> | undefined>(selectedKeys);\n  const [dataState, setDataState] = useState<DataState<K, Employee<K>>>({\n    offset: 0,\n    data: data.slice(0, 25),\n    totalSize: data.length,\n    sizePrecision: 'exact'\n  });\n\n  const loadRange = (range: Range) => {\n    const startIndex = range.offset;\n    const endIndex = startIndex + range.count;\n    const newDataState = {\n      ...dataState,\n      offset: startIndex,\n      data: data.slice(startIndex, endIndex)\n    };\n    setDataState(newDataState);\n  };\n\n  const getConfig = () => {\n    return {\n      scroller: () => {\n        return rootRef.current;\n      }\n    };\n  };\n\n  return (\n    <div\n      style=\"height: calc(10 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x));overflow: auto\"\n      ref={rootRef}\n      onClick={() => {\n        onClick && onClick();\n      }}>\n      <ListView\n        accessibleSummary=\"Basic list\"\n        data={dataState}\n        currentKey={currentKey}\n        selectedKeys={selection}\n        selectionMode={selectionMode}\n        viewportConfig={getConfig()}\n        onCurrentKeyChange={(detail) => setCurrentKey(detail.value)}\n        onSelectionChange={(detail) => setSelection(detail.value)}\n        onLoadRange={loadRange}\n        gridlines={gridlines}\n        onItemAction={onItemAction}\n        currentItemVariant={currentItemVariant}>\n        {(context: ListItemContext<K, Employee<K>>) => (\n          <Flex>\n            {context.selector && context.selector()}\n            <div\n              className=\"item\"\n              style={{\n                height: 'calc(var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-5x))',\n                padding: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x)'\n              }}>\n              {context.data.name}\n            </div>\n          </Flex>\n        )}\n      </ListView>\n    </div>\n  );\n}\n\ndescribe('Test ListView component', () => {\n  beforeEach(() => {\n    if (!window.IntersectionObserver) {\n      setupIntersectionObserverMock();\n    }\n  });\n\n  // bind shared tests\n  ListTests.testRender.bind(this)(TestComponent);\n  ListTests.testAria.bind(this)(TestComponent);\n  ListTests.testKeys.bind(this)(TestComponent);\n  ListTests.testGridlines.bind(this)(TestComponent);\n  ListTests.testItemAction.bind(this)(TestComponent);\n\n  // selection tests\n  testSelection.bind(this)(TestComponent);\n});\n"],"names":["TestComponent","currentItemVariant","data","initialKey","gridlines","onItemAction","selectedKeys","selectionMode","onClick","rootRef","useRef","currentKey","setCurrentKey","useState","selection","setSelection","dataState","setDataState","offset","slice","totalSize","length","sizePrecision","_jsx","Object","assign","style","ref","children","ListView","accessibleSummary","viewportConfig","scroller","current","onCurrentKeyChange","detail","value","onSelectionChange","onLoadRange","range","startIndex","endIndex","count","newDataState","context","_jsxs","Flex","selector","jsx","className","height","padding","name","describe","beforeEach","window","IntersectionObserver","setupIntersectionObserverMock","ListTests.testRender","bind","this","ListTests.testAria","ListTests.testKeys","ListTests.testGridlines","ListTests.testItemAction","testSelection"],"mappings":"k/EAqBA,SAASA,IAAyCC,mBAChDA,EAAkBC,KAClBA,EAAIC,WACJA,EAAUC,UACVA,EAASC,aACTA,EAAYC,aACZA,EAAYC,cACZA,EAAaC,QACbA,IAEA,MAAMC,EAAUC,SAAO,OAChBC,EAAYC,GAAiBC,EAAQA,SAAgBV,IACrDW,EAAWC,GAAgBF,EAAQA,SAAsBP,IACzDU,EAAWC,GAAgBJ,WAAoC,CACpEK,OAAQ,EACRhB,KAAMA,EAAKiB,MAAM,EAAG,IACpBC,UAAWlB,EAAKmB,OAChBC,cAAe,UAsBjB,OACEC,MAAA,MAAAC,OAAAC,OAAA,CACEC,MAAM,mFACNC,IAAKlB,EACLD,QAAS,KACPA,GAAWA,MACZ,CAAAoB,SACDL,MAACM,EAAQA,SAAAL,OAAAC,OAAA,CACPK,kBAAkB,aAClB5B,KAAMc,EACNL,WAAYA,EACZL,aAAcQ,EACdP,cAAeA,EACfwB,eApBG,CACLC,SAAU,IACDvB,EAAQwB,SAmBfC,mBAAqBC,GAAWvB,EAAcuB,EAAOC,OACrDC,kBAAoBF,GAAWpB,EAAaoB,EAAOC,OACnDE,YAnCaC,IACjB,MAAMC,EAAaD,EAAMrB,OACnBuB,EAAWD,EAAaD,EAAMG,MAC9BC,EACDnB,OAAAC,OAAAD,OAAAC,OAAA,GAAAT,IACHE,OAAQsB,EACRtC,KAAMA,EAAKiB,MAAMqB,EAAYC,KAE/BxB,EAAa0B,IA4BTvC,UAAWA,EACXC,aAAcA,EACdJ,mBAAoBA,GAAkB,CAAA2B,SACpCgB,GACAC,OAACC,OAAI,CAAAlB,SAAA,CACFgB,EAAQG,UAAYH,EAAQG,WAC7BxB,EAAAyB,IAAA,MAAAxB,OAAAC,OAAA,CACEwB,UAAU,OACVvB,MAAO,CACLwB,OAAQ,uDACRC,QAAS,mDAEV,CAAAvB,SAAAgB,EAAQ1C,KAAKkD,iBAS5BC,SAAS,0BAA2B,KAClCC,WAAW,KACJC,OAAOC,sBACVC,EAAAA,kCAKJC,EAAAA,WAAqBC,UAAKC,EAA1BF,CAAgC1D,IAChC6D,EAAAA,SAAmBF,UAAKC,EAAxBC,CAA8B7D,IAC9B8D,EAAAA,SAAmBH,UAAKC,EAAxBE,CAA8B9D,IAC9B+D,EAAAA,cAAwBJ,UAAKC,EAA7BG,CAAmC/D,IACnCgE,EAAAA,eAAyBL,UAAKC,EAA9BI,CAAoChE,IAGpCiE,EAAAA,cAAcN,UAAKC,EAAnBK,CAAyBjE"}