{"version":3,"file":"TextAreaAutosize.spec.js","sources":["../../../../src/UNSAFE_TextAreaAutosize/__tests__/TextAreaAutosize.spec.tsx"],"sourcesContent":["import { cleanup, render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { TextAreaAutosize } from '../TextAreaAutosize';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { FormContext, FormContextProps } from '../../hooks/UNSAFE_useFormContext';\n\nasync function getEnvironmentContext() {\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n  const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n  return {\n    translations: { '@oracle/oraclejet-preact': translations }\n  } as Partial<RootEnvironment>;\n}\n\nconst noOp = () => {};\n\ndescribe('TextAreaAutosize - remaining text counter', () => {\n  it('verifies counter text is shown by default', async () => {\n    const env = await getEnvironmentContext();\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TextAreaAutosize\n          ariaDescribedBy=\"testId\"\n          label=\"Test Label\"\n          value=\"1234\"\n          maxLength={50}\n          onInput={noOp}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    const siblingElement = textAreaElement?.nextElementSibling;\n    const children = siblingElement?.children;\n    const childSpanElement = children && children.length !== 0 ? children[0] : null;\n    expect(childSpanElement).not.to.be.null;\n    expect(childSpanElement?.tagName).to.equal('SPAN');\n    expect(childSpanElement?.textContent).to.equal('4/50');\n  });\n  it('verifies counter text is shown for maxLengthCounter == \"remaining\"', async () => {\n    const env = await getEnvironmentContext();\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TextAreaAutosize\n          ariaDescribedBy=\"testId\"\n          label=\"Test Label\"\n          value=\"1234\"\n          maxLength={50}\n          maxLengthCounter=\"remaining\"\n          onInput={noOp}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    const siblingElement = textAreaElement?.nextElementSibling;\n    const children = siblingElement?.children;\n    const childSpanElement = children && children.length !== 0 ? children[0] : null;\n    expect(childSpanElement).not.to.be.null;\n    expect(childSpanElement?.tagName).to.equal('SPAN');\n    expect(childSpanElement?.textContent).to.equal('4/50');\n  });\n  it('verifies counter text is not shown for maxLengthCounter == \"none\"', async () => {\n    const env = await getEnvironmentContext();\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TextAreaAutosize\n          ariaDescribedBy=\"testId\"\n          label=\"Test Label\"\n          value=\"1234\"\n          maxLength={50}\n          maxLengthCounter=\"none\"\n          onInput={noOp}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    const siblingElement = textAreaElement?.nextElementSibling;\n    const children = siblingElement?.children;\n    const childSpanElement = children && children.length !== 0 ? children[0] : null;\n    expect(childSpanElement).to.be.null;\n  });\n\n  afterEach(cleanup);\n});\n\ndescribe('TextAreaAutosize - verify readonly element type in enabled form layout', () => {\n  const enabledFormContext: FormContextProps = {\n    isFormLayout: true\n  };\n\n  it('verifies text field inputelement type is \"textarea\" when maxRows is specified and component is enabled', async () => {\n    const { container } = render(\n      <FormContext.Provider value={enabledFormContext}>\n        <TextAreaAutosize label=\"Test Label\" value=\"1234\" maxRows={5} onInput={noOp} />\n      </FormContext.Provider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).not.to.be.null;\n  });\n\n  it('verifies text field inputelement type is \"textarea\" when maxRows is specified and component is readonly', async () => {\n    const { container } = render(\n      <FormContext.Provider value={enabledFormContext}>\n        <TextAreaAutosize\n          label=\"Test Label\"\n          value=\"1234\"\n          isReadonly={true}\n          maxRows={5}\n          onInput={noOp}\n        />\n      </FormContext.Provider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).not.to.be.null;\n  });\n\n  it('verifies text field input element type is not \"textarea\" when maxRows is not specified and component is enabled', async () => {\n    const { container } = render(\n      <FormContext.Provider value={enabledFormContext}>\n        <TextAreaAutosize label=\"Test Label\" value=\"1234\" onInput={noOp} />\n      </FormContext.Provider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).not.to.be.null;\n  });\n\n  it('verifies text field input element type is not \"textarea\" when maxRows is not specified and component is readonly', async () => {\n    const { container } = render(\n      <FormContext.Provider value={enabledFormContext}>\n        <TextAreaAutosize label=\"Test Label\" value=\"1234\" isReadonly={true} onInput={noOp} />\n      </FormContext.Provider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).to.be.null;\n  });\n\n  afterEach(cleanup);\n});\n\ndescribe('TextAreaAutosize - verify readonly element type in readonly form layout', () => {\n  const readonlyFormContext: FormContextProps = {\n    isFormLayout: true,\n    isReadonly: true\n  };\n\n  it('verifies text field inputelement type is \"textarea\" when maxRows is specified and component is enabled', async () => {\n    const { container } = render(\n      <FormContext.Provider value={readonlyFormContext}>\n        <TextAreaAutosize label=\"Test Label\" value=\"1234\" maxRows={5} onInput={noOp} />\n      </FormContext.Provider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).not.to.be.null;\n  });\n\n  it('verifies text field inputelement type is \"textarea\" when maxRows is specified and component is readonly', async () => {\n    const { container } = render(\n      <FormContext.Provider value={readonlyFormContext}>\n        <TextAreaAutosize\n          label=\"Test Label\"\n          value=\"1234\"\n          isReadonly={true}\n          maxRows={5}\n          onInput={noOp}\n        />\n      </FormContext.Provider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).not.to.be.null;\n  });\n\n  it('verifies text field input element type is not \"textarea\" when maxRows is not specified and component is enabled', async () => {\n    const { container } = render(\n      <FormContext.Provider value={readonlyFormContext}>\n        <TextAreaAutosize label=\"Test Label\" value=\"1234\" onInput={noOp} />\n      </FormContext.Provider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).to.be.null;\n  });\n\n  it('verifies text field input element type is not \"textarea\" when maxRows is not specified and component is readonly', async () => {\n    const { container } = render(\n      <FormContext.Provider value={readonlyFormContext}>\n        <TextAreaAutosize label=\"Test Label\" value=\"1234\" isReadonly={true} onInput={noOp} />\n      </FormContext.Provider>\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).to.be.null;\n  });\n\n  afterEach(cleanup);\n});\n\ndescribe('TextAreaAutosize - verify readonly element type when not in form layout', () => {\n  it('verifies text field inputelement type is \"textarea\" when maxRows is specified and component is enabled', async () => {\n    const { container } = render(\n      <TextAreaAutosize label=\"Test Label\" value=\"1234\" maxRows={5} onInput={noOp} />\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).not.to.be.null;\n  });\n\n  it('verifies text field inputelement type is \"textarea\" when maxRows is specified and component is readonly', async () => {\n    const { container } = render(\n      <TextAreaAutosize\n        label=\"Test Label\"\n        value=\"1234\"\n        isReadonly={true}\n        maxRows={5}\n        onInput={noOp}\n      />\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).not.to.be.null;\n  });\n\n  it('verifies text field input element type is not \"textarea\" when maxRows is not specified and component is enabled', async () => {\n    const { container } = render(\n      <TextAreaAutosize label=\"Test Label\" value=\"1234\" onInput={noOp} />\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).not.to.be.null;\n  });\n\n  it('verifies text field input element type is not \"textarea\" when maxRows is not specified and component is readonly', async () => {\n    const { container } = render(\n      <TextAreaAutosize label=\"Test Label\" value=\"1234\" isReadonly={true} onInput={noOp} />\n    );\n\n    const textAreaElement = container.querySelector('textarea');\n    expect(textAreaElement).to.be.null;\n  });\n\n  afterEach(cleanup);\n});\n"],"names":["async","getEnvironmentContext","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","noOp","describe","it","env","container","render","_jsx","RootEnvironmentProvider","Object","assign","environment","children","TextAreaAutosize","ariaDescribedBy","label","value","maxLength","onInput","textAreaElement","querySelector","siblingElement","nextElementSibling","childSpanElement","length","expect","not","to","be","null","tagName","equal","textContent","maxLengthCounter","afterEach","cleanup","enabledFormContext","isFormLayout","FormContext","Provider","maxRows","jsx","isReadonly","readonlyFormContext"],"mappings":"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"}