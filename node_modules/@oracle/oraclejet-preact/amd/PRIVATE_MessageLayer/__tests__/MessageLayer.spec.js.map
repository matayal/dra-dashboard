{"version":3,"file":"MessageLayer.spec.js","sources":["../../../../src/PRIVATE_MessageLayer/__tests__/MessageLayer.spec.tsx"],"sourcesContent":["import { cleanup, render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { RootEnvironment, RootEnvironmentProvider } from '../../UNSAFE_Environment';\n\nimport { MessageLayer, positions } from '../MessageLayer';\n\nconst MessageText = 'Test Message';\nconst MessageID = 'MessageID';\nconst TestMessage = () => <div>{MessageText}</div>;\nconst offset = 5;\nconst verticalOffset = '--oj-c-PRIVATE-DO-NOT-USE-notification-vertical-offset';\nconst horizontalOffset = '--oj-c-PRIVATE-DO-NOT-USE-notification-horizontal-offset';\n\ndescribe('MessageLayer component', () => {\n  let env: Partial<RootEnvironment>;\n\n  before(async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    env =\n      env ||\n      ({\n        translations: { '@oracle/oraclejet-preact': translations }\n      } as Partial<RootEnvironment>);\n  });\n\n  afterEach(cleanup);\n\n  it('it renders', () => {\n    const { getByText } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageLayer>\n          <TestMessage />\n        </MessageLayer>\n      </RootEnvironmentProvider>\n    );\n\n    expect(getByText(MessageText)).to.exist;\n  });\n\n  positions.map((position) => {\n    it('it renders all positions: ' + position, async () => {\n      const { getByText, getByTestId } = render(\n        <RootEnvironmentProvider environment={env}>\n          <MessageLayer position={position} testId={MessageID}>\n            <TestMessage />\n          </MessageLayer>\n        </RootEnvironmentProvider>\n      );\n\n      const notificationLayer = getByTestId(MessageID);\n\n      expect(getByText(MessageText)).to.exist;\n      expect(notificationLayer.classList.length).to.equal(2);\n    });\n  });\n\n  it('it renders offset from number value', async () => {\n    const { getByTestId, getByText } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageLayer offset={offset} testId={MessageID}>\n          <TestMessage />\n        </MessageLayer>\n      </RootEnvironmentProvider>\n    );\n\n    const notificationLayer = getByTestId(MessageID);\n    const computed = getComputedStyle(notificationLayer);\n\n    expect(getByText(MessageText)).to.exist;\n    expect(computed.getPropertyValue(verticalOffset)).to.equal(offset + 'px');\n    expect(computed.getPropertyValue(horizontalOffset)).to.equal(offset + 'px');\n  });\n\n  it('it renders offset from object', () => {\n    const { getByTestId, getByText } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageLayer\n          offset={{\n            horizontal: offset,\n            vertical: offset\n          }}\n          testId={MessageID}>\n          <TestMessage />\n        </MessageLayer>\n      </RootEnvironmentProvider>\n    );\n\n    const notificationLayer = getByTestId(MessageID);\n    const computed = getComputedStyle(notificationLayer);\n\n    expect(getByText(MessageText)).to.exist;\n    expect(computed.getPropertyValue(verticalOffset)).to.equal(offset + 'px');\n    expect(computed.getPropertyValue(horizontalOffset)).to.equal(offset + 'px');\n  });\n});\n"],"names":["MessageText","MessageID","TestMessage","_jsx","children","verticalOffset","horizontalOffset","describe","env","before","async","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","afterEach","cleanup","it","getByText","render","jsx","RootEnvironmentProvider","Object","assign","environment","MessageLayer","expect","to","exist","positions","map","position","getByTestId","testId","notificationLayer","classList","length","equal","offset","computed","getComputedStyle","getPropertyValue","horizontal","vertical"],"mappings":"+8BAOA,MAAMA,EAAc,eACdC,EAAY,YACZC,EAAc,IAAMC,EAAAA,IAAM,MAAA,CAAAC,SAAAJ,IAE1BK,EAAiB,yDACjBC,EAAmB,2DAEzBC,SAAS,yBAA0B,KACjC,IAAIC,EAEJC,OAAOC,UACL,MAAMC,EAASC,yBAAuB,CAAC,MAAO,IAAIC,IAAI,CAAC,QAAS,SACxDC,QAASC,q0KAAuBC,CAAO,uBAAuBL,eACtEH,EACEA,GACC,CACCO,aAAc,CAAE,2BAA4BA,MAIlDE,UAAUC,EAAOA,SAEjBC,GAAG,aAAc,KACf,MAAMC,UAAEA,GAAcC,EAAAA,OACpBlB,EAAAmB,IAACC,0BAAuBC,OAAAC,OAAA,CAACC,YAAalB,GACpC,CAAAJ,SAAAD,MAACwB,EAAAA,aACC,CAAAvB,SAAAD,EAAAmB,IAACpB,EAAc,UAKrB0B,EAAAA,OAAOR,EAAUpB,IAAc6B,GAAGC,QAGpCC,YAAUC,IAAKC,IACbd,GAAG,6BAA+Bc,EAAUvB,UAC1C,MAAMU,UAAEA,EAASc,YAAEA,GAAgBb,EAAAA,OACjClB,EAAAA,IAACoB,EAAAA,wBAAuBC,OAAAC,OAAA,CAACC,YAAalB,GACpC,CAAAJ,SAAAD,EAAAmB,IAACK,EAAYA,aAAAH,OAAAC,OAAA,CAACQ,SAAUA,EAAUE,OAAQlC,GACxC,CAAAG,SAAAD,EAAAA,IAACD,EAAW,WAKZkC,EAAoBF,EAAYjC,GAEtC2B,EAAAA,OAAOR,EAAUpB,IAAc6B,GAAGC,MAClCF,EAAMA,OAACQ,EAAkBC,UAAUC,QAAQT,GAAGU,MAAM,OAIxDpB,GAAG,sCAAuCT,UACxC,MAAMwB,YAAEA,EAAWd,UAAEA,GAAcC,EAAAA,OACjClB,EAAAA,IAACoB,EAAAA,wBAAuBC,OAAAC,OAAA,CAACC,YAAalB,GACpC,CAAAJ,SAAAD,EAAAmB,IAACK,EAAYA,aAAAH,OAAAC,OAAA,CAACe,OAnDP,EAmDuBL,OAAQlC,GACpC,CAAAG,SAAAD,EAAAA,IAACD,EAAW,WAKZkC,EAAoBF,EAAYjC,GAChCwC,EAAWC,iBAAiBN,GAElCR,EAAAA,OAAOR,EAAUpB,IAAc6B,GAAGC,MAClCF,SAAOa,EAASE,iBAAiBtC,IAAiBwB,GAAGU,MAAMC,OAC3DZ,SAAOa,EAASE,iBAAiBrC,IAAmBuB,GAAGU,MAAMC,SAG/DrB,GAAG,gCAAiC,KAClC,MAAMe,YAAEA,EAAWd,UAAEA,GAAcC,EAAAA,OACjClB,EAAAA,IAACoB,EAAuBA,wBAACC,OAAAC,OAAA,CAAAC,YAAalB,GAAG,CAAAJ,SACvCD,MAACwB,EAAYA,aAAAH,OAAAC,OAAA,CACXe,OAAQ,CACNI,WAtEG,EAuEHC,SAvEG,GAyELV,OAAQlC,GACR,CAAAG,SAAAD,EAAAmB,IAACpB,EAAc,WAKfkC,EAAoBF,EAAYjC,GAChCwC,EAAWC,iBAAiBN,GAElCR,EAAAA,OAAOR,EAAUpB,IAAc6B,GAAGC,MAClCF,SAAOa,EAASE,iBAAiBtC,IAAiBwB,GAAGU,MAAMC,OAC3DZ,SAAOa,EAASE,iBAAiBrC,IAAmBuB,GAAGU,MAAMC"}