{"version":3,"file":"ProgressBar.spec.js","sources":["../../../../src/UNSAFE_ProgressBar/__tests__/ProgressBar.spec.tsx"],"sourcesContent":["import { render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { ProgressBar } from '../';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\n\ndescribe('Test Progress Bar component', () => {\n  it('render', async function () {\n    const content = render(<ProgressBar value={10} />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    const classList = firstElement.classList;\n    expect(classList.length).equals(2);\n  });\n\n  it('Default value verification using ARIA attributes', async function () {\n    const content = render(<ProgressBar />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement.getAttribute('aria-valuemin')).equals('0');\n    expect(firstElement.getAttribute('aria-valuemax')).equals('100');\n    expect(firstElement.getAttribute('aria-valuenow')).equals('0');\n  });\n\n  it('Test for Id ', async () => {\n    const content = render(<ProgressBar value={10} id=\"progressBar\" />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement.getAttribute('id')).equals('progressBar');\n  });\n\n  if (typeof jest === 'undefined') {\n    it('Test for component height ', async () => {\n      const content = render(<ProgressBar />);\n      const firstElement = content.container.firstElementChild as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Height of the progress Bar '\n      ).to.be.equal('6px');\n    });\n  }\n\n  it('Test for component and value Width', async () => {\n    const content = render(<ProgressBar value={10} width=\"200px\" />);\n    //test for value width\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    const innerElement = firstElement?.firstElementChild as HTMLElement;\n    expect(innerElement.style.width).equals('10%');\n    expect(firstElement.style.width).equals('200px');\n  });\n});\n\ndescribe('Progress Bar Indeterminate aria-valuetext, translation and accessibleLabel', () => {\n  it('Test to check default aria-valuetext', async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <ProgressBar value={'indeterminate'} />\n      </RootEnvironmentProvider>\n    );\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement.getAttribute('aria-valuetext')).equals('In Progress');\n  });\n\n  it('Test to check accessibleLabel property', async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <ProgressBar value={'indeterminate'} accessibleLabel=\"accessibleLabel\" />\n      </RootEnvironmentProvider>\n    );\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement?.getAttribute('aria-valuetext')).equals('accessibleLabel');\n  });\n});\n\ndescribe('Progress Bar Embedded Test', () => {\n  if (typeof jest === 'undefined') {\n    it('Indeterminate Embedded Test', async () => {\n      const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n      const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n      const env: Partial<RootEnvironment> = {\n        translations: { '@oracle/oraclejet-preact': translations }\n      };\n      const content = render(\n        <RootEnvironmentProvider environment={env}>\n          <ProgressBar value={'indeterminate'} edge=\"top\" />\n        </RootEnvironmentProvider>\n      );\n      const firstElement = content.container.firstElementChild as HTMLElement;\n      const innerElement = firstElement?.firstElementChild as HTMLElement;\n      expect(innerElement.classList.length).greaterThan(1);\n      expect(\n        !window.getComputedStyle(firstElement).getPropertyValue('borderStyle'),\n        'Embedded Indeterminate Progress Bar has no border'\n      ).to.be.true;\n      expect(\n        !window.getComputedStyle(firstElement).getPropertyValue('borderRadius'),\n        'Embedded Indeterminate Progress Bar has no border radius'\n      ).to.be.true;\n    });\n  }\n\n  it('Determinate Embedded Test', async () => {\n    const content = render(<ProgressBar value={10} edge=\"top\" />);\n    const innerElement = content.container?.firstElementChild?.firstElementChild as HTMLElement;\n    expect(innerElement.classList.length).equals(1);\n  });\n});\n\ndescribe('Test Progress Bar ARIA props', () => {\n  it('Test value and max property of Progress bar', async function () {\n    const content = render(<ProgressBar value={50} max={1000} />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement.getAttribute('aria-valuemax')).equals('1000');\n    expect(firstElement.getAttribute('aria-valuenow')).equals('50');\n    expect(firstElement.getAttribute('aria-valuemin')).equals('0');\n  });\n});\n"],"names":["describe","it","async","classList","render","_jsx","ProgressBar","value","container","firstElementChild","expect","length","equals","firstElement","getAttribute","jsx","id","jest","window","getComputedStyle","getPropertyValue","to","be","equal","width","innerElement","style","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","env","RootEnvironmentProvider","Object","assign","environment","__variableDynamicImportRuntime1__","children","accessibleLabel","__variableDynamicImportRuntime2__","edge","greaterThan","true","_b","_a","max"],"mappings":"ieAOAA,SAAS,8BAA+B,KACtCC,GAAG,SAAUC,iBACX,MAEMC,EAFUC,EAAMA,OAACC,MAACC,EAAAA,YAAY,CAAAC,MAAO,MACdC,UAAUC,kBACRN,UAC/BO,EAAAA,OAAOP,EAAUQ,QAAQC,OAAO,KAGlCX,GAAG,mDAAoDC,iBACrD,MACMW,EADUT,EAAAA,OAAOC,EAAAA,IAACC,EAAAA,YAAW,KACNE,UAAUC,kBACvCC,EAAMA,OAACG,EAAaC,aAAa,kBAAkBF,OAAO,KAC1DF,EAAMA,OAACG,EAAaC,aAAa,kBAAkBF,OAAO,OAC1DF,EAAMA,OAACG,EAAaC,aAAa,kBAAkBF,OAAO,OAG5DX,GAAG,eAAgBC,UACjB,MACMW,EADUT,EAAAA,OAAOC,EAAAU,IAACT,cAAY,CAAAC,MAAO,GAAIS,GAAG,iBACrBR,UAAUC,kBACvCC,EAAMA,OAACG,EAAaC,aAAa,OAAOF,OAAO,iBAG7B,oBAATK,MACThB,GAAG,6BAA8BC,UAC/B,MACMW,EADUT,EAAAA,OAAOC,EAAAA,IAACC,EAAAA,YAAW,KACNE,UAAUC,kBACvCC,EAAAA,OACEQ,OAAOC,iBAAiBN,GAAcO,iBAAiB,UACvD,+BACAC,GAAGC,GAAGC,MAAM,SAIlBtB,GAAG,qCAAsCC,UACvC,MAEMW,EAFUT,EAAAA,OAAOC,EAAAU,IAACT,cAAY,CAAAC,MAAO,GAAIiB,MAAM,WAExBhB,UAAUC,kBACjCgB,EAAeZ,MAAAA,OAAA,EAAAA,EAAcJ,kBACnCC,EAAMA,OAACe,EAAaC,MAAMF,OAAOZ,OAAO,OACxCF,EAAMA,OAACG,EAAaa,MAAMF,OAAOZ,OAAO,aAI5CZ,SAAS,6EAA8E,KACrFC,GAAG,uCAAwCC,UACzC,MAAMyB,EAASC,yBAAuB,CAAC,MAAO,IAAIC,IAAI,CAAC,QAAS,SACxDC,QAASC,q0KAAuBC,CAAO,uBAAuBL,eAChEM,EAAgC,CACpCF,aAAc,CAAE,2BAA4BA,IAOxClB,EALUT,EAAMA,OACpBC,MAAC6B,EAAAA,wBAAuBC,OAAAC,OAAA,CAACC,YAAaJ,aACpC5B,EAAAA,IAACC,EAAAA,aAAYC,MAAO,sBAGKC,UAAUC,kBACvCC,EAAMA,OAACG,EAAaC,aAAa,mBAAmBF,OAAO,iBAG7DX,GAAG,yCAA0CC,UAC3C,MAAMyB,EAASC,yBAAuB,CAAC,MAAO,IAAIC,IAAI,CAAC,QAAS,SACxDC,QAASC,q0KAAuBO,CAAO,uBAAuBX,eAChEM,EAAgC,CACpCF,aAAc,CAAE,2BAA4BA,IAOxClB,EALUT,SACdC,EAAAA,IAAC6B,EAAuBA,wBAACC,OAAAC,OAAA,CAAAC,YAAaJ,GACpC,CAAAM,SAAAlC,MAACC,EAAAA,YAAY,CAAAC,MAAO,gBAAiBiC,gBAAgB,wBAG5BhC,UAAUC,kBACvCC,EAAAA,OAAOG,MAAAA,OAAY,EAAZA,EAAcC,aAAa,mBAAmBF,OAAO,uBAIhEZ,SAAS,6BAA8B,KACjB,oBAATiB,MACThB,GAAG,8BAA+BC,UAChC,MAAMyB,EAASC,yBAAuB,CAAC,MAAO,IAAIC,IAAI,CAAC,QAAS,SACxDC,QAASC,q0KAAuBU,CAAO,uBAAuBd,eAChEM,EAAgC,CACpCF,aAAc,CAAE,2BAA4BA,IAOxClB,EALUT,SACdC,EAAAA,IAAC6B,EAAuBA,wBAACC,OAAAC,OAAA,CAAAC,YAAaJ,GACpC,CAAAM,SAAAlC,MAACC,EAAAA,YAAY,CAAAC,MAAO,gBAAiBmC,KAAK,YAGjBlC,UAAUC,kBACjCgB,EAAeZ,MAAAA,OAAA,EAAAA,EAAcJ,kBACnCC,EAAMA,OAACe,EAAatB,UAAUQ,QAAQgC,YAAY,GAClDjC,EAAAA,QACGQ,OAAOC,iBAAiBN,GAAcO,iBAAiB,eACxD,qDACAC,GAAGC,GAAGsB,KACRlC,EAAAA,QACGQ,OAAOC,iBAAiBN,GAAcO,iBAAiB,gBACxD,4DACAC,GAAGC,GAAGsB,OAIZ3C,GAAG,4BAA6BC,kBAC9B,MACMuB,EAAqD,QAAtCoB,EAAmB,QAAnBC,EADL1C,EAAAA,OAAOC,EAAAU,IAACT,cAAY,CAAAC,MAAO,GAAImC,KAAK,SACvBlC,iBAAW,IAAAsC,OAAA,EAAAA,EAAArC,yBAAmB,IAAAoC,OAAA,EAAAA,EAAApC,kBAC3DC,EAAMA,OAACe,EAAatB,UAAUQ,QAAQC,OAAO,OAIjDZ,SAAS,+BAAgC,KACvCC,GAAG,8CAA+CC,iBAChD,MACMW,EADUT,EAAAA,OAAOC,EAAAU,IAACT,cAAY,CAAAC,MAAO,GAAIwC,IAAK,OACvBvC,UAAUC,kBACvCC,EAAMA,OAACG,EAAaC,aAAa,kBAAkBF,OAAO,QAC1DF,EAAMA,OAACG,EAAaC,aAAa,kBAAkBF,OAAO,MAC1DF,EAAMA,OAACG,EAAaC,aAAa,kBAAkBF,OAAO"}