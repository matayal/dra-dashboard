{"version":3,"file":"MessageUtils.spec.js","sources":["../../../../src/PRIVATE_Message/__tests__/MessageUtils.spec.tsx"],"sourcesContent":["import { expect } from 'chai';\nimport * as MessageUtils from '../MessageUtils';\n\ndescribe('Test MessageUtils', () => {\n  it('throwError', function () {\n    try {\n      MessageUtils.throwError('foo');\n      expect(true).to.be.false;\n    } catch (e) {\n      expect(e).not.null;\n    }\n  });\n\n  it('getRenderer', function () {\n    const message = {\n      data: {\n        detail: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.'\n      },\n      index: 0,\n      key: 'ConfirmationMessage',\n      metadata: { key: 'ConfirmationMessage' }\n    };\n    const renderers = {\n      testRenderer: () => <div></div>\n    };\n\n    // don's pass any renderers\n    const noRenderers = MessageUtils.getRenderer(message, 'testRenderer');\n    expect(noRenderers).undefined;\n\n    // get renderer by valid id\n    const rendererByIdValid = MessageUtils.getRenderer(message, 'testRenderer', renderers);\n    expect(rendererByIdValid).to.equal(renderers.testRenderer);\n    // get renderer by invalid id\n    // (this should throw an error, but if not, verify that the renderer is null)\n    try {\n      const rendererByIdInvalid = MessageUtils.getRenderer(message, 'foo', renderers);\n      expect(rendererByIdInvalid).null;\n    } catch (e) {\n      expect(e).not.null;\n    }\n    // get renderer by undefined id\n    const rendererIdUndefined = MessageUtils.getRenderer(message, undefined, renderers);\n    expect(rendererIdUndefined).undefined;\n\n    // get renderer by function that returns a valid id\n    const rendererByFuncValid = MessageUtils.getRenderer(message, () => 'testRenderer', renderers);\n    expect(rendererByFuncValid).to.equal(renderers.testRenderer);\n    // get renderer by function that returns an invalid id\n    // (this should throw an error, but if not, verify that the renderer is null)\n    try {\n      const rendererByFuncInvalid = MessageUtils.getRenderer(message, () => 'foo', renderers);\n      expect(rendererByFuncInvalid).null;\n    } catch (e) {\n      expect(e).not.null;\n    }\n    // get renderer by function that returns a undefined id\n    const rendererByFuncUndefined = MessageUtils.getRenderer(message, () => undefined, renderers);\n    expect(rendererByFuncUndefined).undefined;\n  });\n});\n"],"names":["describe","it","MessageUtils.throwError","throwError","expect","to","be","false","e","not","null","message","data","detail","index","key","metadata","renderers","testRenderer","_jsx","noRenderers","MessageUtils.getRenderer","undefined","rendererByIdValid","getRenderer","equal","rendererByIdInvalid","rendererIdUndefined","rendererByFuncValid","rendererByFuncInvalid","rendererByFuncUndefined"],"mappings":"saAGAA,SAAS,oBAAqB,KAC5BC,GAAG,aAAc,WACf,IACEC,EAAuBC,WAAC,OACxBC,EAAAA,QAAO,GAAMC,GAAGC,GAAGC,MACnB,MAAOC,GACPJ,EAAAA,OAAOI,GAAGC,IAAIC,QAIlBT,GAAG,cAAe,WAChB,MAAMU,EAAU,CACdC,KAAM,CACJC,OAAQ,8EAEVC,MAAO,EACPC,IAAK,sBACLC,SAAU,CAAED,IAAK,wBAEbE,EAAY,CAChBC,aAAc,IAAMC,EAAAA,IAAW,MAAA,KAI3BC,EAAcC,EAAAA,YAAyBV,EAAS,gBACtDP,SAAOgB,GAAaE,UAGpB,MAAMC,EAAoBF,EAAwBG,YAACb,EAAS,eAAgBM,GAC5Eb,EAAMA,OAACmB,GAAmBlB,GAAGoB,MAAMR,EAAUC,cAG7C,IACE,MAAMQ,EAAsBL,EAAwBG,YAACb,EAAS,MAAOM,GACrEb,SAAOsB,GAAqBhB,KAC5B,MAAOF,GACPJ,EAAAA,OAAOI,GAAGC,IAAIC,KAGhB,MAAMiB,EAAsBN,EAAwBG,YAACb,OAASW,EAAWL,GACzEb,SAAOuB,GAAqBL,UAG5B,MAAMM,EAAsBP,EAAAA,YAAyBV,EAAS,IAAM,eAAgBM,GACpFb,EAAMA,OAACwB,GAAqBvB,GAAGoB,MAAMR,EAAUC,cAG/C,IACE,MAAMW,EAAwBR,EAAAA,YAAyBV,EAAS,IAAM,MAAOM,GAC7Eb,SAAOyB,GAAuBnB,KAC9B,MAAOF,GACPJ,EAAAA,OAAOI,GAAGC,IAAIC,KAGhB,MAAMoB,EAA0BT,EAAAA,YAAyBV,EAAS,OAAiBM,GACnFb,SAAO0B,GAAyBR"}