{"version":3,"file":"MessageDetail.spec.js","sources":["../../../../src/PRIVATE_Message/__tests__/MessageDetail.spec.tsx"],"sourcesContent":["import { render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { MessageRendererDataItem } from '../Message.types';\nimport { MessageDetail } from '../MessageDetail';\n\nconst MessageRendererDataItem = {\n  data: {\n    detail: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.'\n  },\n  index: 0,\n  key: 'ConfirmationMessage',\n  metadata: { key: 'ConfirmationMessage' }\n};\n\ndescribe('Test MessageDetail component', () => {\n  it('default renderer', async function () {\n    const content = render(<MessageDetail item={MessageRendererDataItem} />);\n\n    const detail = await content.findByText(\n      'Lorem Ipsum is simply dummy text of the printing and typesetting industry.'\n    );\n    expect(detail).not.null;\n  });\n\n  it('custom renderer', async function () {\n    type DataType = {\n      detail: string;\n    };\n    const detailRenderer = ({\n      data,\n      index,\n      key,\n      metadata\n    }: MessageRendererDataItem<string, DataType>) => (\n      <div\n        style=\"border: 1px solid gray; padding: 5px; background-color: orange;\"\n        data-testid=\"customWrapper\">\n        <div>index: {index}</div>\n        <div>key: {key}</div>\n        <div>detail: {data.detail}</div>\n        <div>metadata key: {metadata?.key}</div>\n      </div>\n    );\n\n    const content = render(\n      <MessageDetail item={MessageRendererDataItem} renderer={detailRenderer} />\n    );\n\n    const customWrapper = await content.findByTestId('customWrapper');\n    expect(customWrapper).not.null;\n    expect(customWrapper?.style.backgroundColor).to.equal('orange');\n\n    const index = await content.findByText('index: 0');\n    expect(index).not.null;\n\n    const key = await content.findByText('key: ConfirmationMessage');\n    expect(key).not.null;\n\n    const detail = await content.findByText(\n      'detail: Lorem Ipsum is simply dummy text of the printing and typesetting industry.'\n    );\n    expect(detail).not.null;\n\n    const metadataKey = await content.findByText('metadata key: ConfirmationMessage');\n    expect(metadataKey).not.null;\n  });\n});\n"],"names":["MessageRendererDataItem","data","detail","index","key","metadata","describe","it","async","content","render","_jsx","MessageDetail","item","findByText","expect","not","null","jsx","renderer","_jsxs","jsxs","Object","assign","style","children","customWrapper","findByTestId","backgroundColor","to","equal","metadataKey"],"mappings":"oaAKA,MAAMA,EAA0B,CAC9BC,KAAM,CACJC,OAAQ,8EAEVC,MAAO,EACPC,IAAK,sBACLC,SAAU,CAAED,IAAK,wBAGnBE,SAAS,+BAAgC,KACvCC,GAAG,mBAAoBC,iBACrB,MAAMC,EAAUC,EAAMA,OAACC,MAACC,EAAAA,cAAc,CAAAC,KAAMb,KAEtCE,QAAeO,EAAQK,WAC3B,8EAEFC,EAAAA,OAAOb,GAAQc,IAAIC,OAGrBV,GAAG,kBAAmBC,iBAIpB,MAgBMC,EAAUC,EAAAA,OACdC,EAAAO,IAACN,gBAAc,CAAAC,KAAMb,EAAyBmB,SAjBzB,EACrBlB,KAAAA,EACAE,MAAAA,EACAC,IAAAA,EACAC,SAAAA,KAEAe,EAAAC,KAAA,MAAAC,OAAAC,OAAA,CACEC,MAAM,kEACM,cAAA,iBACZ,CAAAC,SAAA,CAAAL,EAAAA,KAAA,MAAA,CAAAK,SAAA,CAAA,UAAatB,KACbiB,EAAAA,8BAAWhB,KACXgB,EAAAA,KAAc,MAAA,CAAAK,SAAA,CAAA,WAAAxB,EAAKC,UACnBkB,EAAAA,uCAAoBf,MAAAA,OAAA,EAAAA,EAAUD,cAQ5BsB,QAAsBjB,EAAQkB,aAAa,iBACjDZ,EAAAA,OAAOW,GAAeV,IAAIC,KAC1BF,EAAAA,OAAOW,MAAAA,OAAA,EAAAA,EAAeF,MAAMI,iBAAiBC,GAAGC,MAAM,UAEtD,MAAM3B,QAAcM,EAAQK,WAAW,YACvCC,EAAAA,OAAOZ,GAAOa,IAAIC,KAElB,MAAMb,QAAYK,EAAQK,WAAW,4BACrCC,EAAAA,OAAOX,GAAKY,IAAIC,KAEhB,MAAMf,QAAeO,EAAQK,WAC3B,sFAEFC,EAAAA,OAAOb,GAAQc,IAAIC,KAEnB,MAAMc,QAAoBtB,EAAQK,WAAW,qCAC7CC,EAAAA,OAAOgB,GAAaf,IAAIC"}