{"version":3,"file":"ComponentMessage.spec.js","sources":["../../../../src/UNSAFE_ComponentMessage/__tests__/ComponentMessage.spec.tsx"],"sourcesContent":["import { render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { severities } from '../../PRIVATE_Message';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport type { ComponentMessageItem } from '../ComponentMessage';\nimport { ComponentMessage } from '../ComponentMessage';\n\nasync function getEnvironmentContext() {\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n  const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n  return {\n    translations: { '@oracle/oraclejet-preact': translations }\n  } as Partial<RootEnvironment>;\n}\n\ndescribe('Test ComponentMessage component', () => {\n  for (const severity of severities) {\n    if (severity === 'none') {\n      continue;\n    }\n\n    it(`severity ${severity}`, async () => {\n      const content = render(\n        <RootEnvironmentProvider environment={await getEnvironmentContext()}>\n          <ComponentMessage\n            severity={severity as ComponentMessageItem['severity']}\n            detail={`${severity} message`}\n          />\n        </RootEnvironmentProvider>\n      );\n\n      const message = content.container.firstElementChild;\n      expect(message, 'component is rendered').not.null;\n      expect(\n        message?.classList.contains(`oj-c-messageinline-${severity}`),\n        'correct style class is set'\n      ).to.be.true;\n\n      const icon = message?.children.item(0);\n      const detail = message?.children.item(1);\n\n      expect(message?.children.length).to.equal(2, 'correct child DOM nodes count');\n      expect(icon, 'icon exists').not.null;\n      expect(detail, 'detail exists').not.null;\n\n      expect(detail?.textContent?.trim()).to.equal(\n        `${severity} message`,\n        'detail rendered correctly'\n      );\n    });\n  }\n});\n"],"names":["async","getEnvironmentContext","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","describe","severity","severities","it","message","render","_jsx","jsx","RootEnvironmentProvider","Object","assign","environment","children","ComponentMessage","detail","container","firstElementChild","expect","not","null","classList","contains","to","be","true","icon","item","length","equal","_a","textContent","trim"],"mappings":"kiFASAA,eAAeC,KACb,MAAMC,EAASC,yBAAuB,CAAC,MAAO,IAAIC,IAAI,CAAC,QAAS,SACxDC,QAASC,q0KAAuBC,CAAO,uBAAuBL,eACtE,MAAO,CACLI,aAAc,CAAE,2BAA4BA,IAIhDE,SAAS,kCAAmC,KAC1C,IAAK,MAAMC,KAAYC,aACJ,SAAbD,GAIJE,GAAG,YAAYF,IAAYT,gBACzB,MASMY,EATUC,EAAAA,OACdC,EAACC,IAAAC,0BAAwBC,OAAAC,OAAA,CAAAC,kBAAmBlB,MAC1C,CAAAmB,SAAAN,EAAAC,IAACM,mBAAgB,CACfZ,SAAUA,EACVa,OAAQ,GAAGb,kBAKOc,UAAUC,kBAClCC,EAAAA,OAAOb,EAAS,yBAAyBc,IAAIC,KAC7CF,SACEb,MAAAA,OAAO,EAAPA,EAASgB,UAAUC,SAAS,sBAAsBpB,KAClD,8BACAqB,GAAGC,GAAGC,KAER,MAAMC,EAAOrB,MAAAA,OAAA,EAAAA,EAASQ,SAASc,KAAK,GAC9BZ,EAASV,MAAAA,OAAA,EAAAA,EAASQ,SAASc,KAAK,GAEtCT,EAAMA,OAACb,MAAAA,SAAAA,EAASQ,SAASe,QAAQL,GAAGM,MAAM,EAAG,iCAC7CX,EAAAA,OAAOQ,EAAM,eAAeP,IAAIC,KAChCF,EAAAA,OAAOH,EAAQ,iBAAiBI,IAAIC,KAEpCF,EAAAA,OAA0B,QAAnBY,EAAAf,MAAAA,SAAAA,EAAQgB,mBAAW,IAAAD,OAAA,EAAAA,EAAEE,QAAQT,GAAGM,MACrC,GAAG3B,YACH"}