{"version":3,"file":"Chip.spec.js","sources":["../../../../src/UNSAFE_Chip/__tests__/Chip.spec.tsx"],"sourcesContent":["import { render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { Chip } from '../Chip';\nimport userEvent from '@testing-library/user-event';\nimport { TabbableModeContext } from '../../hooks/UNSAFE_useTabbableMode';\n\ndescribe('Test Chip component', () => {\n  it('render', async function () {\n    const content = render(<Chip>11</Chip>);\n    const text = await content.findByText('11');\n    expect(text).not.null;\n  });\n\n  it('isSelected property', async function () {\n    const content = render(<Chip isSelected={true}>88</Chip>);\n    const firstElement = content.container.firstElementChild;\n    // @ts-ignore\n    const classList = firstElement.classList;\n    expect(classList.length).equals(4);\n  });\n\n  it('isDisabled property', async function () {\n    const content = render(<Chip isDisabled={true}>99</Chip>);\n    const firstElement = content.container.firstElementChild;\n    // @ts-ignore\n    const classList = firstElement.classList;\n    expect(classList.length).equals(3);\n  });\n\n  it('event', async function () {\n    let count = 0;\n    const increment = () => count++;\n    const content = render(<Chip onToggle={increment}>Press</Chip>);\n    const label = await content.findByText('Press');\n    expect(label).not.null;\n    userEvent.click(label);\n    expect(count).equals(1);\n  });\n\n  it('with TabbableModeContext isTabbable=true', async () => {\n    const content = render(\n      <TabbableModeContext.Provider value={{ isTabbable: true }}>\n        <Chip>Test</Chip>\n      </TabbableModeContext.Provider>\n    );\n    const chip = await content.findByText('Test');\n    const tabindex = chip.getAttribute('tabindex');\n    expect(tabindex).to.equal('0');\n  });\n\n  it('with TabbableModeContext isTabbable=false', async () => {\n    const content = render(\n      <TabbableModeContext.Provider value={{ isTabbable: false }}>\n        <Chip>Test</Chip>\n      </TabbableModeContext.Provider>\n    );\n    const chip = await content.findByText('Test');\n    const tabindex = chip.getAttribute('tabindex');\n    expect(tabindex).to.equal('-1');\n  });\n});\n"],"names":["describe","it","async","content","render","_jsx","Chip","children","text","findByText","expect","not","null","classList","jsx","Object","assign","isSelected","container","firstElementChild","length","equals","isDisabled","count","onToggle","label","userEvent","click","TabbableModeContext","Provider","value","isTabbable","tabindex","getAttribute","to","equal"],"mappings":"+lBAMAA,SAAS,sBAAuB,KAC9BC,GAAG,SAAUC,iBACX,MAAMC,EAAUC,EAAMA,OAACC,MAACC,EAAAA,KAAI,CAAAC,SAAA,QACtBC,QAAaL,EAAQM,WAAW,MACtCC,EAAAA,OAAOF,GAAMG,IAAIC,OAGnBX,GAAG,sBAAuBC,iBACxB,MAGMW,EAHUT,EAAMA,OAACC,EAACS,IAAAR,EAAIA,KAACS,OAAAC,OAAA,CAAAC,YAAY,GAAe,CAAAV,SAAA,SAC3BW,UAAUC,kBAERN,UAC/BH,EAAAA,OAAOG,EAAUO,QAAQC,OAAO,KAGlCpB,GAAG,sBAAuBC,iBACxB,MAGMW,EAHUT,EAAMA,OAACC,EAACS,IAAAR,EAAIA,KAACS,OAAAC,OAAA,CAAAM,YAAY,GAAe,CAAAf,SAAA,SAC3BW,UAAUC,kBAERN,UAC/BH,EAAAA,OAAOG,EAAUO,QAAQC,OAAO,KAGlCpB,GAAG,QAASC,iBACV,IAAIqB,EAAQ,EACZ,MACMpB,EAAUC,EAAMA,OAACC,EAACS,IAAAR,EAAIA,KAACS,OAAAC,OAAA,CAAAQ,SADX,IAAMD,KACsC,CAAAhB,SAAA,YACxDkB,QAActB,EAAQM,WAAW,SACvCC,EAAAA,OAAOe,GAAOd,IAAIC,KAClBc,UAAUC,MAAMF,GAChBf,EAAAA,OAAOa,GAAOF,OAAO,KAGvBpB,GAAG,2CAA4CC,UAC7C,MAAMC,EAAUC,SACdC,EAAAA,IAACuB,EAAmBA,oBAACC,SAAQd,OAAAC,OAAA,CAACc,MAAO,CAAEC,YAAY,IAAM,CAAAxB,SACvDF,EAAAA,IAACC,EAAIA,KAAA,CAAAC,SAAA,aAIHyB,SADa7B,EAAQM,WAAW,SAChBwB,aAAa,YACnCvB,EAAAA,OAAOsB,GAAUE,GAAGC,MAAM,OAG5BlC,GAAG,4CAA6CC,UAC9C,MAAMC,EAAUC,SACdC,EAAAA,IAACuB,EAAmBA,oBAACC,SAAQd,OAAAC,OAAA,CAACc,MAAO,CAAEC,YAAY,IAAO,CAAAxB,SACxDF,EAAAA,IAACC,EAAIA,KAAA,CAAAC,SAAA,aAIHyB,SADa7B,EAAQM,WAAW,SAChBwB,aAAa,YACnCvB,EAAAA,OAAOsB,GAAUE,GAAGC,MAAM"}