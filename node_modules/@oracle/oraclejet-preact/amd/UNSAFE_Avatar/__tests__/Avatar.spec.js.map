{"version":3,"file":"Avatar.spec.js","sources":["../../../../src/UNSAFE_Avatar/__tests__/Avatar.spec.tsx"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { render } from '@testing-library/preact';\nimport userEvent from '@testing-library/user-event';\nimport { expect } from 'chai';\nimport { Avatar } from '../';\n//import { DemoRedwoodIcon } from '@oracle/oraclejet-pattern-library';\n\ntype avatarProps = ComponentProps<typeof Avatar>;\n\ndescribe('Test Avatar component', () => {\n  it('render', async function () {\n    const content = render(<Avatar>TN</Avatar>);\n    const initials = await content.findByText('TN');\n    expect(initials).not.null;\n    userEvent.click(initials);\n  });\n\n  it('applies Linaria CSS classes', () => {\n    const content = render(<Avatar />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    const classList = firstElement?.classList;\n    expect(classList?.length).equals(3);\n  });\n\n  it('checks for avatar sizes', () => {\n    const sizeOptionsArray: Array<avatarProps['size']> = [\n      '2xs',\n      'xs',\n      'sm',\n      'md',\n      'lg',\n      'xl',\n      '2xl'\n    ];\n    sizeOptionsArray.forEach((size) => {\n      const content = render(<Avatar size={size} />);\n      const firstElement = content.container.firstElementChild as HTMLElement;\n      const classList = firstElement?.classList;\n      const bgColorClass = 'oj-c-avatar-' + size;\n      const result = classList?.value;\n      expect(result).to.be.a('string').that.contains(bgColorClass);\n    });\n  });\n  it('checks for avatar initials', () => {\n    const testInitials = 'TEST INITIAL';\n    const content = render(<Avatar initials={testInitials} />);\n    const firstElement = content.container.firstElementChild?.firstElementChild as HTMLElement;\n    const innerHTMLText = firstElement?.innerHTML;\n    expect(innerHTMLText).equals(testInitials);\n  });\n  it('checks for avatar src', () => {\n    const src: avatarProps['src'] = 'avatar-image.jpg';\n    const content = render(<Avatar src={src} />);\n    const firstElement = content.container.firstElementChild?.firstElementChild as HTMLElement;\n    const srcImage = firstElement?.style.backgroundImage;\n    expect(srcImage).to.be.a('string').that.contains(src);\n  });\n  // commented out until we resolve using this external dependency\n  // it('checks for avatar icon', () => {\n  //   const iconName = 'car';\n  //   const content = render(\n  //     <Avatar>\n  //       <DemoRedwoodIcon name={iconName} />\n  //     </Avatar>\n  //   );\n  //   const firstElement = content.container.firstElementChild as HTMLElement;\n  //   const iconElement = firstElement?.querySelectorAll(`.oj-ux-ico-${iconName}`);\n  //   expect(iconElement?.length).equals(1);\n  // });\n  //Note: added check for running the below test only on browser, so as to access the getComputedStyle when the component is rendered\n  if (typeof jest === 'undefined') {\n    it('checks for avatar shape', () => {\n      const shapeOptionsArray: Array<avatarProps['shape']> = ['circle', 'square'];\n      shapeOptionsArray.forEach((shape) => {\n        const content = render(<Avatar shape={shape} />);\n        const firstElement = content.container.firstElementChild?.firstElementChild as HTMLElement;\n        const avatarBorderRadius = window\n          .getComputedStyle(firstElement)\n          .getPropertyValue('border-radius');\n        if (shape === 'circle') {\n          expect(avatarBorderRadius).equals('50%');\n        } else {\n          expect(avatarBorderRadius).not.equals('50%');\n        }\n      });\n    });\n  }\n  it('checks for backgroundColor style', () => {\n    const backgroundOptionsArray: Array<avatarProps['background']> = [\n      'neutral',\n      'orange',\n      'green',\n      'teal',\n      'blue',\n      'slate',\n      'pink',\n      'purple',\n      'lilac',\n      'gray'\n    ];\n    backgroundOptionsArray.forEach((background) => {\n      const content = render(<Avatar background={background} />);\n      const firstElement = content.container.firstElementChild as HTMLElement;\n      const classList = firstElement?.classList;\n      const sizeClass = 'oj-c-avatar-bg-' + background;\n      const result = classList?.value;\n      expect(result).to.be.a('string').that.contains(sizeClass);\n    });\n  });\n});\n\ndescribe('Security Test Avatar component', () => {\n  it('initials injection', function () {\n    const unwantedInitials = \"<span id='evil'>Evil disabled</span>\";\n    const content = render(<Avatar initials={unwantedInitials}></Avatar>);\n    const parentContainer = content.container as HTMLElement;\n    const evilSpan = parentContainer.querySelectorAll('#evil').length;\n    expect(evilSpan).equals(0);\n  });\n  it('src injection', function () {\n    const unwantedSrc = \"<span id='evil'>Evil disabled</span>\";\n    const content = render(<Avatar src={unwantedSrc}></Avatar>);\n    const parentContainer = content.container as HTMLElement;\n    const evilSpan = parentContainer.querySelectorAll('#evil').length;\n    expect(evilSpan).equals(0);\n  });\n  it('size injection', function () {\n    const unwantedInitials = \"<span id='evil'>Evil disabled</span>\";\n    // @ts-ignore\n    const content = render(<Avatar size={unwantedInitials}></Avatar>);\n    const parentContainer = content.container as HTMLElement;\n    const evilSpan = parentContainer.querySelectorAll('#evil').length;\n    expect(evilSpan).equals(0);\n  });\n});\n"],"names":["describe","it","async","content","render","_jsx","Avatar","children","initials","findByText","expect","not","null","userEvent","click","firstElement","container","firstElementChild","classList","length","equals","forEach","size","bgColorClass","result","value","to","be","a","that","contains","testInitials","_a","innerHTMLText","innerHTML","src","srcImage","style","backgroundImage","jest","shape","avatarBorderRadius","window","getComputedStyle","getPropertyValue","background","sizeClass","evilSpan","querySelectorAll"],"mappings":"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"}