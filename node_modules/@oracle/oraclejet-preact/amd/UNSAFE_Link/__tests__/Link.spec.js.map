{"version":3,"file":"Link.spec.js","sources":["../../../../src/UNSAFE_Link/__tests__/Link.spec.tsx"],"sourcesContent":["import { Fragment } from 'preact';\nimport { render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { Link } from '../Link';\nimport userEvent from '@testing-library/user-event';\n\ndescribe('Test Link component', () => {\n  it('render', () => {\n    const content = render(<Link href=\"#\">Link</Link>);\n    const link = content.queryByText('Link', { exact: false });\n    expect(link).not.null;\n  });\n\n  it('applies default CSS classes', async function () {\n    const content = render(<Link href=\"#\">Link</Link>);\n    const firstElement = content.container.firstElementChild;\n    // @ts-ignore\n    const classList = firstElement.classList;\n    expect(classList.length).equals(2);\n  });\n\n  it('variant selected', async function () {\n    const content = render(\n      <Link href=\"#\" variant=\"primary\">\n        Link\n      </Link>\n    );\n    const firstElement = content.container.firstElementChild;\n    // @ts-ignore\n    const classList = firstElement.classList;\n    expect(classList.length).equals(3);\n  });\n\n  it('event', async function () {\n    let count = 0;\n    const increment = () => count++;\n    const content = render(\n      <Link href=\"#\" onClick={increment}>\n        Link\n      </Link>\n    );\n    const link = await content.findByText('Link');\n    expect(link).not.null;\n    userEvent.click(link);\n    expect(count).equals(1);\n  });\n\n  it('has single label id as aria-labelledby attribute value', async () => {\n    const labelId = 'sampleLabelId';\n    const content = render(\n      <Fragment>\n        <p id={labelId}></p>\n        <Link href=\"#\" ariaLabelledBy={labelId}>\n          Link\n        </Link>\n      </Fragment>\n    );\n    const link = await content.findByText('Link');\n    const ariaLabelledBy = link.getAttribute('aria-labelledBy');\n    expect(ariaLabelledBy).to.equal(labelId);\n  });\n\n  it('has multiple label ids as aria-labelledby attribute value', async () => {\n    const labelId1 = 'sampleLabelId1';\n    const labelId2 = 'sampleLabelId2';\n    const content = render(\n      <Fragment>\n        <p id={labelId1}></p>\n        <p id={labelId2}></p>\n        <Link href=\"#\" ariaLabelledBy={`${labelId1} ${labelId2}`}>\n          Link\n        </Link>\n      </Fragment>\n    );\n    const link = await content.findByText('Link');\n    const ariaLabelledBy = link.getAttribute('aria-labelledBy');\n    expect(ariaLabelledBy).to.equal(`${labelId1} ${labelId2}`);\n  });\n\n  it('has accessible aria-label and aria-describedby values', async () => {\n    const testAccessibleLabel = 'TEST-ACCESSIBLE-LABEL';\n    const testAriaDescribedBy = 'TEST ARIA-DESCRIBED-BY';\n    const content = render(\n      <Fragment>\n        <Link href=\"#\" accessibleLabel={testAccessibleLabel} ariaDescribedBy={testAriaDescribedBy}>\n          Link\n        </Link>\n      </Fragment>\n    );\n    const link = await content.findByText('Link');\n    expect(link.getAttribute('aria-label')).equals(testAccessibleLabel);\n    const describedByIds = link.getAttribute('aria-describedby')?.split(' ');\n    if (describedByIds && describedByIds.length > 0) {\n      expect(describedByIds[0]).equals('TEST');\n      expect(describedByIds[1]).equals('ARIA-DESCRIBED-BY');\n    }\n  });\n});\n"],"names":["describe","it","link","render","_jsx","jsx","Link","Object","assign","href","children","queryByText","exact","expect","not","null","async","classList","container","firstElementChild","length","equals","variant","count","content","onClick","findByText","userEvent","click","labelId","_jsxs","Fragment","id","ariaLabelledBy","getAttribute","to","equal","labelId1","labelId2","jsxs","testAccessibleLabel","accessibleLabel","ariaDescribedBy","describedByIds","_a","split"],"mappings":"+WAMAA,SAAS,sBAAuB,KAC9BC,GAAG,SAAU,KACX,MACMC,EADUC,EAAMA,OAACC,EAACC,IAAAC,EAAIA,KAACC,OAAAC,OAAA,CAAAC,KAAK,KAAe,CAAAC,SAAA,WAC5BC,YAAY,OAAQ,CAAEC,OAAO,IAClDC,EAAAA,OAAOX,GAAMY,IAAIC,OAGnBd,GAAG,8BAA+Be,iBAChC,MAGMC,EAHUd,EAAMA,OAACC,EAACC,IAAAC,EAAIA,KAACC,OAAAC,OAAA,CAAAC,KAAK,KAAe,CAAAC,SAAA,WACpBQ,UAAUC,kBAERF,UAC/BJ,EAAAA,OAAOI,EAAUG,QAAQC,OAAO,KAGlCpB,GAAG,mBAAoBe,iBACrB,MAOMC,EAPUd,EAAAA,OACdC,EAAAA,IAACE,EAAAA,KAAKC,OAAAC,OAAA,CAAAC,KAAK,IAAIa,QAAQ,WAAS,CAAAZ,SAAA,WAILQ,UAAUC,kBAERF,UAC/BJ,EAAAA,OAAOI,EAAUG,QAAQC,OAAO,KAGlCpB,GAAG,QAASe,iBACV,IAAIO,EAAQ,EACZ,MACMC,EAAUrB,EAAAA,OACdC,EAAAA,IAACE,EAAAA,KAAKC,OAAAC,OAAA,CAAAC,KAAK,IAAIgB,QAFC,IAAMF,KAEW,CAAAb,SAAA,WAI7BR,QAAasB,EAAQE,WAAW,QACtCb,EAAAA,OAAOX,GAAMY,IAAIC,KACjBY,UAAUC,MAAM1B,GAChBW,EAAAA,OAAOU,GAAOF,OAAO,KAGvBpB,GAAG,yDAA0De,UAC3D,MAAMa,EAAU,gBACVL,EAAUrB,EAAMA,OACpB2B,OAACC,EAAAA,SAAQ,CAAArB,SAAA,CACPN,EAAGC,IAAA,IAAA,CAAA2B,GAAIH,IACPzB,MAACE,OAAIC,OAAAC,OAAA,CAACC,KAAK,IAAIwB,eAAgBJ,GAAO,CAAAnB,SAAA,cAMpCuB,SADaT,EAAQE,WAAW,SACVQ,aAAa,mBACzCrB,EAAAA,OAAOoB,GAAgBE,GAAGC,MAAMP,KAGlC5B,GAAG,4DAA6De,UAC9D,MAAMqB,EAAW,iBACXC,EAAW,iBACXd,EAAUrB,EAAAA,OACd2B,EAAAS,KAACR,EAAQA,SACP,CAAArB,SAAA,CAAAN,EAAAA,IAAA,IAAA,CAAG4B,GAAIK,IACPjC,EAAGC,IAAA,IAAA,CAAA2B,GAAIM,IACPlC,EAAAA,IAACE,EAAAA,KAAKC,OAAAC,OAAA,CAAAC,KAAK,IAAIwB,eAAgB,GAAGI,KAAYC,KAEvC,CAAA5B,SAAA,cAILuB,SADaT,EAAQE,WAAW,SACVQ,aAAa,mBACzCrB,SAAOoB,GAAgBE,GAAGC,MAAM,GAAGC,KAAYC,OAGjDrC,GAAG,wDAAyDe,gBAC1D,MAAMwB,EAAsB,wBAEtBhB,EAAUrB,EAAAA,OACdC,EAAAC,IAAC0B,WACC,CAAArB,SAAAN,EAAAA,IAACE,EAAIA,KAAAC,OAAAC,OAAA,CAACC,KAAK,IAAIgC,gBAAiBD,EAAqBE,gBAH7B,0BAGiE,CAAAhC,SAAA,aAKvFR,QAAasB,EAAQE,WAAW,QACtCb,EAAMA,OAACX,EAAKgC,aAAa,eAAeb,OAAOmB,GAC/C,MAAMG,EAAwD,QAAvCC,EAAA1C,EAAKgC,aAAa,2BAAqB,IAAAU,OAAA,EAAAA,EAAAC,MAAM,KAChEF,GAAkBA,EAAevB,OAAS,IAC5CP,EAAMA,OAAC8B,EAAe,IAAItB,OAAO,QACjCR,EAAMA,OAAC8B,EAAe,IAAItB,OAAO"}