{"version":3,"file":"MessageToast.spec.js","sources":["../../../../src/UNSAFE_MessageToast/__tests__/MessageToast.spec.tsx"],"sourcesContent":["import { act, render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { ComponentProps } from 'preact';\nimport { useCallback, useState } from 'preact/hooks';\nimport Sinon from 'sinon';\nimport { RootEnvironment, RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { MessageToast } from '../MessageToast';\n\ntype MessageToastProps = ComponentProps<typeof MessageToast>;\n\ndescribe('Test MessageToast component', () => {\n  let env: Partial<RootEnvironment>;\n\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n\n  beforeEach(async () => {\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    env =\n      env ||\n      ({\n        translations: { '@oracle/oraclejet-preact': translations }\n      } as Partial<RootEnvironment>);\n\n    // use fake matchMedia in jest\n    if (!window.matchMedia ?? jest) {\n      Object.defineProperty(window, 'matchMedia', {\n        writable: true,\n        value: jest.fn().mockImplementation((query) => ({\n          matches: false,\n          media: query,\n          onchange: null,\n          addListener: jest.fn(), // deprecated\n          removeListener: jest.fn(), // deprecated\n          addEventListener: jest.fn(),\n          removeEventListener: jest.fn(),\n          dispatchEvent: jest.fn()\n        }))\n      });\n    }\n  });\n\n  it('renders data correctly', async () => {\n    const data: MessageToastProps['data'] = [\n      { key: 0, data: { summary: 'primary text', detail: 'data attribute', severity: 'error' } },\n      { key: 1, data: { summary: 'primary text', detail: 'data attribute', severity: 'error' } },\n      { key: 2, data: { summary: 'primary text', detail: 'data attribute', severity: 'error' } }\n    ];\n    const { queryAllByRole, queryAllByText } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} />\n      </RootEnvironmentProvider>\n    );\n    const messages = queryAllByRole('alert');\n\n    expect(messages.length).equals(3);\n\n    const summaries = queryAllByText('primary text', { exact: true });\n    const details = queryAllByText('data attribute', { exact: true });\n\n    expect(messages[0].contains(summaries[0])).be.true;\n    expect(messages[0].contains(details[0])).be.true;\n\n    expect(messages[1].contains(summaries[1])).be.true;\n    expect(messages[1].contains(details[1])).be.true;\n\n    expect(messages[2].contains(summaries[2])).be.true;\n    expect(messages[2].contains(details[2])).be.true;\n  });\n\n  it('renders nothing when no data', async () => {\n    const { queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={[]} />\n      </RootEnvironmentProvider>\n    );\n    const messages = queryAllByRole('alert');\n\n    expect(messages.length).equals(0);\n  });\n\n  it('renders as error by default', async () => {\n    const data = [{ key: 0, data: { summary: 'test toast' } }];\n    const { container, queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(1);\n\n    const errorTitle = container.querySelector('[title=\"Error\"]');\n    expect(errorTitle).not.be.null;\n  });\n\n  it('renders as warning message', async () => {\n    const data = [\n      { key: 0, data: { severity: 'warning', summary: 'test toast' } }\n    ] as MessageToastProps['data'];\n    const { container, queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(1);\n\n    const warningTitle = container.querySelector('[title=\"Warning\"]');\n    expect(warningTitle).not.be.null;\n  });\n\n  it('renders as confirmation message', async () => {\n    const data = [\n      { key: 0, data: { severity: 'confirmation', summary: 'test toast' } }\n    ] as MessageToastProps['data'];\n    const { container, queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(1);\n\n    const confirmationTitle = container.querySelector('[title=\"Confirmation\"]');\n    expect(confirmationTitle).not.be.null;\n  });\n\n  it('renders as info message', async () => {\n    const data = [\n      { key: 0, data: { severity: 'info', summary: 'test toast' } }\n    ] as MessageToastProps['data'];\n    const { container, queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(1);\n\n    const infoTitle = container.querySelector('[title=\"Info\"]');\n    expect(infoTitle).not.be.null;\n  });\n\n  it('renders as neutral message', async () => {\n    const data = [\n      { key: 0, data: { severity: 'none', summary: 'test toast' } }\n    ] as MessageToastProps['data'];\n    const { queryAllByRole, queryByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(1);\n\n    const severityIcon = queryByRole('img');\n    expect(severityIcon).be.null;\n  });\n\n  it('renders as close button by default', async () => {\n    const data = [{ key: 0, data: { summary: 'test toast' } }] as MessageToastProps['data'];\n    const { queryAllByRole, queryByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(1);\n\n    const closeButton = queryByRole('button');\n    expect(closeButton).not.be.null;\n  });\n\n  it('renders without close button', async () => {\n    const data = [\n      { key: 0, data: { closeAffordance: 'off', summary: 'test toast' } }\n    ] as MessageToastProps['data'];\n    const { queryAllByRole, queryByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(1);\n\n    const closeButton = queryByRole('button');\n    expect(closeButton).be.null;\n  });\n\n  it('renders custom detail content for all messages', async () => {\n    const data = [\n      { key: 0, data: { summary: 'test toast', detail: 'detail text' } },\n      { key: 1, data: { summary: 'test toast', detail: 'detail text' } },\n      { key: 2, data: { summary: 'test toast', detail: 'detail text' } }\n    ] as MessageToastProps['data'];\n    const { queryAllByRole, queryAllByText } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast\n          data={data}\n          renderers={{ customRenderer: () => <div>Custom text</div> }}\n          detailRendererKey=\"customRenderer\"\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    // default rendering should not have happened\n    const detailText = queryAllByText('detail text');\n    expect(detailText).be.empty;\n\n    // all the messages should have used custom rendering\n    const customText = queryAllByText('Custom text');\n    expect(customText.length).equals(3);\n  });\n\n  it('passes correct argument for custom detail renderers', async () => {\n    type MessageRenderer = Exclude<MessageToastProps['renderers'], undefined>[string];\n    const data = [\n      { key: 0, data: { summary: 'test toast', detail: 'detail text' } },\n      { key: 1, data: { summary: 'test toast', detail: 'detail text' } },\n      { key: 2, data: { summary: 'test toast', detail: 'detail text' } }\n    ] as MessageToastProps['data'];\n    const customRenderer = Sinon.spy<MessageRenderer>(() => <div>Custom text</div>);\n    const { queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast\n          data={data}\n          renderers={{ customRenderer }}\n          detailRendererKey=\"customRenderer\"\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    // renderer should be called thrice for each render\n    expect(customRenderer.callCount).equals(6);\n    expect(\n      customRenderer.calledWith(\n        Sinon.match({\n          data: data[0].data,\n          key: data[0].key\n        })\n      )\n    ).be.true;\n    expect(\n      customRenderer.calledWith(\n        Sinon.match({\n          data: data[1].data,\n          key: data[1].key\n        })\n      )\n    ).be.true;\n    expect(\n      customRenderer.calledWith(\n        Sinon.match({\n          data: data[2].data,\n          key: data[2].key\n        })\n      )\n    ).be.true;\n  });\n\n  it('renders custom detail content for selective messages', async () => {\n    const data = [\n      { key: 0, data: { summary: 'test toast', detail: 'detail text' } },\n      { key: 1, data: { summary: 'test toast', detail: 'detail text' } },\n      { key: 2, data: { summary: 'test toast', detail: 'detail text' } }\n    ] as MessageToastProps['data'];\n    const detailRendererKey: MessageToastProps['detailRendererKey'] = ({ key }) => {\n      if (key === 1) {\n        return 'customRenderer';\n      }\n      return undefined;\n    };\n    const { queryAllByRole, queryAllByText } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast\n          data={data}\n          renderers={{ customRenderer: () => <div>Custom text</div> }}\n          detailRendererKey={detailRendererKey}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    // default rendering should have happened for 2 messages\n    const detailText = queryAllByText('detail text');\n    expect(detailText.length).equals(2);\n\n    // custom rendering should have happened for 1 message\n    const customText = queryAllByText('Custom text');\n    expect(customText.length).equals(1);\n  });\n\n  it('passes correct argument for detailRendererKey', async () => {\n    // eslint-disable-next-line\n    type MessageDetailRendererKeyFn = Extract<MessageToastProps['detailRendererKey'], Function>;\n    const data = [\n      { key: 0, data: { summary: 'test toast', detail: 'detail text' } },\n      { key: 1, data: { summary: 'test toast', detail: 'detail text' } },\n      { key: 2, data: { summary: 'test toast', detail: 'detail text' } }\n    ] as MessageToastProps['data'];\n    const detailRendererKey = Sinon.spy<MessageDetailRendererKeyFn>(({ key }) => {\n      if (key === 1) {\n        return 'customRenderer';\n      }\n      return undefined;\n    });\n    const { queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast\n          data={data}\n          renderers={{ customRenderer: () => <div>Custom text</div> }}\n          detailRendererKey={detailRendererKey}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    // renderer should be called thrice for each render\n    expect(detailRendererKey.callCount).equals(6);\n    expect(detailRendererKey.calledWith(Sinon.match(data[0]))).be.true;\n    expect(detailRendererKey.calledWith(Sinon.match(data[1]))).be.true;\n    expect(detailRendererKey.calledWith(Sinon.match(data[2]))).be.true;\n  });\n\n  it('renders custom start icon content for all messages', async () => {\n    const data = [\n      { key: 0, data: { summary: 'test toast', severity: 'error' } },\n      { key: 1, data: { summary: 'test toast', severity: 'warning' } },\n      { key: 2, data: { summary: 'test toast', severity: 'none' } }\n    ] as MessageToastProps['data'];\n    const { queryAllByRole, queryAllByText } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast\n          data={data}\n          renderers={{ customRenderer: () => <div>X</div> }}\n          iconRendererKey=\"customRenderer\"\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    // default rendering should not have happened\n    const defaultIcons = queryAllByRole('img');\n    expect(defaultIcons).be.empty;\n\n    // all the messages should have used custom rendering\n    const customIcon = queryAllByText('X');\n    expect(customIcon.length).equals(3);\n  });\n\n  it('passes correct argument for custom icon renderers', async () => {\n    type MessageRenderer = Exclude<MessageToastProps['renderers'], undefined>[string];\n    const data = [\n      { key: 0, data: { summary: 'test toast', severity: 'error' } },\n      { key: 1, data: { summary: 'test toast', severity: 'warning' } },\n      { key: 2, data: { summary: 'test toast', severity: 'none' } }\n    ] as MessageToastProps['data'];\n    const customRenderer = Sinon.spy<MessageRenderer>(() => <div>X</div>);\n    const { queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} renderers={{ customRenderer }} iconRendererKey=\"customRenderer\" />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    // renderer should be called thrice for each render\n    expect(customRenderer.callCount).equals(6);\n    expect(\n      customRenderer.calledWith(\n        Sinon.match({\n          data: data[0].data,\n          key: data[0].key\n        })\n      )\n    ).be.true;\n    expect(\n      customRenderer.calledWith(\n        Sinon.match({\n          data: data[1].data,\n          key: data[1].key\n        })\n      )\n    ).be.true;\n    expect(\n      customRenderer.calledWith(\n        Sinon.match({\n          data: data[2].data,\n          key: data[2].key\n        })\n      )\n    ).be.true;\n  });\n\n  it('renders custom start icon content for selective messages', async () => {\n    const data = [\n      { key: 0, data: { summary: 'test toast', severity: 'error' } },\n      { key: 1, data: { summary: 'test toast', severity: 'warning' } },\n      { key: 2, data: { summary: 'test toast', severity: 'none' } }\n    ] as MessageToastProps['data'];\n    const iconRendererKey: MessageToastProps['iconRendererKey'] = ({ key }) => {\n      if (key === 1) {\n        return 'customRenderer';\n      }\n      return undefined;\n    };\n    const { queryAllByRole, queryAllByText } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast\n          data={data}\n          renderers={{ customRenderer: () => <div>X</div> }}\n          iconRendererKey={iconRendererKey}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    // default rendering should have happened for 2 messages\n    // since we have `none` for 1 message, we should have only one icon.\n    const icon = queryAllByRole('img');\n    expect(icon.length).equals(1);\n\n    // custom rendering should have happened for 1 message\n    const customIcon = queryAllByText('X');\n    expect(customIcon.length).equals(1);\n  });\n\n  it('passes correct argument for iconRendererKey', async () => {\n    // eslint-disable-next-line\n    type MessageIconRendererKeyFn = Extract<MessageToastProps['iconRendererKey'], Function>;\n    const data = [\n      { key: 0, data: { summary: 'test toast', severity: 'error' } },\n      { key: 1, data: { summary: 'test toast', severity: 'warning' } },\n      { key: 2, data: { summary: 'test toast', severity: 'none' } }\n    ] as MessageToastProps['data'];\n    const iconRendererKey = Sinon.spy<MessageIconRendererKeyFn>(({ key }) => {\n      if (key === 1) {\n        return 'customRenderer';\n      }\n      return undefined;\n    });\n    const { queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast\n          data={data}\n          renderers={{ customRenderer: () => <div>X</div> }}\n          iconRendererKey={iconRendererKey}\n        />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    // renderer should be called thrice for each render\n    expect(iconRendererKey.callCount).equals(6);\n    expect(iconRendererKey.calledWith(Sinon.match(data[0]))).be.true;\n    expect(iconRendererKey.calledWith(Sinon.match(data[1]))).be.true;\n    expect(iconRendererKey.calledWith(Sinon.match(data[2]))).be.true;\n  });\n});\n\ndescribe('Test MessageToast interaction', () => {\n  function UncontrolledMessageToast({\n    data: propData,\n    onClose: propOnClose,\n    ...props\n  }: MessageToastProps) {\n    const [data, setData] = useState(propData);\n    const onClose = useCallback<Exclude<typeof propOnClose, undefined>>(\n      (args) => {\n        // When no close handler is provided, close the corresponding\n        // message. Otherwise let the provided handler do things.\n        if (propOnClose === undefined) {\n          setData(data.filter((i) => i.key !== args.key));\n          return;\n        }\n        propOnClose.call(null, args);\n      },\n      [propOnClose]\n    );\n\n    console.log(data);\n\n    return <MessageToast {...props} data={data} onClose={onClose} />;\n  }\n\n  let env: Partial<RootEnvironment>;\n\n  beforeEach(async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    env = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    } as Partial<RootEnvironment>;\n\n    if (typeof jest !== 'undefined') {\n      jest.useFakeTimers();\n    }\n  });\n\n  // TODO: fix removal issue (for some reason the test cannot be made to wait for the removal of the message)\n  // it works in the UI, but not in the test\n  xit('closes messages correctly', async () => {\n    const data: MessageToastProps['data'] = [\n      { key: 0, data: { summary: 'first message', detail: 'data attribute', severity: 'error' } },\n      { key: 1, data: { summary: 'second message', detail: 'data attribute', severity: 'error' } },\n      { key: 2, data: { summary: 'third message', detail: 'data attribute', severity: 'error' } }\n    ];\n    const { queryAllByRole, queryByText } = render(\n      <RootEnvironmentProvider environment={env}>\n        <UncontrolledMessageToast data={data} />\n      </RootEnvironmentProvider>\n    );\n\n    let messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    // close the second message\n    let closeButton = queryAllByRole('button')[1];\n    expect(closeButton).not.be.null;\n\n    act(() => closeButton.click());\n    // TODO: wait for animations when it is implemented\n\n    messages = queryAllByRole('alert');\n    expect(messages.length).equals(2);\n\n    // second message should be closed\n    expect(queryByText('second message')).be.null;\n\n    // close the now second message\n    closeButton = queryAllByRole('button')[1];\n    expect(closeButton).not.be.null;\n\n    act(() => closeButton.click());\n    // TODO: wait for animations when it is implemented\n\n    messages = queryAllByRole('alert');\n    expect(messages.length).equals(1);\n\n    // originally third message should be closed\n    expect(queryByText('third message')).be.null;\n  });\n\n  it('has correct close button payload', async () => {\n    const data: MessageToastProps['data'] = [\n      { key: 0, data: { summary: 'first message', detail: 'data attribute', severity: 'error' } },\n      { key: 1, data: { summary: 'second message', detail: 'data attribute', severity: 'error' } },\n      { key: 2, data: { summary: 'third message', detail: 'data attribute', severity: 'error' } }\n    ];\n    const onClose = Sinon.spy();\n    const { queryAllByRole } = render(\n      <RootEnvironmentProvider environment={env}>\n        <MessageToast data={data} onClose={onClose} />\n      </RootEnvironmentProvider>\n    );\n\n    const messages = queryAllByRole('alert');\n    expect(messages.length).equals(3);\n\n    const closeButtons = queryAllByRole('button');\n    expect(closeButtons.length).equals(3);\n\n    act(() => closeButtons[0].click());\n    expect(onClose.calledOnceWith(Sinon.match(data[0]))).be.true;\n    onClose.resetHistory();\n\n    act(() => closeButtons[1].click());\n    expect(onClose.calledOnceWith(Sinon.match(data[1]))).be.true;\n    onClose.resetHistory();\n\n    act(() => closeButtons[2].click());\n    expect(onClose.calledOnceWith(Sinon.match(data[2]))).be.true;\n    onClose.resetHistory();\n  });\n\n  // test only in jest environment\n  if (typeof jest !== 'undefined') {\n    // TODO: fix removal issue (for some reason the test cannot be made to wait for the removal of the message)\n    // it works in the UI, but not in the test\n    xit('auto dismiss works with default', async () => {\n      const data: MessageToastProps['data'] = [\n        {\n          key: 'message1',\n          data: {\n            severity: 'info',\n            summary: 'Info Text',\n            detail: 'Auto Timeout On',\n            closeAffordance: 'off',\n            autoTimeout: 'on'\n          }\n        },\n        {\n          key: 'message3',\n          data: {\n            severity: 'error',\n            summary: 'Error Text',\n            detail: 'Auto Timeout Off',\n            closeAffordance: 'on',\n            autoTimeout: 'off'\n          }\n        }\n      ];\n\n      const { queryAllByRole } = render(\n        <RootEnvironmentProvider environment={env}>\n          <UncontrolledMessageToast data={data} />\n        </RootEnvironmentProvider>\n      );\n\n      const messages = queryAllByRole('alert');\n      expect(messages.length).equals(2);\n\n      // advanced past default\n      await act(async () => {\n        jest?.advanceTimersByTime(6000);\n      });\n\n      // rerender(\n      //   <RootEnvironmentProvider environment={env}>\n      //     <UncontrolledMessageToast data={data} />\n      //   </RootEnvironmentProvider>\n      // );\n\n      const messagesSecond = queryAllByRole('alert');\n      expect(messagesSecond.length).equals(1);\n    });\n\n    // TODO: fix removal issue (for some reason the test cannot be made to wait for the removal of the message)\n    // it works in the UI, but not in the test\n    xit('auto dismiss works with user defined', async () => {\n      const data: MessageToastProps['data'] = [\n        {\n          key: 'message1',\n          data: {\n            severity: 'info',\n            summary: 'Info Text',\n            detail: 'Auto Timeout On',\n            closeAffordance: 'off',\n            autoTimeout: 10000\n          }\n        },\n        {\n          key: 'message3',\n          data: {\n            severity: 'error',\n            summary: 'Error Text',\n            detail: 'Auto Timeout Off',\n            closeAffordance: 'on',\n            autoTimeout: 'off'\n          }\n        }\n      ];\n\n      const { queryAllByRole, rerender } = render(\n        <RootEnvironmentProvider environment={env}>\n          <UncontrolledMessageToast data={data} />\n        </RootEnvironmentProvider>\n      );\n\n      const messages = queryAllByRole('alert');\n      expect(messages.length).equals(2);\n\n      // advanced past default\n      await act(async () => {\n        jest?.advanceTimersByTime(11000);\n      });\n\n      rerender(\n        <RootEnvironmentProvider environment={env}>\n          <UncontrolledMessageToast data={data} />\n        </RootEnvironmentProvider>\n      );\n\n      const messagesSecond = queryAllByRole('alert');\n      expect(messagesSecond.length).equals(1);\n    });\n  }\n\n  if (typeof jest !== 'undefined') {\n    afterEach(() => {\n      jest.runOnlyPendingTimers();\n      jest.useRealTimers();\n    });\n  }\n});\n"],"names":["describe","env","locale","matchTranslationBundle","Set","beforeEach","async","default","translations","__variableDynamicImportRuntime0__","window","matchMedia","_a","jest","Object","defineProperty","writable","value","fn","mockImplementation","query","matches","media","onchange","addListener","removeListener","addEventListener","removeEventListener","dispatchEvent","it","queryAllByRole","queryAllByText","render","_jsx","jsx","RootEnvironmentProvider","assign","environment","children","MessageToast","data","key","summary","detail","severity","messages","expect","length","equals","summaries","exact","details","contains","be","true","container","errorTitle","querySelector","not","null","warningTitle","confirmationTitle","infoTitle","queryByRole","severityIcon","closeButton","closeAffordance","renderers","customRenderer","detailRendererKey","detailText","empty","customText","Sinon","spy","callCount","calledWith","match","iconRendererKey","defaultIcons","customIcon","icon","UncontrolledMessageToast","propData","onClose","propOnClose","props","__rest","setData","useState","useCallback","args","undefined","call","filter","i","console","log","__variableDynamicImportRuntime1__","useFakeTimers","xit","queryByText","act","click","closeButtons","calledOnceWith","resetHistory","autoTimeout","advanceTimersByTime","messagesSecond","rerender","afterEach","runOnlyPendingTimers","useRealTimers"],"mappings":"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"}