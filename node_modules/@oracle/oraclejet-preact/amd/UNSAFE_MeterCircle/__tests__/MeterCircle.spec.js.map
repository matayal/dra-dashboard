{"version":3,"file":"MeterCircle.spec.js","sources":["../../../../src/UNSAFE_MeterCircle/__tests__/MeterCircle.spec.tsx"],"sourcesContent":["import { render, waitFor, fireEvent } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { MeterCircle } from '../MeterCircle';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\nimport userEvent from '@testing-library/user-event';\nimport { getClientHints } from '../../utils/PRIVATE_clientHints';\n\nconst DATATIP_TEST_TIMEOUT = 3000;\nconst DATATIP_TEXT = 'datatip_text';\ndescribe('Test MeterCircle component', () => {\n  it('render', async function () {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <MeterCircle value={20} min={0} max={100} accessibleLabel=\"ariaText\" />\n      </RootEnvironmentProvider>\n    );\n    const initials = await content.getAllByLabelText('ariaText');\n    expect(initials).not.null;\n  });\n\n  it('applies Linaria CSS classes', async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <MeterCircle value={20} min={0} max={100} />\n      </RootEnvironmentProvider>\n    );\n    const firstElement = content.container.firstElementChild;\n    // @ts-ignore\n    const classList = firstElement.classList;\n    expect(classList.length).equals(1);\n  });\n});\n\ndescribe('Test Meter Circle ARIA props', () => {\n  it('Test default aria properties of Meter Circle', async function () {\n    const content = render(<MeterCircle value={20} />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement.getAttribute('aria-valuemax')).equals('100');\n    expect(firstElement.getAttribute('aria-valuenow')).equals('20');\n    expect(firstElement.getAttribute('aria-valuemin')).equals('0');\n    expect(firstElement.getAttribute('aria-valuetext')).equals('20 ');\n    expect(firstElement.getAttribute('aria-describedby')).not.null;\n    expect(firstElement.getAttribute('aria-labelledby')).null;\n    expect(firstElement.getAttribute('aria-label')).null;\n  });\n\n  it('Test value, role, min and max property of Meter Circle', async function () {\n    const content = render(<MeterCircle value={100} max={150} min={50} />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement.getAttribute('role')).equals('slider');\n    expect(firstElement.getAttribute('aria-valuemax')).equals('150');\n    expect(firstElement.getAttribute('aria-valuenow')).equals('100');\n    expect(firstElement.getAttribute('aria-valuemin')).equals('50');\n    expect(firstElement.getAttribute('aria-valuetext')).equals('100 ');\n  });\n\n  it('Test accessiblelabel property of Meter Circle', async function () {\n    const testAccessibleLabel = 'TEST-ACCESSIBLE-LABEL';\n    const content = render(<MeterCircle value={20} accessibleLabel={testAccessibleLabel} />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement.getAttribute('aria-label')).equals(testAccessibleLabel);\n  });\n\n  it('Test describedBy attribute of Meter Circle', async function () {\n    const testAriaDescribedBy = 'TEST ARIA-DESCRIBED-BY';\n    const content = render(<MeterCircle value={20} ariaDescribedBy={testAriaDescribedBy} />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    const meterDescribedBy = firstElement.getAttribute('aria-describedby');\n    const describedByIds = meterDescribedBy?.split(' ');\n    expect(describedByIds?.length).equals(3); // including aria describedby for default datatip\n    expect(describedByIds ? describedByIds[0] : '').equals('TEST');\n    expect(describedByIds ? describedByIds[1] : '').equals('ARIA-DESCRIBED-BY');\n  });\n\n  it('Test labelledby attribute of Meter Circle', async function () {\n    const testAriaLabeledBy = 'TEST ARIA-LABELLED-BY';\n    const content = render(<MeterCircle value={20} ariaLabelledBy={testAriaLabeledBy} />);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement.getAttribute('aria-labelledby')).equals(testAriaLabeledBy);\n  });\n});\n\ndescribe('Test \"Size\" property of Meter Circle ', () => {\n  if (typeof jest === 'undefined') {\n    it('Test default size', async function () {\n      const content = render(<MeterCircle value={5} />);\n      const firstElement = content.container.firstElementChild as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Default size is correct'\n      ).to.be.equal('196px');\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('width'),\n        'Default size is correct'\n      ).to.be.equal('196px');\n    });\n\n    it('Test \"size = large\"', async function () {\n      const content = render(<MeterCircle value={5} size=\"lg\" />);\n      const firstElement = content.container.firstElementChild as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Large size is correct'\n      ).to.be.equal('196px');\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('width'),\n        'Large size is correct'\n      ).to.be.equal('196px');\n    });\n\n    it('Test \"size = medium\"', async function () {\n      const content = render(<MeterCircle value={20} size=\"md\" />);\n      const firstElement = content.container.firstElementChild as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Medium size is correct'\n      ).to.be.equal('96px');\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('width'),\n        'Medium size is correct'\n      ).to.be.equal('96px');\n    });\n\n    it('Test \"size = small\"', async function () {\n      const content = render(<MeterCircle value={20} size=\"sm\" />);\n      const firstElement = content.container.firstElementChild as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Small size is correct'\n      ).to.be.equal('56px');\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Small size is correct'\n      ).to.be.equal('56px');\n    });\n  }\n});\n\ndescribe('Test \"Track\"  attribute of Meter Circle ', () => {\n  if (typeof jest === 'undefined') {\n    it('Test default track of Meter Circle', async function () {\n      const content = render(<MeterCircle value={20} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.firstElementChild as HTMLElement;\n      expect(firstElement.style.backgroundColor).equals('');\n    });\n\n    it('Test Track not present in Meter Circle when isTrackRendered is set to false', async function () {\n      const content = render(<MeterCircle value={20} isTrackRendered={false} trackColor=\"red\" />);\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.firstElementChild as HTMLElement;\n      expect(firstElement.style.borderColor).equals('transparent');\n    });\n\n    it('Test isTrackRendered and traclColor attribute with value as true in Meter Circle', async function () {\n      const content = render(<MeterCircle value={20} isTrackRendered={true} trackColor={'red'} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.firstElementChild as HTMLElement;\n      expect(firstElement.style.borderColor).equals('red');\n    });\n  }\n});\n\ndescribe('Test \"indicatorSize\" and indicatorColor attribute of Meter Circle ', () => {\n  if (typeof jest === 'undefined') {\n    it('Test default indicatorSize of Meter Circle', async function () {\n      const content = render(<MeterCircle value={20} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[1] as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'height'\n      ).to.be.equal('196px');\n    });\n\n    it('Test indicatorSize of Meter Circle', async function () {\n      const content = render(<MeterCircle value={20} indicatorSize={0.5} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[1] as HTMLElement;\n      expect(firstElement.style.height).contains('0.5');\n    });\n\n    it('Test default indicatorColor of Meter Circle', async function () {\n      const content = render(<MeterCircle value={20} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[1] as HTMLElement;\n      expect(firstElement.style.borderColor).equals('');\n    });\n\n    it('Test indicatorColor of Meter Circle', async function () {\n      const content = render(<MeterCircle value={20} indicatorColor={'red'} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[1] as HTMLElement;\n      expect(firstElement.style.borderColor).equals('red');\n    });\n  }\n});\n\ndescribe('Test angleExtent,startAngle, center content, innerBound and OuterBound property of Meter Circle ', () => {\n  if (typeof jest === 'undefined') {\n    it('Test for Right Half semi Meter Circle ', async function () {\n      const content = render(<MeterCircle value={12} angleExtent={180} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.firstElementChild as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Height of semi circle'\n      ).to.be.equal('196px');\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('width'),\n        'Width of semi circle'\n      ).to.be.equal('98px');\n    });\n\n    it('Test for Top Half semi Meter Circle ', async function () {\n      const content = render(<MeterCircle value={12} angleExtent={180} startAngle={180} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Height of semi circle'\n      ).to.be.equal('98px');\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('width'),\n        'Width of semi circle'\n      ).to.be.equal('196px');\n    });\n\n    it('Test for Bottom Half semi Meter Circle ', async function () {\n      const content = render(<MeterCircle value={12} angleExtent={180} startAngle={0} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Height of semi circle'\n      ).to.be.equal('98px');\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('width'),\n        'Width of semi circle'\n      ).to.be.equal('196px');\n    });\n\n    it('Test for Left Half semi Meter Circle ', async function () {\n      const content = render(<MeterCircle value={12} angleExtent={180} startAngle={270} />);\n      const firstElement = content.container.firstElementChild?.firstElementChild as HTMLElement;\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('height'),\n        'Height of semi circle'\n      ).to.be.equal('196px');\n      expect(\n        window.getComputedStyle(firstElement).getPropertyValue('width'),\n        'Width of semi circle'\n      ).to.be.equal('98px');\n    });\n\n    it('Test Center content', async function () {\n      const content = render(\n        <MeterCircle value={20}>\n          {() => {\n            return <div>Sales in USD</div>;\n          }}\n        </MeterCircle>\n      );\n      const centerText = await content.findByText('Sales in USD');\n      expect(centerText).not.null;\n    });\n\n    it('Test inner and outer bounds', async function () {\n      const content = render(\n        <MeterCircle value={20}>\n          {(context) => {\n            return (\n              <div\n                id=\"centerContentDiv\"\n                data-iBx={context.innerBounds.x}\n                data-iBy={context.innerBounds.y}\n                data-oBx={context.outerBounds.x}\n                data-oBy={context.outerBounds.y}>\n                <div>Sales in USD</div>\n              </div>\n            );\n          }}\n        </MeterCircle>\n      );\n      const centerContent = content.container.firstElementChild?.firstElementChild?.childNodes[2]\n        .firstChild as HTMLElement;\n      expect(Number(centerContent.dataset['ibx'])).closeTo(37, 1);\n      expect(Number(centerContent.dataset['iby'])).closeTo(37, 1);\n      expect(centerContent.dataset['obx']).equals('12');\n      expect(centerContent.dataset['oby']).equals('12');\n    });\n  }\n});\n\nif (typeof jest === 'undefined') {\n  describe('Test to check the rendering of reference lines', () => {\n    it('Multiple Reference Line to check reference line color value', async () => {\n      const content = render(\n        <MeterCircle\n          value={10}\n          referenceLines={[\n            {\n              value: 40,\n              color: '#3A6E96'\n            },\n            {\n              value: 50,\n              color: '#3A6E96'\n            },\n            {\n              value: 70,\n              color: 'red'\n            },\n            {\n              value: 60\n            }\n          ]}\n        />\n      );\n      const innerElement4 = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[4] as HTMLElement;\n      expect(innerElement4.style.backgroundColor).equals('red');\n      const innerElement5 = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[5] as HTMLElement;\n      expect(innerElement5.style.backgroundColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-reference-object-line-color)'\n      );\n      expect(innerElement5.style.borderBottom).equals(\n        '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-dvt-contrast-line-color)'\n      );\n    });\n    it('Multiple Reference Line to check reference line color enums', async () => {\n      const content = render(\n        <MeterCircle\n          value={10}\n          referenceLines={[\n            {\n              value: 40,\n              color: 'danger'\n            },\n            {\n              value: 50,\n              color: 'warning'\n            },\n            {\n              value: 70,\n              color: 'success'\n            },\n            {\n              value: 60\n            }\n          ]}\n        />\n      );\n      const innerElement2 = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[2] as HTMLElement;\n      expect(innerElement2.style.backgroundColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-threshold-danger)'\n      );\n\n      const innerElement3 = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[3] as HTMLElement;\n      expect(innerElement3.style.backgroundColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-threshold-warning)'\n      );\n\n      const innerElement4 = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[4] as HTMLElement;\n      expect(innerElement4.style.backgroundColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-threshold-success)'\n      );\n      const innerElement5 = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[5] as HTMLElement;\n      expect(innerElement5.style.backgroundColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-reference-object-line-color)'\n      );\n      expect(innerElement5.style.borderBottom).equals(\n        '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-dvt-contrast-line-color)'\n      );\n    });\n    it('Reference Line', async () => {\n      const content = render(\n        <MeterCircle\n          value={10}\n          referenceLines={[\n            {\n              value: 40,\n              color: '#3A6E96'\n            }\n          ]}\n        />\n      );\n      const innerElement = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[1] as HTMLElement;\n      expect(innerElement.classList.length).equals(3);\n    });\n  });\n  describe('Test Threshold attribute of Meter Circle ', () => {\n    it('Test threshold color enums in Meter Circle when thresholdDisplay is set to all', async function () {\n      const content = render(\n        <MeterCircle\n          value={20}\n          thresholdDisplay=\"all\"\n          thresholds={[\n            {\n              max: 33,\n              color: 'danger'\n            },\n            {\n              max: 65,\n              color: 'warning'\n            },\n            {\n              max: 100,\n              color: 'success'\n            }\n          ]}\n        />\n      );\n\n      const firstElementSecondChild = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[1] as HTMLElement;\n      expect(firstElementSecondChild.style.borderColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-threshold-danger)'\n      );\n      const firstElementThirdChild = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[2] as HTMLElement;\n      expect(firstElementThirdChild.style.borderColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-threshold-warning)'\n      );\n      const firstElementFourthChild = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[3] as HTMLElement;\n      expect(firstElementFourthChild.style.borderColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-threshold-success)'\n      );\n    });\n    it('Test threshold color enums in Meter Circle when thresholdDisplay is set to track', async function () {\n      const content = render(\n        <MeterCircle\n          value={20}\n          thresholdDisplay=\"track\"\n          thresholds={[\n            {\n              max: 33,\n              color: 'danger'\n            },\n            {\n              max: 65,\n              color: 'warning'\n            },\n            {\n              max: 100,\n              color: 'success'\n            }\n          ]}\n        />\n      );\n\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[0] as HTMLElement;\n      expect(firstElement.style.borderColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-threshold-danger)'\n      );\n    });\n    it('Test threshold color enums in Meter Circle when thresholdDisplay is set to indicator', async function () {\n      const content = render(\n        <MeterCircle\n          value={20}\n          thresholdDisplay=\"indicator\"\n          thresholds={[\n            {\n              max: 33,\n              color: 'danger'\n            },\n            {\n              max: 65,\n              color: 'warning'\n            },\n            {\n              max: 100,\n              color: 'success'\n            }\n          ]}\n        />\n      );\n\n      const firstElement = content.container.firstElementChild?.firstElementChild\n        ?.childNodes[1] as HTMLElement;\n      expect(firstElement.style.borderColor).equals(\n        'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-threshold-danger)'\n      );\n    });\n  });\n}\ndescribe('Mouse Interaction', () => {\n  const clientHints = getClientHints();\n  if (typeof jest === 'undefined' && clientHints.browser === 'chrome') {\n    mocha.timeout(DATATIP_TEST_TIMEOUT);\n    it(\n      'check default datatip correctly triggered with mouse interaction',\n      async () => {\n        const content = render(\n          <RootEnvironmentProvider>\n            <MeterCircle value={30} />\n          </RootEnvironmentProvider>\n        );\n        const MeterCircleElement = content.container.firstElementChild\n          ?.firstElementChild as HTMLElement;\n        userEvent.hover(MeterCircleElement);\n        await waitFor(() => checkDatatipText('30'), {\n          timeout: DATATIP_TEST_TIMEOUT\n        });\n      },\n      DATATIP_TEST_TIMEOUT\n    );\n\n    it(\n      'check datatip correctly triggered with mouse interaction',\n      async () => {\n        const content = render(\n          <RootEnvironmentProvider>\n            <MeterCircle value={30} datatip={DATATIP_TEXT} />\n          </RootEnvironmentProvider>\n        );\n        const MeterCircleElement = content.container.firstElementChild\n          ?.firstElementChild as HTMLElement;\n        userEvent.hover(MeterCircleElement);\n        await waitFor(() => checkDatatipText(DATATIP_TEXT), {\n          timeout: DATATIP_TEST_TIMEOUT\n        });\n      },\n      DATATIP_TEST_TIMEOUT\n    );\n\n    it('check datatip when set to null, correctly triggered with mouse interaction', async () => {\n      const content = render(\n        <RootEnvironmentProvider>\n          <MeterCircle value={30} datatip={null} />\n        </RootEnvironmentProvider>\n      );\n      const MeterCircleElement = content.container.firstElementChild\n        ?.firstElementChild as HTMLElement;\n      userEvent.hover(MeterCircleElement);\n      await waitFor(\n        () => {\n          const targetElements = document.querySelectorAll('[role=\"tooltip\"]');\n          expect(targetElements.length).equals(0);\n        },\n        {\n          timeout: DATATIP_TEST_TIMEOUT\n        }\n      );\n    });\n\n    it('check onCommit event is correctly triggered with mouse interaction', async () => {\n      const clickListenerObj = { clicked: false };\n      const handleOnCommit = (detail: any) => {\n        if (detail.value != null) clickListenerObj.clicked = true;\n      };\n      const content = render(\n        <RootEnvironmentProvider>\n          <MeterCircle value={20} onCommit={handleOnCommit} />\n        </RootEnvironmentProvider>\n      );\n      const MeterCircleElement = content.container.firstElementChild\n        ?.firstElementChild as HTMLElement;\n      fireEvent.pointerUp(MeterCircleElement);\n      await waitFor(() => expect(clickListenerObj.clicked).equals(true));\n    });\n\n    // it('check onInput event is correctly triggered with mouse interaction', async () => {\n    //   const clickListenerObj = { clicked: false };\n    //   const handleOnInput = (detail: any) => {\n    //     if (detail.value != null) clickListenerObj.clicked = true;\n    //   };\n    //   const content = render(\n    //     <RootEnvironmentProvider>\n    //       <MeterCircle value={20} onInput={handleOnInput} />\n    //     </RootEnvironmentProvider>\n    //   );\n    //   const MeterCircleElement = content.container.firstElementChild\n    //     ?.firstElementChild as HTMLElement;\n    //   fireEvent.pointerDown(MeterCircleElement);\n    //   await waitFor(() => expect(clickListenerObj.clicked).equals(true));\n    // });\n  }\n});\n\ndescribe('Mouse Interaction in RTL mode', () => {\n  const clientHints = getClientHints();\n  if (typeof jest === 'undefined' && clientHints.browser === 'chrome') {\n    mocha.timeout(DATATIP_TEST_TIMEOUT);\n    it(\n      'check default datatip correctly triggered with mouse interaction',\n      async () => {\n        const env: Partial<RootEnvironment> = {\n          user: { direction: 'rtl' }\n        };\n        const content = render(\n          <RootEnvironmentProvider environment={env}>\n            <MeterCircle value={30} />\n          </RootEnvironmentProvider>\n        );\n        const MeterCircleElement = content.container.firstElementChild\n          ?.firstElementChild as HTMLElement;\n        userEvent.hover(MeterCircleElement);\n        await waitFor(() => checkDatatipText('30'), {\n          timeout: DATATIP_TEST_TIMEOUT\n        });\n      },\n      DATATIP_TEST_TIMEOUT\n    );\n\n    it(\n      'check datatip correctly triggered with mouse interaction',\n      async () => {\n        const env: Partial<RootEnvironment> = {\n          user: { direction: 'rtl' }\n        };\n        const content = render(\n          <RootEnvironmentProvider environment={env}>\n            <MeterCircle value={30} datatip={DATATIP_TEXT} />\n          </RootEnvironmentProvider>\n        );\n        const MeterCircleElement = content.container.firstElementChild\n          ?.firstElementChild as HTMLElement;\n        userEvent.hover(MeterCircleElement);\n        await waitFor(() => checkDatatipText(DATATIP_TEXT), {\n          timeout: DATATIP_TEST_TIMEOUT\n        });\n      },\n      DATATIP_TEST_TIMEOUT\n    );\n\n    it('check datatip when set to null, correctly triggered with mouse interaction', async () => {\n      const env: Partial<RootEnvironment> = {\n        user: { direction: 'rtl' }\n      };\n      const content = render(\n        <RootEnvironmentProvider environment={env}>\n          <MeterCircle value={30} datatip={null} />\n        </RootEnvironmentProvider>\n      );\n      const MeterCircleElement = content.container.firstElementChild\n        ?.firstElementChild as HTMLElement;\n      userEvent.hover(MeterCircleElement);\n      await waitFor(\n        () => {\n          const targetElements = document.querySelectorAll('[role=\"tooltip\"]');\n          expect(targetElements.length).equals(0);\n        },\n        {\n          timeout: DATATIP_TEST_TIMEOUT\n        }\n      );\n    });\n\n    it('check onCommit event is correctly triggered with mouse interaction', async () => {\n      const env: Partial<RootEnvironment> = {\n        user: { direction: 'rtl' }\n      };\n      const clickListenerObj = { clicked: false };\n      const handleOnCommit = (detail: { value: number | null }) => {\n        if (detail.value != null) clickListenerObj.clicked = true;\n      };\n      const content = render(\n        <RootEnvironmentProvider environment={env}>\n          <MeterCircle value={20} onCommit={handleOnCommit} />\n        </RootEnvironmentProvider>\n      );\n      const MeterCircleElement = content.container.firstElementChild\n        ?.firstElementChild as HTMLElement;\n      fireEvent.pointerUp(MeterCircleElement);\n      await waitFor(() => expect(clickListenerObj.clicked).equals(true));\n    });\n\n    // it('check onInput event is correctly triggered with mouse interaction', async () => {\n    //   const env: Partial<RootEnvironment> = {\n    //     user: { direction: 'rtl' }\n    //   };\n    //   const clickListenerObj = { clicked: false };\n    //   const handleOnInput = (detail: any) => {\n    //     if (detail.value != null) clickListenerObj.clicked = true;\n    //   };\n    //   const content = render(\n    //     <RootEnvironmentProvider environment={env}>\n    //       <MeterCircle value={20} onInput={handleOnInput} />\n    //     </RootEnvironmentProvider>\n    //   );\n    //   const MeterCircleElement = content.container.firstElementChild\n    //     ?.firstElementChild as HTMLElement;\n    //   fireEvent.pointerDown(MeterCircleElement);\n    //   await waitFor(() => expect(clickListenerObj.clicked).equals(true));\n    // });\n  }\n});\n\ndescribe('Keyboard Interaction', () => {\n  const clientHints = getClientHints();\n  if (typeof jest === 'undefined' && clientHints.browser === 'chrome') {\n    mocha.timeout(DATATIP_TEST_TIMEOUT);\n    it(\n      'check default datatip correctly triggered with keyboard interaction',\n      async () => {\n        render(\n          <RootEnvironmentProvider>\n            <MeterCircle value={30} />\n          </RootEnvironmentProvider>\n        );\n        userEvent.tab();\n        await waitFor(() => checkDatatipText('30'), {\n          timeout: DATATIP_TEST_TIMEOUT\n        });\n      },\n      DATATIP_TEST_TIMEOUT\n    );\n\n    it(\n      'check datatip correctly triggered with keyboard interaction',\n      async () => {\n        render(\n          <RootEnvironmentProvider>\n            <MeterCircle value={30} datatip={DATATIP_TEXT} />\n          </RootEnvironmentProvider>\n        );\n        userEvent.tab();\n        await waitFor(() => checkDatatipText(DATATIP_TEXT), {\n          timeout: DATATIP_TEST_TIMEOUT\n        });\n      },\n      DATATIP_TEST_TIMEOUT\n    );\n\n    it('check onInput event is correctly triggered with keyboard interaction', async () => {\n      const calledListenerObj = { called: false };\n      const handleOnInput = (detail: any) => {\n        if (detail.value != null) calledListenerObj.called = true;\n      };\n      render(\n        <RootEnvironmentProvider>\n          <MeterCircle value={20} onInput={handleOnInput} />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      await waitFor(() => expect(calledListenerObj.called).equals(true));\n    });\n\n    it('check onInput is correctly triggered with HOME key by keyboard interaction ', async () => {\n      let inputValue: number | undefined = 2;\n      render(\n        <RootEnvironmentProvider>\n          <MeterCircle\n            value={inputValue}\n            onInput={(detail) => {\n              inputValue = detail.value;\n            }}\n          />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[HOME]');\n      await waitFor(() => expect(inputValue).equals(0));\n    });\n\n    it('check onInput is correctly triggered with END key by keyboard interaction ', async () => {\n      let inputValue: number | undefined = 2;\n      render(\n        <RootEnvironmentProvider>\n          <MeterCircle\n            value={inputValue}\n            onInput={(detail) => {\n              inputValue = detail.value;\n            }}\n          />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[END]');\n      await waitFor(() => expect(inputValue).equals(100));\n    });\n\n    it('check onCommit event is correctly triggered with keyboard interaction', async () => {\n      const calledListenerObj = { called: false };\n      const handleOnCommit = (detail: { value: number | null }) => {\n        if (detail.value != null) calledListenerObj.called = true;\n      };\n      render(\n        <RootEnvironmentProvider>\n          <MeterCircle value={20} onCommit={handleOnCommit} />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[ENTER]');\n      await waitFor(() => expect(calledListenerObj.called).equals(true));\n    });\n\n    it('check step is correctly triggered using down arrow key with keyboard interaction', async () => {\n      let inputValue: number | undefined = 2;\n      render(\n        <RootEnvironmentProvider>\n          <MeterCircle\n            step={0.5}\n            value={inputValue}\n            onInput={(detail) => {\n              inputValue = detail.value;\n            }}\n          />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[ARROWDOWN]');\n      await waitFor(() => expect(inputValue).equals(1.5));\n    });\n\n    it('check step is correctly triggered using right arrow key with keyboard interaction', async () => {\n      let inputValue: number | undefined = 2;\n      render(\n        <RootEnvironmentProvider>\n          <MeterCircle\n            step={0.5}\n            value={inputValue}\n            onInput={(detail) => {\n              inputValue = detail.value;\n            }}\n          />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[ARROWRIGHT]');\n      await waitFor(() => expect(inputValue).equals(2.5));\n    });\n    it('check step is correctly triggered using up arrow key with keyboard interaction', async () => {\n      let inputValue: number | undefined = 2;\n      render(\n        <RootEnvironmentProvider>\n          <MeterCircle\n            step={0.5}\n            value={inputValue}\n            onInput={(detail) => {\n              inputValue = detail.value;\n            }}\n          />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[ARROWUP]');\n      await waitFor(() => expect(inputValue).equals(2.5));\n    });\n    it('check step is correctly triggered using left arrow key with keyboard interaction', async () => {\n      let inputValue: number | undefined = 2;\n      render(\n        <RootEnvironmentProvider>\n          <MeterCircle\n            step={0.5}\n            value={inputValue}\n            onInput={(detail) => {\n              inputValue = detail.value;\n            }}\n          />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[ARROWLEFT]');\n      await waitFor(() => expect(inputValue).equals(1.5));\n    });\n  }\n});\n\ndescribe('Keyboard Interaction in RTL mode', () => {\n  const clientHints = getClientHints();\n  if (typeof jest === 'undefined' && clientHints.browser === 'chrome') {\n    mocha.timeout(DATATIP_TEST_TIMEOUT);\n    it(\n      'check default datatip correctly triggered with keyboard interaction',\n      async () => {\n        const env: Partial<RootEnvironment> = {\n          user: { direction: 'rtl' }\n        };\n        render(\n          <RootEnvironmentProvider environment={env}>\n            <MeterCircle value={30} />\n          </RootEnvironmentProvider>\n        );\n        userEvent.tab();\n        await waitFor(() => checkDatatipText('30'), {\n          timeout: DATATIP_TEST_TIMEOUT\n        });\n      },\n      DATATIP_TEST_TIMEOUT\n    );\n\n    it(\n      'check datatip correctly triggered with keyboard interaction',\n      async () => {\n        const env: Partial<RootEnvironment> = {\n          user: { direction: 'rtl' }\n        };\n        render(\n          <RootEnvironmentProvider environment={env}>\n            <MeterCircle value={30} datatip={DATATIP_TEXT} />\n          </RootEnvironmentProvider>\n        );\n        userEvent.tab();\n        await waitFor(() => checkDatatipText(DATATIP_TEXT), {\n          timeout: DATATIP_TEST_TIMEOUT\n        });\n      },\n      DATATIP_TEST_TIMEOUT\n    );\n\n    it('check onInput event is correctly triggered with keyboard interaction', async () => {\n      const env: Partial<RootEnvironment> = {\n        user: { direction: 'rtl' }\n      };\n      const calledListenerObj = { called: false };\n      const handleOnInput = (detail: any) => {\n        if (detail.value != null) calledListenerObj.called = true;\n      };\n      render(\n        <RootEnvironmentProvider environment={env}>\n          <MeterCircle value={20} onInput={handleOnInput} />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      await waitFor(() => expect(calledListenerObj.called).equals(true));\n    });\n\n    it('check onInput is correctly triggered with HOME key by keyboard interaction ', async () => {\n      const env: Partial<RootEnvironment> = {\n        user: { direction: 'rtl' }\n      };\n      let inputValue: number | undefined = 2;\n      render(\n        <RootEnvironmentProvider environment={env}>\n          <MeterCircle\n            value={inputValue}\n            onInput={(detail) => {\n              inputValue = detail.value;\n            }}\n          />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[HOME]');\n      await waitFor(() => expect(inputValue).equals(0));\n    });\n\n    it('check onInput is correctly triggered with END key by keyboard interaction ', async () => {\n      const env: Partial<RootEnvironment> = {\n        user: { direction: 'rtl' }\n      };\n      let inputValue: number | undefined = 2;\n      render(\n        <RootEnvironmentProvider environment={env}>\n          <MeterCircle\n            value={inputValue}\n            onInput={(detail) => {\n              inputValue = detail.value;\n            }}\n          />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[END]');\n      await waitFor(() => expect(inputValue).equals(100));\n    });\n\n    it('check onCommit event is correctly triggered with keyboard interaction', async () => {\n      const env: Partial<RootEnvironment> = {\n        user: { direction: 'rtl' }\n      };\n      const calledListenerObj = { called: false };\n      const handleOnCommit = (detail: { value: number | null }) => {\n        if (detail.value != null) calledListenerObj.called = true;\n      };\n      render(\n        <RootEnvironmentProvider environment={env}>\n          <MeterCircle value={20} onCommit={handleOnCommit} />\n        </RootEnvironmentProvider>\n      );\n      userEvent.tab();\n      userEvent.keyboard('[ENTER]');\n      await waitFor(() => expect(calledListenerObj.called).equals(true));\n    });\n  }\n});\n\nconst checkDatatipText = (content: string) => {\n  const targetElements = document.querySelectorAll('[role=\"tooltip\"]');\n  const targetElementItem = targetElements.item(0) as HTMLElement;\n  const tooltipContainer = targetElementItem?.firstElementChild as HTMLElement;\n  expect(tooltipContainer?.style.opacity).not.equals('');\n  expect(tooltipContainer?.style.opacity).not.equals('0');\n  expect(tooltipContainer?.style.maxHeight).not.equals('');\n  expect(tooltipContainer?.style.maxHeight).not.equals('0');\n  const innerHTML = tooltipContainer?.firstElementChild?.innerHTML;\n  expect(innerHTML).equals(content);\n};\n\n/*const getClientX = (element: HTMLElement) => {\n  const dim = element.getBoundingClientRect();\n  const clientX = dim.x + dim.width / 2;\n  return clientX;\n};\n*/\n"],"names":["DATATIP_TEST_TIMEOUT","DATATIP_TEXT","describe","it","async","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","env","content","render","_jsx","RootEnvironmentProvider","Object","assign","environment","children","jsx","MeterCircle","value","min","max","accessibleLabel","initials","getAllByLabelText","expect","not","null","__variableDynamicImportRuntime1__","classList","container","firstElementChild","length","equals","firstElement","getAttribute","testAccessibleLabel","meterDescribedBy","ariaDescribedBy","describedByIds","split","testAriaLabeledBy","ariaLabelledBy","jest","window","getComputedStyle","getPropertyValue","to","be","equal","size","_b","_a","style","backgroundColor","isTrackRendered","trackColor","borderColor","childNodes","indicatorSize","height","contains","indicatorColor","angleExtent","startAngle","centerText","findByText","centerContent","context","id","innerBounds","x","y","outerBounds","firstChild","Number","dataset","closeTo","referenceLines","color","innerElement4","innerElement5","_d","_c","borderBottom","innerElement2","innerElement3","_f","_e","_h","_g","innerElement","thresholdDisplay","thresholds","firstElementSecondChild","firstElementThirdChild","firstElementFourthChild","clientHints","getClientHints","browser","mocha","timeout","MeterCircleElement","userEvent","hover","waitFor","checkDatatipText","datatip","targetElements","document","querySelectorAll","clickListenerObj","clicked","onCommit","detail","fireEvent","pointerUp","user","direction","tab","calledListenerObj","called","onInput","inputValue","keyboard","step","targetElementItem","item","tooltipContainer","opacity","maxHeight","innerHTML"],"mappings":"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"}