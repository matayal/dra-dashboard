{"version":3,"file":"ReadonlyTextFieldInput.spec.js","sources":["../../../../src/UNSAFE_TextField/__tests__/ReadonlyTextFieldInput.spec.tsx"],"sourcesContent":["import { cleanup, render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { ReadonlyTextFieldInput } from '../ReadonlyTextFieldInput';\nimport { TabbableModeContext } from '../../hooks/UNSAFE_useTabbableMode';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment/EnvironmentProvider';\nimport type { RootEnvironment } from '../../UNSAFE_Environment/EnvironmentContext';\n\ndescribe('ReadonlyTextFieldInput - TabbableModeContext', () => {\n  let env: Partial<RootEnvironment>;\n  beforeEach(async function () {\n    env = env ?? (await getEnvironmentContext());\n  });\n\n  it('as div, TabbableModeContext not provided', async () => {\n    const value = 'sample text';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <ReadonlyTextFieldInput as=\"div\" value={value} />\n      </RootEnvironmentProvider>\n    );\n\n    const divElement = await content.findByText(value);\n    expect(divElement).not.to.be.null;\n\n    const tabindex = divElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('0');\n  });\n\n  it('as div, TabbableModeContext isTabbable=true', async () => {\n    const value = 'sample text';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: true }}>\n          <ReadonlyTextFieldInput as=\"div\" value={value} />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const divElement = await content.findByText(value);\n    expect(divElement).not.to.be.null;\n\n    const tabindex = divElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('0');\n  });\n\n  it('as div, TabbableModeContext isTabbable=false', async () => {\n    const value = 'sample text';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: false }}>\n          <ReadonlyTextFieldInput as=\"div\" value={value} />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const divElement = await content.findByText(value);\n    expect(divElement).not.to.be.null;\n\n    const tabindex = divElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('-1');\n  });\n\n  it('as input, TabbableModeContext not provided', async () => {\n    const value = 'sample text';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <ReadonlyTextFieldInput as=\"input\" type=\"text\" value={value} />\n      </RootEnvironmentProvider>\n    );\n\n    const inputElement = await content.findByDisplayValue(value);\n    expect(inputElement).not.to.be.null;\n\n    const tabindex = inputElement?.getAttribute('tabindex');\n    expect(tabindex).to.be.null;\n  });\n\n  it('as input, TabbableModeContext isTabbable=true', async () => {\n    const value = 'sample text';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: true }}>\n          <ReadonlyTextFieldInput as=\"input\" type=\"text\" value={value} />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const inputElement = await content.findByDisplayValue(value);\n    expect(inputElement).not.to.be.null;\n\n    const tabindex = inputElement?.getAttribute('tabindex');\n    expect(tabindex).to.be.null;\n  });\n\n  it('as input, TabbableModeContext isTabbable=false', async () => {\n    const value = 'sample text';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: false }}>\n          <ReadonlyTextFieldInput as=\"input\" type=\"text\" value={value} />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const inputElement = await content.findByDisplayValue(value);\n    expect(inputElement).not.to.be.null;\n\n    const tabindex = inputElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('-1');\n  });\n\n  it('as textarea, TabbableModeContext not provided', async () => {\n    const value = 'sample text';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <ReadonlyTextFieldInput as=\"textarea\" value={value} />\n      </RootEnvironmentProvider>\n    );\n\n    const textareaElement = await content.findByDisplayValue(value);\n    expect(textareaElement).not.to.be.null;\n\n    const tabindex = textareaElement?.getAttribute('tabindex');\n    expect(tabindex).to.be.null;\n  });\n\n  it('as textarea, TabbableModeContext isTabbable=true', async () => {\n    const value = 'sample text';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: true }}>\n          <ReadonlyTextFieldInput as=\"textarea\" value={value} />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const textareaElement = await content.findByDisplayValue(value);\n    expect(textareaElement).not.to.be.null;\n\n    const tabindex = textareaElement?.getAttribute('tabindex');\n    expect(tabindex).to.be.null;\n  });\n\n  it('as textarea, TabbableModeContext isTabbable=false', async () => {\n    const value = 'sample text';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: false }}>\n          <ReadonlyTextFieldInput as=\"textarea\" value={value} />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const textareaElement = await content.findByDisplayValue(value);\n    expect(textareaElement).not.to.be.null;\n\n    const tabindex = textareaElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('-1');\n  });\n\n  afterEach(cleanup);\n});\n\nasync function getEnvironmentContext() {\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n  const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n  return {\n    translations: { '@oracle/oraclejet-preact': translations }\n  } as Partial<RootEnvironment>;\n}\n"],"names":["describe","env","beforeEach","async","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","getEnvironmentContext","it","value","content","render","_jsx","RootEnvironmentProvider","Object","assign","environment","children","ReadonlyTextFieldInput","as","divElement","findByText","expect","not","to","be","null","tabindex","getAttribute","equal","jsx","TabbableModeContext","Provider","isTabbable","type","inputElement","findByDisplayValue","textareaElement","afterEach","cleanup"],"mappings":"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"}