{"version":3,"file":"TextFieldInput.spec.js","sources":["../../../../src/UNSAFE_TextField/__tests__/TextFieldInput.spec.tsx"],"sourcesContent":["import { cleanup, render } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { TextFieldInput } from '../TextFieldInput';\nimport { FormFieldContext } from '../../hooks/UNSAFE_useFormFieldContext';\nimport { TabbableModeContext } from '../../hooks/UNSAFE_useTabbableMode';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment/EnvironmentProvider';\nimport type { RootEnvironment } from '../../UNSAFE_Environment/EnvironmentContext';\n\ndescribe('TextFieldInput - translations', () => {\n  it('aria-label is populated with translated loading string', async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <FormFieldContext.Provider value={{ isLoading: true }}>\n          <TextFieldInput ariaLabel=\"sample aria label\" value=\"sample text\" />\n        </FormFieldContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const inputElement = container.querySelector('input');\n    expect(inputElement).not.to.be.null;\n\n    const ariaLabel = inputElement?.getAttribute('aria-label');\n    expect(ariaLabel).to.equal(translations.formControl_loading());\n  });\n\n  it('aria-label is populated with provided aria-label', async () => {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const ariaLabelText = 'sample aria label';\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <FormFieldContext.Provider value={{ isLoading: false }}>\n          <TextFieldInput ariaLabel={ariaLabelText} value=\"sample text\" />\n        </FormFieldContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const inputElement = container.querySelector('input');\n    expect(inputElement).not.to.be.null;\n\n    const ariaLabel = inputElement?.getAttribute('aria-label');\n    expect(ariaLabel).to.equal(ariaLabelText);\n  });\n\n  afterEach(cleanup);\n});\n\ndescribe('TextFieldInput - TabbableModeContext', () => {\n  let env: Partial<RootEnvironment>;\n  beforeEach(async function () {\n    env = env ?? (await getEnvironmentContext());\n  });\n\n  it('as input, TabbableModeContext not provided', async () => {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TextFieldInput value=\"sample text\" />\n      </RootEnvironmentProvider>\n    );\n\n    const inputElement = container.querySelector('input');\n    expect(inputElement).not.to.be.null;\n\n    const tabindex = inputElement?.getAttribute('tabindex');\n    expect(tabindex).to.be.null;\n  });\n\n  it('as input, TabbableModeContext isTabbable=true', async () => {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: true }}>\n          <TextFieldInput value=\"sample text\" />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const inputElement = container.querySelector('input');\n    expect(inputElement).not.to.be.null;\n\n    const tabindex = inputElement?.getAttribute('tabindex');\n    expect(tabindex).to.be.null;\n  });\n\n  it('as input, TabbableModeContext isTabbable=false', async () => {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: false }}>\n          <TextFieldInput value=\"sample text\" />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const inputElement = container.querySelector('input');\n    expect(inputElement).not.to.be.null;\n\n    const tabindex = inputElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('-1');\n  });\n\n  it('as textarea, TabbableModeContext not provided', async () => {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TextFieldInput as=\"textarea\" value=\"sample text\" />\n      </RootEnvironmentProvider>\n    );\n\n    const textareaElement = container.querySelector('textarea');\n    expect(textareaElement).not.to.be.null;\n\n    const tabindex = textareaElement?.getAttribute('tabindex');\n    expect(tabindex).to.be.null;\n  });\n\n  it('as textarea, TabbableModeContext isTabbable=true', async () => {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: true }}>\n          <TextFieldInput as=\"textarea\" value=\"sample text\" />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const textareaElement = container.querySelector('textarea');\n    expect(textareaElement).not.to.be.null;\n\n    const tabindex = textareaElement?.getAttribute('tabindex');\n    expect(tabindex).to.be.null;\n  });\n\n  it('as textarea, TabbableModeContext isTabbable=false', async () => {\n    const { container } = render(\n      <RootEnvironmentProvider environment={env}>\n        <TabbableModeContext.Provider value={{ isTabbable: false }}>\n          <TextFieldInput as=\"textarea\" value=\"sample text\" />\n        </TabbableModeContext.Provider>\n      </RootEnvironmentProvider>\n    );\n\n    const textareaElement = container.querySelector('textarea');\n    expect(textareaElement).not.to.be.null;\n\n    const tabindex = textareaElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('-1');\n  });\n\n  afterEach(cleanup);\n});\n\nasync function getEnvironmentContext() {\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n  const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n  return {\n    translations: { '@oracle/oraclejet-preact': translations }\n  } as Partial<RootEnvironment>;\n}\n"],"names":["describe","it","async","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","env","container","render","_jsx","RootEnvironmentProvider","Object","assign","environment","children","FormFieldContext","Provider","value","isLoading","jsx","TextFieldInput","ariaLabel","inputElement","querySelector","expect","not","to","be","null","getAttribute","equal","formControl_loading","__variableDynamicImportRuntime1__","ariaLabelText","afterEach","cleanup","beforeEach","__variableDynamicImportRuntime2__","getEnvironmentContext","tabindex","TabbableModeContext","isTabbable","as","textareaElement"],"mappings":"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"}