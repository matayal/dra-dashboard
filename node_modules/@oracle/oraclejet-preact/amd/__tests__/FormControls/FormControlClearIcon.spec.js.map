{"version":3,"file":"FormControlClearIcon.spec.js","sources":["../../../../src/__tests__/FormControls/FormControlClearIcon.spec.tsx"],"sourcesContent":["import { act, cleanup, render } from '@testing-library/preact';\nimport { useState } from 'preact/hooks';\nimport { expect } from 'chai';\nimport { InputPassword } from '../../UNSAFE_InputPassword';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { ComponentProps } from 'preact';\nimport { InputText } from '../../UNSAFE_InputText';\n\nconst noOp = () => {};\n\ntype DemoInputPasswordProps = Pick<\n  ComponentProps<typeof InputPassword>,\n  'hasClearIcon' | 'label' | 'isDisabled' | 'isReadonly'\n>;\n\nfunction DemoInputPassword({\n  hasClearIcon,\n  isDisabled,\n  isReadonly,\n  label\n}: DemoInputPasswordProps) {\n  const [value, setValue] = useState('hello');\n  return (\n    <>\n      <InputPassword\n        hasClearIcon={hasClearIcon}\n        isDisabled={isDisabled}\n        isReadonly={isReadonly}\n        label={label}\n        onInput={noOp}\n        value={value}\n      />\n      <button class=\"testclickmebutton\" onClick={() => setValue('goodbye')}>\n        Click me\n      </button>\n    </>\n  );\n}\n\ntype DemoInputTextProps = Pick<\n  ComponentProps<typeof InputText>,\n  'hasClearIcon' | 'label' | 'isDisabled' | 'isReadonly'\n>;\n\nfunction DemoInputText({ hasClearIcon, isDisabled, isReadonly, label }: DemoInputTextProps) {\n  const [value, setValue] = useState('hello');\n\n  return (\n    <>\n      <InputText\n        hasClearIcon={hasClearIcon}\n        isDisabled={isDisabled}\n        isReadonly={isReadonly}\n        label={label}\n        onInput={noOp}\n        value={value}\n      />\n      <button class=\"testclickmebutton\" onClick={() => setValue('goodbye')}>\n        Click me\n      </button>\n    </>\n  );\n}\n\nasync function getEnvironmentContext() {\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n  const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n  return {\n    translations: { '@oracle/oraclejet-preact': translations }\n  } as Partial<RootEnvironment>;\n}\n\ntype ComponentsWithClearIcon = {\n  name: 'InputPassword' | 'InputText';\n  component: typeof DemoInputPassword | typeof DemoInputText;\n};\nconst componentWithClearIconList: ComponentsWithClearIcon[] = [\n  { name: 'InputPassword', component: DemoInputPassword },\n  { name: 'InputText', component: DemoInputText }\n];\n\ndescribe('FormControlClearIcon.spec', () => {\n  let env: Partial<RootEnvironment>;\n  beforeEach(async function () {\n    env = await getEnvironmentContext();\n  });\n\n  componentWithClearIconList.forEach(function (compObj) {\n    // conditionally\n\n    it(`${compObj.name} hasClearIcon 'conditionally', no value, focusin/focusout`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"conditionally\" label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const inputElement = container.querySelector('input')!;\n      inputElement.value = '';\n\n      act(() => {\n        inputElement.focus();\n      });\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      let clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon found').not.null;\n\n      // focus out\n      const buttonElement = container.querySelector('.testclickmebutton') as HTMLButtonElement;\n      act(() => {\n        buttonElement.focus();\n      });\n      clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found').null;\n    });\n\n    it(`${compObj.name} hasClearIcon 'conditionally', with value, focusin/focusout`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"conditionally\" label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const inputElement = container.querySelector('input')!;\n      expect(inputElement.value).equal('hello');\n\n      act(() => {\n        inputElement.focus();\n      });\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      let clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon found').not.null;\n\n      // focus out\n      const buttonElement = container.querySelector('.testclickmebutton') as HTMLButtonElement;\n      act(() => {\n        buttonElement.focus();\n      });\n      clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found').null;\n    });\n\n    // hover/hover out\n    it(`${compObj.name} hasClearIcon 'conditionally', with value, hover/blur`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"conditionally\" label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const inputElement = container.querySelector('input')!;\n      expect(inputElement.value).equal('hello');\n\n      act(() => {\n        inputElement.focus();\n      });\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      let clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon found').not.null;\n\n      act(() => {\n        inputElement.blur();\n      });\n\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found').null;\n    });\n\n    // always\n\n    it(`${compObj.name} hasClearIcon 'always', check icon`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"always\" label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const inputElement = container.querySelector('input')!;\n      expect(inputElement.value).equal('hello');\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon found').not.null;\n    });\n\n    it(`${compObj.name} hasClearIcon 'always', with value, focusin/focusout`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"always\" label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const inputElement = container.querySelector('input')!;\n      expect(inputElement.value).equal('hello');\n\n      // set value to empty string.\n      inputElement.value = '';\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon found even if no value is in the field').not.null;\n    });\n\n    it(`${compObj.name} hasClearIcon 'always', isReadonly true`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"always\" isReadonly={true} label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found for readonly component').null;\n    });\n\n    it(`${compObj.name} hasClearIcon 'always', isDisabled true`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"always\" isDisabled={true} label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found for disabled component').null;\n    });\n\n    it(`${compObj.name} hasClearIcon 'always', focusin`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"always\" label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const inputElement = container.querySelector('input')!;\n      expect(inputElement.value).equal('hello');\n\n      act(() => {\n        inputElement.focus();\n      });\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon found, so this should not be null').not.null;\n    });\n\n    // never\n    it(`${compObj.name} hasClearIcon 'never', check icon`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"never\" label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const inputElement = container.querySelector('input')!;\n      expect(inputElement.value).equal('hello');\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found').null;\n    });\n\n    it(`${compObj.name} hasClearIcon 'never', focusin`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"never\" label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const inputElement = container.querySelector('input')!;\n\n      act(() => {\n        inputElement.focus();\n      });\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found').null;\n    });\n\n    it(`${compObj.name} hasClearIcon 'never', isReadonly comp`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"never\" isReadonly={true} label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found').null;\n    });\n\n    it(`${compObj.name} hasClearIcon 'never', isDisabled comp`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component hasClearIcon=\"never\" isDisabled={true} label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found').null;\n    });\n\n    // default\n    it(`${compObj.name} hasClearIcon not specified, focus comp`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component label={label} />\n          <button class=\"testclickmebutton\">Click me</button>\n        </RootEnvironmentProvider>\n      );\n\n      const inputElement = container.querySelector('input')!;\n\n      act(() => {\n        inputElement.focus();\n      });\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon not found').null;\n    });\n  });\n\n  afterEach(cleanup);\n});\n"],"names":["noOp","async","getEnvironmentContext","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","componentWithClearIconList","name","component","hasClearIcon","isDisabled","isReadonly","label","value","setValue","useState","_jsxs","_jsx","InputPassword","onInput","jsx","Object","assign","class","onClick","children","InputText","describe","env","beforeEach","forEach","compObj","it","container","render","jsxs","RootEnvironmentProvider","environment","inputElement","querySelector","act","focus","clearIconSelector","clearIcon","expect","not","null","buttonElement","equal","blur","afterEach","cleanup"],"mappings":"2nHAUA,MAAMA,GAAO,OAwDbC,eAAeC,KACb,MAAMC,EAASC,yBAAuB,CAAC,MAAO,IAAIC,IAAI,CAAC,QAAS,SACxDC,QAASC,q0KAAuBC,CAAO,uBAAuBL,eACtE,MAAO,CACLI,aAAc,CAAE,2BAA4BA,IAQhD,MAAME,GAAwD,CAC5D,CAAEC,KAAM,gBAAiBC,UA9D3B,UAA2BC,aACzBA,EAAYC,WACZA,EAAUC,WACVA,EAAUC,MACVA,IAEA,MAAOC,EAAOC,GAAYC,EAAQA,SAAC,SACnC,OACEC,EAAAA,2BACEC,MAACC,EAAAA,eACCT,aAAcA,EACdC,WAAYA,EACZC,WAAYA,EACZC,MAAOA,EACPO,QAAStB,GACTgB,MAAOA,IAETI,EAAQG,IAAA,SAAAC,OAAAC,OAAA,CAAAC,MAAM,oBAAoBC,QAAS,IAAMV,EAAS,YAAU,CAAAW,SAAA,mBA8CxE,CAAElB,KAAM,YAAaC,UAlCvB,UAAuBC,aAAEA,EAAYC,WAAEA,EAAUC,WAAEA,EAAUC,MAAEA,IAC7D,MAAOC,EAAOC,GAAYC,EAAQA,SAAC,SAEnC,OACEC,EAAAA,2BACEC,MAACS,EAAAA,WACCjB,aAAcA,EACdC,WAAYA,EACZC,WAAYA,EACZC,MAAOA,EACPO,QAAStB,GACTgB,MAAOA,IAETI,EAAQG,IAAA,SAAAC,OAAAC,OAAA,CAAAC,MAAM,oBAAoBC,QAAS,IAAMV,EAAS,YAAU,CAAAW,SAAA,oBAwB1EE,SAAS,4BAA6B,KACpC,IAAIC,EACJC,WAAW/B,iBACT8B,QAAY7B,OAGdO,GAA2BwB,QAAQ,SAAUC,GAG3CC,GAAG,GAAGD,EAAQxB,gEAAiET,UAC7E,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAAAmB,KAACC,EAAuBA,wBAAAf,OAAAC,OAAA,CAACe,YAAaT,GACpC,CAAAH,SAAA,CAAAR,EAAAG,IAACW,EAAQvB,UAAU,CAAAC,aAAa,gBAAgBG,MAHtC,gBAIVK,EAAAA,IAAA,SAAAI,OAAAC,OAAA,CAAQC,MAAM,qBAAqC,CAAAE,SAAA,mBAIjDa,EAAeL,EAAUM,cAAc,SAC7CD,EAAazB,MAAQ,GAErB2B,EAAAA,IAAI,KACFF,EAAaG,UAGf,MAAMC,EAAoB,kBAG1B,IAAIC,EAAYV,EAAUM,cAAcG,GACxCE,EAAAA,OAAOD,EAAW,oBAAoBE,IAAIC,KAG1C,MAAMC,EAAgBd,EAAUM,cAAc,sBAC9CC,EAAAA,IAAI,KACFO,EAAcN,UAEhBE,EAAYV,EAAUM,cAAcG,GACpCE,EAAAA,OAAOD,EAAW,wBAAwBG,OAG5Cd,GAAG,GAAGD,EAAQxB,kEAAmET,UAC/E,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAAAmB,KAACC,EAAuBA,wBAAAf,OAAAC,OAAA,CAACe,YAAaT,GACpC,CAAAH,SAAA,CAAAR,EAAAG,IAACW,EAAQvB,UAAU,CAAAC,aAAa,gBAAgBG,MAHtC,gBAIVK,EAAAA,IAAA,SAAAI,OAAAC,OAAA,CAAQC,MAAM,qBAAqC,CAAAE,SAAA,mBAIjDa,EAAeL,EAAUM,cAAc,SAC7CK,EAAAA,OAAON,EAAazB,OAAOmC,MAAM,SAEjCR,EAAAA,IAAI,KACFF,EAAaG,UAGf,MAAMC,EAAoB,kBAG1B,IAAIC,EAAYV,EAAUM,cAAcG,GACxCE,EAAAA,OAAOD,EAAW,oBAAoBE,IAAIC,KAG1C,MAAMC,EAAgBd,EAAUM,cAAc,sBAC9CC,EAAAA,IAAI,KACFO,EAAcN,UAEhBE,EAAYV,EAAUM,cAAcG,GACpCE,EAAAA,OAAOD,EAAW,wBAAwBG,OAI5Cd,GAAG,GAAGD,EAAQxB,4DAA6DT,UACzE,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAAAmB,KAACC,EAAuBA,wBAAAf,OAAAC,OAAA,CAACe,YAAaT,GACpC,CAAAH,SAAA,CAAAR,EAAAG,IAACW,EAAQvB,UAAU,CAAAC,aAAa,gBAAgBG,MAHtC,gBAIVK,EAAAA,IAAA,SAAAI,OAAAC,OAAA,CAAQC,MAAM,qBAAqC,CAAAE,SAAA,mBAIjDa,EAAeL,EAAUM,cAAc,SAC7CK,EAAAA,OAAON,EAAazB,OAAOmC,MAAM,SAEjCR,EAAAA,IAAI,KACFF,EAAaG,UAGf,MAAMC,EAAoB,kBAG1B,IAAIC,EAAYV,EAAUM,cAAcG,GACxCE,EAAAA,OAAOD,EAAW,oBAAoBE,IAAIC,KAE1CN,EAAAA,IAAI,KACFF,EAAaW,SAKfN,EAAYV,EAAUM,cAAcG,GACpCE,EAAAA,OAAOD,EAAW,wBAAwBG,OAK5Cd,GAAG,GAAGD,EAAQxB,yCAA0CT,UACtD,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAAAmB,KAACC,EAAuBA,wBAAAf,OAAAC,OAAA,CAACe,YAAaT,GACpC,CAAAH,SAAA,CAAAR,EAAAG,IAACW,EAAQvB,UAAU,CAAAC,aAAa,SAASG,MAH/B,gBAIVK,EAAAA,IAAA,SAAAI,OAAAC,OAAA,CAAQC,MAAM,qBAAqC,CAAAE,SAAA,mBAIjDa,EAAeL,EAAUM,cAAc,SAC7CK,EAAAA,OAAON,EAAazB,OAAOmC,MAAM,SAEjC,MAGML,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,oBAAoBE,IAAIC,OAG5Cd,GAAG,GAAGD,EAAQxB,2DAA4DT,UACxE,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAAAmB,KAACC,EAAuBA,wBAAAf,OAAAC,OAAA,CAACe,YAAaT,GACpC,CAAAH,SAAA,CAAAR,EAAAG,IAACW,EAAQvB,UAAU,CAAAC,aAAa,SAASG,MAH/B,gBAIVK,EAAAA,IAAA,SAAAI,OAAAC,OAAA,CAAQC,MAAM,qBAAqC,CAAAE,SAAA,mBAIjDa,EAAeL,EAAUM,cAAc,SAC7CK,EAAAA,OAAON,EAAazB,OAAOmC,MAAM,SAGjCV,EAAazB,MAAQ,GAErB,MAGM8B,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,qDAAqDE,IAAIC,OAG7Ed,GAAG,GAAGD,EAAQxB,8CAA+CT,UAC3D,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAACmB,KAAAC,0BAAwBf,OAAAC,OAAA,CAAAe,YAAaT,GAAG,CAAAH,SAAA,CACvCR,EAAAA,IAACc,EAAQvB,UAAU,CAAAC,aAAa,SAASE,YAAY,EAAMC,MAHjD,gBAIVK,EAAAA,4BAAQM,MAAM,qBAAqC,CAAAE,SAAA,mBAOjDkB,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,+CAA+CG,OAGnEd,GAAG,GAAGD,EAAQxB,8CAA+CT,UAC3D,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAACmB,KAAAC,0BAAwBf,OAAAC,OAAA,CAAAe,YAAaT,GAAG,CAAAH,SAAA,CACvCR,EAAAA,IAACc,EAAQvB,UAAU,CAAAC,aAAa,SAASC,YAAY,EAAME,MAHjD,gBAIVK,EAAAA,4BAAQM,MAAM,qBAAqC,CAAAE,SAAA,mBAMjDkB,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,+CAA+CG,OAGnEd,GAAG,GAAGD,EAAQxB,sCAAuCT,UACnD,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAAAmB,KAACC,EAAuBA,wBAAAf,OAAAC,OAAA,CAACe,YAAaT,GACpC,CAAAH,SAAA,CAAAR,EAAAG,IAACW,EAAQvB,UAAU,CAAAC,aAAa,SAASG,MAH/B,gBAIVK,EAAAA,IAAA,SAAAI,OAAAC,OAAA,CAAQC,MAAM,qBAAqC,CAAAE,SAAA,mBAIjDa,EAAeL,EAAUM,cAAc,SAC7CK,EAAAA,OAAON,EAAazB,OAAOmC,MAAM,SAEjCR,EAAAA,IAAI,KACFF,EAAaG,UAGf,MAGME,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,gDAAgDE,IAAIC,OAIxEd,GAAG,GAAGD,EAAQxB,wCAAyCT,UACrD,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAAAmB,KAACC,EAAuBA,wBAAAf,OAAAC,OAAA,CAACe,YAAaT,GACpC,CAAAH,SAAA,CAAAR,EAAAG,IAACW,EAAQvB,UAAU,CAAAC,aAAa,QAAQG,MAH9B,gBAIVK,EAAAA,IAAA,SAAAI,OAAAC,OAAA,CAAQC,MAAM,qBAAqC,CAAAE,SAAA,mBAIjDa,EAAeL,EAAUM,cAAc,SAC7CK,EAAAA,OAAON,EAAazB,OAAOmC,MAAM,SAEjC,MAGML,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,wBAAwBG,OAG5Cd,GAAG,GAAGD,EAAQxB,qCAAsCT,UAClD,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAAAmB,KAACC,EAAuBA,wBAAAf,OAAAC,OAAA,CAACe,YAAaT,GACpC,CAAAH,SAAA,CAAAR,EAAAG,IAACW,EAAQvB,UAAU,CAAAC,aAAa,QAAQG,MAH9B,gBAIVK,EAAAA,IAAA,SAAAI,OAAAC,OAAA,CAAQC,MAAM,qBAAqC,CAAAE,SAAA,mBAIjDa,EAAeL,EAAUM,cAAc,SAE7CC,EAAAA,IAAI,KACFF,EAAaG,UAGf,MAGME,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,wBAAwBG,OAG5Cd,GAAG,GAAGD,EAAQxB,6CAA8CT,UAC1D,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAACmB,KAAAC,0BAAwBf,OAAAC,OAAA,CAAAe,YAAaT,GAAG,CAAAH,SAAA,CACvCR,EAAAA,IAACc,EAAQvB,UAAU,CAAAC,aAAa,QAAQE,YAAY,EAAMC,MAHhD,gBAIVK,EAAAA,4BAAQM,MAAM,qBAAqC,CAAAE,SAAA,mBAOjDkB,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,wBAAwBG,OAG5Cd,GAAG,GAAGD,EAAQxB,6CAA8CT,UAC1D,MACMmC,UAAEA,GAAcC,EAAMA,OAC1BlB,EAACmB,KAAAC,0BAAwBf,OAAAC,OAAA,CAAAe,YAAaT,GAAG,CAAAH,SAAA,CACvCR,EAAAA,IAACc,EAAQvB,UAAU,CAAAC,aAAa,QAAQC,YAAY,EAAME,MAHhD,gBAIVK,EAAAA,4BAAQM,MAAM,qBAAqC,CAAAE,SAAA,mBAOjDkB,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,wBAAwBG,OAI5Cd,GAAG,GAAGD,EAAQxB,8CAA+CT,UAC3D,MACMmC,UAAEA,GAAcC,EAAAA,OACpBlB,EAAAA,KAACoB,EAAAA,wBAAwBf,OAAAC,OAAA,CAAAe,YAAaT,cACpCX,EAACG,IAAAW,EAAQvB,UAAU,CAAAI,MAHT,gBAIVK,EAAQG,IAAA,SAAAC,OAAAC,OAAA,CAAAC,MAAM,qBAAqC,CAAAE,SAAA,mBAIjDa,EAAeL,EAAUM,cAAc,SAE7CC,EAAAA,IAAI,KACFF,EAAaG,UAGf,MAGME,EAAYV,EAAUM,cAHF,mBAI1BK,EAAAA,OAAOD,EAAW,wBAAwBG,SAI9CI,UAAUC,EAAOA"}