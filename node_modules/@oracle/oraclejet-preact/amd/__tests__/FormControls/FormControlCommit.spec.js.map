{"version":3,"file":"FormControlCommit.spec.js","sources":["../../../../src/__tests__/FormControls/FormControlCommit.spec.tsx"],"sourcesContent":["import { act, cleanup, fireEvent, render } from '@testing-library/preact';\nimport { useCallback, useState } from 'preact/hooks';\nimport { expect } from 'chai';\nimport { InputPassword } from '../../UNSAFE_InputPassword';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { ComponentProps } from 'preact';\nimport { ValueUpdateDetail } from '../../utils/UNSAFE_valueUpdateDetail';\nimport { InputText } from '../../UNSAFE_InputText';\nimport { NumberInputText } from '../../UNSAFE_NumberInputText';\nimport { TextArea } from '../../UNSAFE_TextArea';\nimport { TextAreaAutosize } from '../../UNSAFE_TextAreaAutosize';\n\ntype DemoInputPasswordProps = Pick<ComponentProps<typeof InputPassword>, 'hasClearIcon' | 'label'>;\n\nfunction DemoInputPassword({ hasClearIcon, label }: DemoInputPasswordProps) {\n  const [value, setValue] = useState('hello');\n  const [count, setCount] = useState(0);\n  const [committedValue, setCommittedValue] = useState('hello');\n  const handleInput = useCallback((detail: ValueUpdateDetail<string>) => {\n    setValue(detail.value ?? '');\n  }, []);\n  const handleCommit = useCallback((detail: ValueUpdateDetail<string>) => {\n    // setCount(count+1) does not increment it past 1.\n    // https://overreacted.io/a-complete-guide-to-useeffect/\n    // https://overreacted.io/react-as-a-ui-runtime/#batching\n    // use the 'updater function' form\n    setCount((prevCount) => prevCount + 1);\n    setCommittedValue(detail.value ?? '');\n  }, []);\n  return (\n    <>\n      <InputPassword\n        hasClearIcon={hasClearIcon}\n        label={label}\n        onCommit={handleCommit}\n        onInput={handleInput}\n        value={value}\n      />\n      <span class=\"testcommittedcountclass\">{count}</span>\n      <span class=\"testcommittedvalueclass\">{committedValue}</span>\n      <button class=\"testclickmebutton\" onClick={() => setValue('goodbye')}>\n        Click me\n      </button>\n    </>\n  );\n}\n\ntype DemoInputTextProps = Pick<\n  ComponentProps<typeof InputText>,\n  'hasClearIcon' | 'label' | 'maxLength'\n>;\n\nfunction DemoInputText({ hasClearIcon, label, maxLength }: DemoInputTextProps) {\n  const [value, setValue] = useState('hello');\n  const [count, setCount] = useState(0);\n  const [committedValue, setCommittedValue] = useState('hello');\n  const handleInput = useCallback((detail: ValueUpdateDetail<string>) => {\n    setValue(detail.value ?? '');\n  }, []);\n  const handleCommit = useCallback((detail: ValueUpdateDetail<string>) => {\n    // setCount(count+1) does not increment it past 1.\n    // https://overreacted.io/a-complete-guide-to-useeffect/\n    // https://overreacted.io/react-as-a-ui-runtime/#batching\n    // use the 'updater function' form\n    setCount((prevCount) => prevCount + 1);\n    setCommittedValue(detail.value ?? '');\n  }, []);\n  return (\n    <>\n      <InputText\n        hasClearIcon={hasClearIcon}\n        label={label}\n        maxLength={maxLength}\n        onCommit={handleCommit}\n        onInput={handleInput}\n        value={value}\n      />\n      <span class=\"testcommittedcountclass\">{count}</span>\n      <span class=\"testcommittedvalueclass\">{committedValue}</span>\n      <button class=\"testclickmebutton\" onClick={() => setValue('goodbye')}>\n        Click me\n      </button>\n    </>\n  );\n}\n\ntype DemoNumberInputTextProps = Pick<ComponentProps<typeof NumberInputText>, 'label'>;\n\nfunction DemoNumberInputText({ label }: DemoNumberInputTextProps) {\n  // Note: NumberInputText accepts non-numeric input so use 'hello'\n  // and 'goodbye' values for consistency.\n  const [value, setValue] = useState('hello');\n  const [count, setCount] = useState(0);\n  const [committedValue, setCommittedValue] = useState('hello');\n  const handleInput = useCallback((detail: ValueUpdateDetail<string>) => {\n    setValue(detail.value ?? '');\n  }, []);\n  const handleCommit = useCallback((detail: ValueUpdateDetail<string>) => {\n    // setCount(count+1) does not increment it past 1.\n    // https://overreacted.io/a-complete-guide-to-useeffect/\n    // https://overreacted.io/react-as-a-ui-runtime/#batching\n    // use the 'updater function' form\n    setCount((prevCount) => prevCount + 1);\n    setCommittedValue(detail.value ?? '');\n  }, []);\n  return (\n    <>\n      <NumberInputText label={label} onCommit={handleCommit} onInput={handleInput} value={value} />\n      <span class=\"testcommittedcountclass\">{count}</span>\n      <span class=\"testcommittedvalueclass\">{committedValue}</span>\n      <button class=\"testclickmebutton\" onClick={() => setValue('goodbye')}>\n        Click me\n      </button>\n    </>\n  );\n}\n\ntype DemoTextAreaProps = Pick<ComponentProps<typeof TextArea>, 'label' | 'maxLength'>;\n\nfunction DemoTextArea({ label, maxLength }: DemoTextAreaProps) {\n  const [value, setValue] = useState('hello');\n  const [count, setCount] = useState(0);\n  const [committedValue, setCommittedValue] = useState('hello');\n  const handleInput = useCallback((detail: ValueUpdateDetail<string>) => {\n    setValue(detail.value ?? '');\n  }, []);\n  const handleCommit = useCallback((detail: ValueUpdateDetail<string>) => {\n    // setCount(count+1) does not increment it past 1.\n    // https://overreacted.io/a-complete-guide-to-useeffect/\n    // https://overreacted.io/react-as-a-ui-runtime/#batching\n    // use the 'updater function' form\n    setCount((prevCount) => prevCount + 1);\n    setCommittedValue(detail.value ?? '');\n  }, []);\n  return (\n    <>\n      <TextArea\n        label={label}\n        maxLength={maxLength}\n        onCommit={handleCommit}\n        onInput={handleInput}\n        value={value}\n      />\n      <span class=\"testcommittedcountclass\">{count}</span>\n      <span class=\"testcommittedvalueclass\">{committedValue}</span>\n      <button class=\"testclickmebutton\" onClick={() => setValue('goodbye')}>\n        Click me\n      </button>\n    </>\n  );\n}\n\ntype DemoTextAreaAutosizeProps = Pick<\n  ComponentProps<typeof TextAreaAutosize>,\n  'label' | 'maxLength'\n>;\n\nfunction DemoTextAreaAutosize({ label, maxLength }: DemoTextAreaAutosizeProps) {\n  const [value, setValue] = useState('hello');\n  const [count, setCount] = useState(0);\n  const [committedValue, setCommittedValue] = useState('hello');\n  const handleInput = useCallback((detail: ValueUpdateDetail<string>) => {\n    setValue(detail.value ?? '');\n  }, []);\n  const handleCommit = useCallback((detail: ValueUpdateDetail<string>) => {\n    // setCount(count+1) does not increment it past 1.\n    // https://overreacted.io/a-complete-guide-to-useeffect/\n    // https://overreacted.io/react-as-a-ui-runtime/#batching\n    // use the 'updater function' form\n    setCount((prevCount) => prevCount + 1);\n    setCommittedValue(detail.value ?? '');\n  }, []);\n  return (\n    <>\n      <TextAreaAutosize\n        label={label}\n        maxLength={maxLength}\n        onCommit={handleCommit}\n        onInput={handleInput}\n        value={value}\n      />\n      <span class=\"testcommittedcountclass\">{count}</span>\n      <span class=\"testcommittedvalueclass\">{committedValue}</span>\n      <button class=\"testclickmebutton\" onClick={() => setValue('goodbye')}>\n        Click me\n      </button>\n    </>\n  );\n}\n\nasync function getEnvironmentContext() {\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n  const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n  return {\n    translations: { '@oracle/oraclejet-preact': translations }\n  } as Partial<RootEnvironment>;\n}\n\nconst componentList: { name: string; component: any }[] = [\n  { name: 'InputPassword', component: DemoInputPassword },\n  { name: 'InputText', component: DemoInputText },\n  { name: 'NumberInputText', component: DemoNumberInputText },\n  { name: 'TextArea', component: DemoTextArea },\n  { name: 'TextAreaAutosize', component: DemoTextAreaAutosize }\n];\n\nconst componentWithClearIconList: { name: string; component: any }[] = [\n  { name: 'InputPassword', component: DemoInputPassword },\n  { name: 'InputText', component: DemoInputText }\n];\n\nconst componentWithMaxLengthList: { name: string; component: any }[] = [\n  { name: 'InputText', component: DemoInputText },\n  { name: 'TextArea', component: DemoTextArea },\n  { name: 'TextAreaAutosize', component: DemoTextAreaAutosize }\n];\n\ndescribe('Form Controls - onCommit', () => {\n  let env: Partial<RootEnvironment>;\n  beforeEach(async function () {\n    env = await getEnvironmentContext();\n  });\n\n  componentList.forEach((compObj) =>\n    it(`${compObj.name}: test initial value`, async () => {\n      const label = 'test initial value';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component label={label} />\n        </RootEnvironmentProvider>\n      );\n      const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';\n      const inputElement = container.querySelector(inputElementType) as\n        | HTMLInputElement\n        | HTMLTextAreaElement;\n      expect(inputElement.value).equal('hello');\n    })\n  );\n\n  componentList.forEach((compObj) =>\n    it(`${compObj.name} test blur should not call onCommit`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component label={label} />\n          <button />\n        </RootEnvironmentProvider>\n      );\n\n      const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';\n      const inputElement = container.querySelector(inputElementType) as\n        | HTMLInputElement\n        | HTMLTextAreaElement;\n      expect(inputElement.value).equal('hello');\n      const countspan = container.querySelector('.testcommittedcountclass');\n      const buttonElement = container.querySelector('.testclickmebutton') as HTMLButtonElement;\n\n      act(() => {\n        inputElement.focus();\n      });\n\n      act(() => {\n        buttonElement.focus();\n      });\n      expect(countspan?.textContent, 'blur without editing, onCommit count should be 0').to.equal(\n        '0'\n      );\n    })\n  );\n\n  componentList.forEach((compObj) =>\n    it(`${compObj.name}: test Enter Enter Enter should not call onCommit`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component label={label} />\n        </RootEnvironmentProvider>\n      );\n\n      const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';\n      const inputElement = container.querySelector(inputElementType) as\n        | HTMLInputElement\n        | HTMLTextAreaElement;\n      expect(inputElement.value).equal('hello');\n      const countspan = container.querySelector('.testcommittedcountclass');\n      const valuespan = container.querySelector('.testcommittedvalueclass');\n\n      expect(valuespan?.textContent, 'initial render committed value').to.equal('hello');\n\n      // expect onCommit not to be called at all yet\n      expect(countspan?.textContent, 'initial render, check onCommit count').to.equal('0');\n      // Enter a few times should not affect value or commit count\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n\n      expect(countspan?.textContent, 'Press Enter, check onCommit count').to.equal('0');\n      expect(valuespan?.textContent, 'after Enter, committed value').to.equal('hello');\n    })\n  );\n\n  componentWithClearIconList.forEach((compObj) =>\n    // click on enter over and over to make sure onCommit isn't being called but once.\n    it(`${compObj.name} test click Clear Icon clears display value, Enter Enter Enter commits value once`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component label={label} hasClearIcon=\"always\" />\n        </RootEnvironmentProvider>\n      );\n\n      const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';\n      const inputElement = container.querySelector(inputElementType) as\n        | HTMLInputElement\n        | HTMLTextAreaElement;\n      expect(inputElement.value).equal('hello');\n      const countspan = container.querySelector('.testcommittedcountclass');\n      const valuespan = container.querySelector('.testcommittedvalueclass');\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon found').not.null;\n\n      if (clearIcon) {\n        fireEvent.click(clearIcon);\n      }\n      expect(inputElement.value, 'after click clear icon, input value').to.equal('');\n      expect(valuespan?.textContent, 'after click icon, committed value not changed').to.equal(\n        'hello'\n      );\n      // expect onCommit not to be called at all yet\n      expect(countspan?.textContent, 'clicked clear icon, check onCommit count').to.equal('0');\n      // Enter will commit the ''\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n\n      expect(countspan?.textContent, 'Press Enter a few times after clear icon').to.equal('1');\n      expect(valuespan?.textContent, 'after click icon and Enter, committed value').to.equal('');\n    })\n  );\n\n  componentWithClearIconList.forEach((compObj) =>\n    it(`${compObj.name}: test click Clear Icon clears display value, blur commits value`, async () => {\n      const label = 'field label';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component label={label} hasClearIcon=\"always\" />\n        </RootEnvironmentProvider>\n      );\n\n      const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';\n      const inputElement = container.querySelector(inputElementType) as\n        | HTMLInputElement\n        | HTMLTextAreaElement;\n      expect(inputElement.value).equal('hello');\n      const countspan = container.querySelector('.testcommittedcountclass');\n      const valuespan = container.querySelector('.testcommittedvalueclass');\n      const buttonElement = container.querySelector('.testclickmebutton') as HTMLButtonElement;\n\n      const clearIconSelector = '[title=\"Clear\"]';\n      // Get the parent element of the svg icon which contains\n      // all the event listeners\n      const clearIcon = container.querySelector(clearIconSelector);\n      expect(clearIcon, 'clear icon found').not.null;\n\n      // click clear\n      if (clearIcon) {\n        fireEvent.click(clearIcon);\n      }\n      // input clears out but committed value is still 'hello' and onCommit handler not called.\n      expect(inputElement.value, 'after click clear icon, input value').to.equal('');\n      expect(valuespan?.textContent, 'after click icon, committed value not changed').to.equal(\n        'hello'\n      );\n      expect(countspan?.textContent, 'clicked clear icon, check onCommit count').to.equal('0');\n\n      // focus outside will call onCommit handler.\n      act(() => {\n        buttonElement.focus();\n      });\n      expect(\n        countspan?.textContent,\n        'after click icon and blur, onCommit count should be increased to 1'\n      ).to.equal('1');\n      expect(valuespan?.textContent, 'after click icon and blur, committed value').to.equal('');\n    })\n  );\n\n  componentList.forEach((compObj) =>\n    it(`${compObj.name}: test programmatic value change does not call onCommit`, async () => {\n      const label = 'programmatic change';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component label={label} hasClearIcon=\"never\" />\n        </RootEnvironmentProvider>\n      );\n\n      const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';\n      const inputElement = container.querySelector(inputElementType) as\n        | HTMLInputElement\n        | HTMLTextAreaElement;\n      expect(inputElement.value).equal('hello');\n      const countspan = container.querySelector('.testcommittedcountclass');\n      const valuespan = container.querySelector('.testcommittedvalueclass');\n      const buttonElement = container.querySelector('.testclickmebutton') as HTMLButtonElement;\n\n      // click buttonElement which will programmatically change the value on the component\n      act(() => {\n        fireEvent.click(buttonElement);\n      });\n      // Component's display value\n      // Component should be able to distinguish between value being from an input and\n      // value being from a programmatic change. It calls onCommit if it is a programmatic change.\n      // See useCurrentValueReducer hook for details.\n      expect(inputElement.value, 'display value after programmatic change').to.equal('goodbye');\n      expect(countspan?.textContent, 'after programmatic change, onCommit is not called').to.equal(\n        '0'\n      );\n      expect(\n        valuespan?.textContent,\n        'after programmatic change, committed value is not changed'\n      ).to.equal('hello');\n      // press Enter should not cause an onCommit now since it was a programmatic change.\n      fireEvent.keyDown(inputElement, { key: 'Enter', code: 'Enter', charCode: 13 });\n      expect(countspan?.textContent, 'after programmatic change, onCommit is not called').to.equal(\n        '0'\n      );\n    })\n  );\n\n  componentWithMaxLengthList.forEach((compObj) =>\n    it(`${compObj.name} test programmatic value change with < maxlength does not call onCommit`, async () => {\n      const label = 'programmatic change';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component label={label} maxLength={30} />\n        </RootEnvironmentProvider>\n      );\n\n      const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';\n      const inputElement = container.querySelector(inputElementType) as\n        | HTMLInputElement\n        | HTMLTextAreaElement;\n      expect(inputElement.value).equal('hello');\n      const countspan = container.querySelector('.testcommittedcountclass');\n      const valuespan = container.querySelector('.testcommittedvalueclass');\n      const buttonElement = container.querySelector('.testclickmebutton') as HTMLButtonElement;\n\n      // click buttonElement which will programmatically change the value on Component\n      act(() => {\n        fireEvent.click(buttonElement);\n      });\n      // should not cause an onCommit now since it was a programmatic change\n      // and it didn't cause the maxLength filter did not kick in.\n      expect(inputElement.value, 'display value after programmatic change').to.equal('goodbye');\n      expect(countspan?.textContent, 'after programmatic change, onCommit is not called').to.equal(\n        '0'\n      );\n      expect(\n        valuespan?.textContent,\n        'after programmatic change, committed value is not changed'\n      ).to.equal('hello');\n    })\n  );\n\n  componentWithMaxLengthList.forEach((compObj) =>\n    it(`${compObj.name}: test programmatic value change with > maxlength does call onCommit`, async () => {\n      const label = 'programmatic change';\n      const { container } = render(\n        <RootEnvironmentProvider environment={env}>\n          <compObj.component label={label} maxLength={6} />\n        </RootEnvironmentProvider>\n      );\n\n      const inputElementType = compObj.name.startsWith('Text') ? 'textarea' : 'input';\n      const inputElement = container.querySelector(inputElementType) as\n        | HTMLInputElement\n        | HTMLTextAreaElement;\n      expect(inputElement.value).equal('hello');\n      const countspan = container.querySelector('.testcommittedcountclass');\n      const valuespan = container.querySelector('.testcommittedvalueclass');\n      const buttonElement = container.querySelector('.testclickmebutton') as HTMLButtonElement;\n\n      // click buttonElement which will ***programmatically change*** the value on Component\n      act(() => {\n        fireEvent.click(buttonElement);\n      });\n      // should cause an onCommit now even though it was a programmatic change\n      // because it caused the maxLength filter to kick in and that fires an onCommit.\n      expect(inputElement.value, 'display value after programmatic change').to.equal('goodby');\n      expect(\n        countspan?.textContent,\n        'after programmatic change when maxLength filter kicks in, onCommit is called'\n      ).to.equal('1');\n      expect(\n        valuespan?.textContent,\n        'after programmatic change when maxLength filter kicks in, committed value is changed'\n      ).to.equal('goodby');\n    })\n  );\n\n  afterEach(cleanup);\n});\n"],"names":["DemoInputPassword","hasClearIcon","label","value","setValue","useState","count","setCount","committedValue","setCommittedValue","handleInput","useCallback","detail","_a","handleCommit","prevCount","_jsxs","jsxs","_Fragment","Fragment","children","_jsx","InputPassword","onCommit","onInput","Object","assign","class","onClick","DemoInputText","maxLength","jsx","InputText","DemoTextArea","TextArea","DemoTextAreaAutosize","TextAreaAutosize","async","getEnvironmentContext","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","componentList","name","component","NumberInputText","componentWithClearIconList","componentWithMaxLengthList","describe","env","beforeEach","forEach","compObj","it","container","render","RootEnvironmentProvider","environment","inputElementType","startsWith","inputElement","querySelector","expect","equal","countspan","buttonElement","act","focus","textContent","to","valuespan","fireEvent","keyDown","key","code","charCode","clearIcon","not","null","click","afterEach","cleanup"],"mappings":"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"}