{"version":3,"file":"Indexer.spec.js","sources":["../../../../src/UNSAFE_Indexer/__tests__/Indexer.spec.tsx"],"sourcesContent":["import { useState } from 'preact/hooks';\nimport { render, fireEvent, waitFor, RenderResult } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { Indexer, CommitDetail } from '../Indexer';\nimport { Section } from '../IndexerItems';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\n\nconst getListItems = (list: RenderResult) => {\n  return list.container.querySelector('ul')?.children || [];\n};\n\ntype Props<K> = {\n  sections?: Section<K>[];\n  value?: K;\n  onCommit?: (detail: CommitDetail<K>) => void;\n  height?: string;\n  onClick?: () => void;\n};\n\nconst TestComponent = <K extends string | number>({\n  sections,\n  value,\n  onCommit,\n  height,\n  onClick\n}: Props<K>) => {\n  const [val, setVal] = useState<K>();\n  return (\n    <div\n      style={{ height: height || 'calc(100vh - 2rem)' }}\n      onClick={() => {\n        onClick && onClick();\n      }}>\n      <Indexer\n        sections={sections}\n        value={val || value}\n        onCommit={(detail) => {\n          setVal(detail.value);\n          onCommit && onCommit(detail);\n        }}\n      />\n    </div>\n  );\n};\n\nconst sections: Section<string>[] = [\n  { key: 'A' },\n  { key: 'B' },\n  { key: 'C' },\n  { key: 'D' },\n  { key: 'E' },\n  { key: 'F' },\n  { key: 'G' },\n  { key: 'H' },\n  { key: 'I' },\n  { key: 'J' },\n  { key: 'K' },\n  { key: 'L' },\n  { key: 'M' },\n  { key: 'N' },\n  { key: 'O' },\n  { key: 'P' },\n  { key: 'Q' },\n  { key: 'R' },\n  { key: 'S' },\n  { key: 'T' },\n  { key: 'U' },\n  { key: 'V' },\n  { key: 'W' },\n  { key: 'X' },\n  { key: 'Y' },\n  { key: 'Z' }\n];\n\ndescribe('Test Indexer component', () => {\n  beforeEach(() => {\n    if (!window.ResizeObserver) {\n      // ResizeObserver isn't available in test environment\n      const ResizeObserver = jest.fn();\n      ResizeObserver.mockReturnValue({\n        observe: () => null,\n        unobserve: () => null,\n        disconnect: () => null\n      });\n\n      Object.defineProperty(global, 'ResizeObserver', {\n        writable: true,\n        configurable: true,\n        value: ResizeObserver\n      });\n    }\n  });\n\n  it('render -  with props sections, string key', async function () {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const smallSections: Section<string>[] = [\n      { key: 'A' },\n      { key: 'B' },\n      { key: 'C', isDisabled: true },\n      { key: 'D', isDisabled: true },\n      { key: 'E' },\n      { key: 'F' }\n    ];\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent sections={smallSections}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const listItems = content.container.querySelector('ul')?.children;\n    expect(listItems?.length, 'indexer should have 7 sections').equals(7);\n\n    expect(listItems && listItems[0].innerHTML, 'indexer 1st element should be A').equals('A');\n    expect(\n      listItems && listItems[0].classList.length,\n      'indexer 1st element should have 1 class'\n    ).equals(1);\n\n    expect(listItems && listItems[1].innerHTML, 'indexer 2nd element should be B').equals('B');\n    expect(\n      listItems && listItems[1].classList.length,\n      'indexer 2nd element should have 1 class'\n    ).equals(1);\n\n    expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be C').equals('C');\n    expect(\n      listItems && listItems[2].classList.length,\n      'indexer 3rd element should have 2 classes'\n    ).equals(2);\n\n    expect(listItems && listItems[3].innerHTML, 'indexer 4th element should be D').equals('D');\n    expect(\n      listItems && listItems[3].classList.length,\n      'indexer 4th element should have 2 classes'\n    ).equals(2);\n  });\n\n  it('render -  with props sections, number key', async function () {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const smallSections: Section<number>[] = [\n      { key: 1 },\n      { key: 2 },\n      { key: 3, isDisabled: true },\n      { key: 4, isDisabled: true },\n      { key: 5 },\n      { key: 6 }\n    ];\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent sections={smallSections}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const listItems = content.container.querySelector('ul')?.children;\n    expect(listItems?.length, 'indexer should have 7 sections').equals(7);\n\n    expect(listItems && listItems[0].innerHTML, 'indexer 1st element should be 1').equals('1');\n    expect(\n      listItems && listItems[0].classList.length,\n      'indexer 1st element should have 1 class'\n    ).equals(1);\n\n    expect(listItems && listItems[1].innerHTML, 'indexer 2nd element should be 2').equals('2');\n    expect(\n      listItems && listItems[1].classList.length,\n      'indexer 2nd element should have 1 class'\n    ).equals(1);\n\n    expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be 3').equals('3');\n    expect(\n      listItems && listItems[2].classList.length,\n      'indexer 3rd element should have 2 classes'\n    ).equals(2);\n\n    expect(listItems && listItems[3].innerHTML, 'indexer 4th element should be 4').equals('4');\n    expect(\n      listItems && listItems[3].classList.length,\n      'indexer 4th element should have 2 classes'\n    ).equals(2);\n  });\n\n  it('render -  with props value, string key', async function () {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const smallSections: Section<string>[] = [\n      { key: 'A' },\n      { key: 'B' },\n      { key: 'C', isDisabled: true },\n      { key: 'D', isDisabled: true },\n      { key: 'E' },\n      { key: 'F' }\n    ];\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent sections={smallSections} value={smallSections[1].key}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const listItems = content.container.querySelector('ul')?.children;\n    expect(listItems && listItems[1].classList.length, 'indexer 2nd element have 2 classes').equals(\n      2\n    );\n  });\n\n  it('render -  with props value, number key', async function () {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const smallSections: Section<number>[] = [\n      { key: 1 },\n      { key: 2 },\n      { key: 3, isDisabled: true },\n      { key: 4, isDisabled: true },\n      { key: 5 },\n      { key: 6 }\n    ];\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent sections={smallSections} value={smallSections[1].key}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const listItems = content.container.querySelector('ul')?.children;\n    expect(listItems && listItems[1].classList.length, 'indexer 2nd element have 2 classes').equals(\n      2\n    );\n  });\n\n  it('render -  with props onCommit using keyboard', async function () {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const smallSections: Section<string>[] = [\n      { key: 'A' },\n      { key: 'B' },\n      { key: 'C', isDisabled: true },\n      { key: 'D', isDisabled: true },\n      { key: 'E' },\n      { key: 'F' }\n    ];\n    let selection = '';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent\n          sections={smallSections}\n          value={smallSections[1].key}\n          onCommit={(detail: CommitDetail<string>) => {\n            selection = detail.value;\n          }}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const listItems = getListItems(content);\n    expect(listItems && listItems[0].classList.length, 'indexer 1st element have 1 class').equals(\n      1\n    );\n    expect(listItems && listItems[1].classList.length, 'indexer 2nd element have 2 classes').equals(\n      2\n    );\n\n    fireEvent.keyDown(listItems[0], { key: 'ArrowDown' });\n    fireEvent.keyUp(listItems[0], { key: 'Enter' });\n\n    await waitFor(() => {\n      expect(\n        listItems && listItems[0].classList.length,\n        'indexer 1st element have 3 classes'\n      ).equals(3);\n      expect(listItems && listItems[0].innerHTML, 'selection should be A').equals(selection);\n    });\n  });\n\n  it('render -  with props onCommit using click', async function () {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const smallSections: Section<string>[] = [\n      { key: 'A' },\n      { key: 'B' },\n      { key: 'C', isDisabled: true },\n      { key: 'D', isDisabled: true },\n      { key: 'E' },\n      { key: 'F' }\n    ];\n\n    let selection = '';\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent\n          sections={smallSections}\n          value={smallSections[1].key}\n          onCommit={(detail: CommitDetail<string>) => {\n            selection = detail.value;\n          }}\n          onClick={() => {\n            expect(false, 'Click event should not propagate').to.be.true;\n          }}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const listItems = getListItems(content);\n    fireEvent.click(listItems[0]);\n\n    await waitFor(() => {\n      expect(listItems && listItems[0].innerHTML, 'selection should be A').equals(selection);\n    });\n  });\n\n  it('render -  with props onCommit, number key', async function () {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const smallSections: Section<number>[] = [\n      { key: 1 },\n      { key: 2 },\n      { key: 3, isDisabled: true },\n      { key: 4, isDisabled: true },\n      { key: 5 },\n      { key: 6 }\n    ];\n    let selection = -1;\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent\n          sections={smallSections}\n          value={smallSections[1].key}\n          onCommit={(detail: CommitDetail<number>) => {\n            selection = detail.value;\n          }}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n\n    const listItems = getListItems(content);\n    expect(listItems && listItems[0].classList.length, 'indexer 1st element have 1 class').equals(\n      1\n    );\n    expect(listItems && listItems[1].classList.length, 'indexer 2nd element have 2 classes').equals(\n      2\n    );\n    expect(\n      listItems && (listItems[0] as HTMLElement).dataset['ojKeyType'],\n      'indexer 1st element should have key type number'\n    ).equals('number');\n    expect(\n      listItems && (listItems[1] as HTMLElement).dataset['ojKeyType'],\n      'indexer 2nd element should have key type number'\n    ).equals('number');\n\n    fireEvent.keyDown(listItems[0], { key: 'ArrowDown' });\n    fireEvent.keyUp(listItems[0], { key: 'Enter' });\n    await waitFor(() => {\n      expect(\n        listItems && listItems[0].classList.length,\n        'indexer 1st element have 3 classes'\n      ).equals(3);\n      expect(listItems && Number(listItems[0].innerHTML), 'selection should be A').equals(\n        selection\n      );\n    });\n  });\n\n  // skip this test in jest, only run it in karma mocha\n  if (typeof jest === typeof undefined) {\n    it('resize with different initial heights', async function () {\n      const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n      const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n      const env: Partial<RootEnvironment> = {\n        translations: { '@oracle/oraclejet-preact': translations }\n      };\n\n      let content = render(\n        <RootEnvironmentProvider environment={env}>\n          <TestComponent sections={sections} height=\"500px\"></TestComponent>\n        </RootEnvironmentProvider>\n      );\n\n      let listItems = getListItems(content);\n      expect(listItems?.length, 'indexer should have 27 sections').equals(27);\n      expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be C').equals('C');\n\n      content = render(\n        <RootEnvironmentProvider environment={env}>\n          <TestComponent sections={sections} height=\"400px\"></TestComponent>\n        </RootEnvironmentProvider>\n      );\n      listItems = getListItems(content);\n      expect(listItems?.length, 'indexer should have 19 sections').equals(19);\n      expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be D').equals('D');\n\n      content = render(\n        <RootEnvironmentProvider environment={env}>\n          <TestComponent sections={sections} height=\"300px\"></TestComponent>\n        </RootEnvironmentProvider>\n      );\n      listItems = getListItems(content);\n      expect(listItems?.length, 'indexer should have 15 sections').equals(15);\n      expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be E').equals('E');\n\n      content = render(\n        <RootEnvironmentProvider environment={env}>\n          <TestComponent sections={sections} height=\"250px\"></TestComponent>\n        </RootEnvironmentProvider>\n      );\n      listItems = getListItems(content);\n      expect(listItems?.length, 'indexer should have 12 sections').equals(12);\n      expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be F').equals('F');\n\n      content = render(\n        <RootEnvironmentProvider environment={env}>\n          <TestComponent sections={sections} height=\"200px\"></TestComponent>\n        </RootEnvironmentProvider>\n      );\n      listItems = getListItems(content);\n      expect(listItems?.length, 'indexer should have 11 sections').equals(11);\n      expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be G').equals('G');\n\n      content = render(\n        <RootEnvironmentProvider environment={env}>\n          <TestComponent sections={sections} height=\"160px\"></TestComponent>\n        </RootEnvironmentProvider>\n      );\n      listItems = getListItems(content);\n      expect(listItems?.length, 'indexer should have 10 sections').equals(10);\n      expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be H').equals('H');\n\n      content = render(\n        <RootEnvironmentProvider environment={env}>\n          <TestComponent sections={sections} height=\"145px\"></TestComponent>\n        </RootEnvironmentProvider>\n      );\n      listItems = getListItems(content);\n      expect(listItems?.length, 'indexer should have 9 sections').equals(9);\n      expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be I').equals('I');\n\n      content = render(\n        <RootEnvironmentProvider environment={env}>\n          <TestComponent sections={sections} height=\"135px\"></TestComponent>\n        </RootEnvironmentProvider>\n      );\n      listItems = getListItems(content);\n      expect(listItems?.length, 'indexer should have 8 sections').equals(8);\n      expect(listItems && listItems[2].innerHTML, 'indexer 3rd element should be J').equals('J');\n    });\n  }\n\n  it('Keyboard navigation - focus and selection', async function () {\n    const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n    const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n    const env: Partial<RootEnvironment> = {\n      translations: { '@oracle/oraclejet-preact': translations }\n    };\n    const content = render(\n      <RootEnvironmentProvider environment={env}>\n        <TestComponent sections={sections}></TestComponent>\n      </RootEnvironmentProvider>\n    );\n    const list = content.container.querySelector('ul');\n    const listItems = getListItems(content);\n\n    fireEvent.keyDown(listItems[0], { key: 'ArrowDown' });\n    await waitFor(() => {\n      expect(list?.getAttribute('aria-valuetext'), 'indexer should has focus on A').equals('A');\n      expect(listItems[0].classList.length, 'indexer should has focus on A').equals(2);\n    });\n\n    fireEvent.keyUp(listItems[0], { key: 'Enter' });\n    await waitFor(() => {\n      expect(list?.getAttribute('aria-valuetext'), 'indexer should has focus on A').equals('A');\n      expect(listItems[0].classList.length, 'indexer should has focus and selection on A').equals(\n        3\n      );\n    });\n\n    fireEvent.keyDown(listItems[1], { key: 'ArrowDown' });\n    await waitFor(() => {\n      expect(list?.getAttribute('aria-valuetext'), 'indexer should has focus on B').equals('B');\n      expect(listItems[1].classList.length, 'indexer should has focus on B').equals(2);\n    });\n\n    fireEvent.keyUp(listItems[1], { key: 'Enter' });\n    await waitFor(() => {\n      expect(list?.getAttribute('aria-valuetext'), 'indexer should has focus on B').equals('B');\n      expect(listItems[1].classList.length, 'indexer should has focus and selection on B').equals(\n        3\n      );\n    });\n\n    fireEvent.keyDown(listItems[2], { key: 'ArrowDown' });\n    await waitFor(() => {\n      expect(list?.getAttribute('aria-valuetext'), 'indexer should has focus on C').equals('C');\n      expect(listItems[2].classList.length, 'indexer should has focus on C').equals(2);\n    });\n\n    fireEvent.keyUp(listItems[2], { key: 'Enter' });\n    await waitFor(() => {\n      expect(list?.getAttribute('aria-valuetext'), 'indexer should has focus on C').equals('C');\n      expect(listItems[2].classList.length, 'indexer should has focus and selection on C').equals(\n        3\n      );\n    });\n  });\n});\n"],"names":["getListItems","list","_a","container","querySelector","children","TestComponent","sections","value","onCommit","height","onClick","val","setVal","useState","_jsx","Object","assign","style","Indexer","detail","key","describe","beforeEach","window","ResizeObserver","jest","fn","mockReturnValue","observe","unobserve","disconnect","defineProperty","global","writable","configurable","it","async","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","env","listItems","render","RootEnvironmentProvider","environment","isDisabled","expect","length","equals","innerHTML","classList","__variableDynamicImportRuntime1__","__variableDynamicImportRuntime2__","smallSections","jsx","__variableDynamicImportRuntime3__","__variableDynamicImportRuntime4__","selection","content","fireEvent","keyDown","keyUp","waitFor","__variableDynamicImportRuntime5__","to","be","true","click","__variableDynamicImportRuntime6__","dataset","Number","__variableDynamicImportRuntime7__","__variableDynamicImportRuntime8__","getAttribute"],"mappings":"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"}