{"version":3,"file":"FilePicker.spec.js","sources":["../../../../src/UNSAFE_FilePicker/__tests__/FilePicker.spec.tsx"],"sourcesContent":["import { render, waitFor } from '@testing-library/preact';\nimport { expect } from 'chai';\nimport { FilePicker, TestHandlersRef, CommitDetail } from '../FilePicker';\nimport { matchTranslationBundle } from '../../utils/UNSAFE_matchTranslationBundle';\nimport { RootEnvironmentProvider } from '../../UNSAFE_Environment';\nimport type { RootEnvironment } from '../../UNSAFE_Environment';\nimport { createRef, ComponentProps } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { getClientHints } from '../../utils/PRIVATE_clientHints';\nimport setupTabbableComponent from '../../utils/PRIVATE_dvtTestUtils/';\n\ntype filePickerProps = ComponentProps<typeof FilePicker>;\ndescribe('Test Filepicker component', () => {\n  it('render', async () => {\n    const content = await setupFilePicker({ accept: ['image/*'] });\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    const classList = firstElement.classList;\n    expect(classList.length).equals(2);\n  });\n\n  it('Focus Blur', async () => {\n    const content = await setupFilePicker();\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    firstElement.focus();\n    let focusElement = document.activeElement;\n    expect(firstElement.contains(focusElement), 'FilePicker is in focus').equals(true);\n    firstElement.blur();\n    focusElement = document.activeElement;\n    expect(firstElement.contains(focusElement), 'FilePicker no longer in focus').not.equals(true);\n  });\n\n  //TODO: JET-53693 Focus not working in Preact Avatar\n\n  // it('Focus Blur Trigger Content', async () => {\n  //   const triggerContent = (\n  //     <div id=\"triggerContent\" tabIndex={0}>\n  //       This is the child content\n  //     </div>\n  //   );\n  //   const content = await setupFilePicker({ children: triggerContent });\n  //   const firstElement = content.container?.firstElementChild as HTMLElement;\n  //   firstElement.focus();\n  //   let focusElement = document.activeElement;\n  //   expect(focusElement?.getAttribute('id'), 'FilePicker trigger is in focus').equals('triggerContent');\n  //   expect(\n  //     firstElement.contains(focusElement) && firstElement !== focusElement,\n  //     'FilePicker is in focus'\n  //   ).equals(true);\n  //   firstElement.blur();\n  //   focusElement = document.activeElement;\n  //   expect(firstElement.contains(focusElement), 'FilePicker no longer in focus').not.equals(true);\n  // });\n\n  it('default value for isDisabled', async () => {\n    const content = await setupFilePicker();\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    const elementClasses = firstElement.classList?.value;\n    expect(elementClasses).to.be.a('string').that.not.contains('oj-c-filepicker-disabled');\n  });\n\n  it('default value for primaryText', async () => {\n    const content = await setupFilePicker();\n    const primaryText = await content.findByText('Drag and Drop');\n    expect(primaryText).not.null;\n  });\n\n  it('default value for secondaryText', async () => {\n    const content = await setupFilePicker();\n    const secondaryText = await content.findByText('Select or drop files here');\n    expect(secondaryText).not.null;\n  });\n\n  it('default value for accessibleLabel', async () => {\n    const content = await setupFilePicker();\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    expect(firstElement.getAttribute('aria-label')).equals(\n      'Add Files. Drag and Drop. Select or drop files here'\n    );\n  });\n\n  it('HandleDragEnter', async () => {\n    const filePickerRef = createRef();\n    await setupFilePicker({}, filePickerRef);\n    const eventObj = createEvent();\n    const data = filePickerRef.current;\n    data.onDragEnter(eventObj.event);\n    await waitFor(() => {\n      eventObj.expectEventToBeCancelled();\n    });\n  });\n\n  //following test also checks for default capture option\n  const invalidTestDetails = [\n    {\n      description: 'Invalid single handleDragOver handleDragLeave',\n      dragOver: ['application/pdf'],\n      dragLeave: true,\n      invalidMessage: \"You can't upload files of type application/pdf\"\n    },\n    {\n      description: 'Invalid single handleDragOver handleFileDrop',\n      dragOver: ['application/pdf'],\n      fileDrop: [['test.pdf', 'application/pdf']],\n      invalidMessage: \"You can't upload files of type application/pdf\"\n    },\n    {\n      description: 'Invalid single unknown mimetype handleDragOver handleFileDrop',\n      dragOver: [''],\n      fileDrop: [['test.pkg', '']],\n      invalidMessage: \"You can't upload files of type unknown\",\n      invalidSafariIEMessage: \"You can't upload files of type .pkg\"\n    },\n    {\n      description: 'Invalid single .pem mimetype handleDragOver handleFileDrop',\n      dragOver: [''],\n      fileDrop: [['test.pkg', '']],\n      invalidMessage: \"You can't upload files of type .pkg\",\n      invalidSafariIEMessage: \"You can't upload files of type .pkg\",\n      mimeType: ['.pem']\n    },\n    {\n      description: 'Invalid single unknown no extension mimetype handleDragOver handleFileDrop',\n      dragOver: [''],\n      fileDrop: [['README', '']],\n      invalidMessage: \"You can't upload files of type unknown\"\n    },\n    {\n      description: 'Invalid multiple unknown mimetype handleDragOver handleFileDrop',\n      dragOver: ['', ''],\n      fileDrop: [\n        ['test.pkg', ''],\n        ['README', '']\n      ],\n      invalidMessage: \"You can't upload files of type unknown\",\n      invalidSafariIEMessage: \"You can't upload files of type: .pkg, unknown\"\n    },\n    {\n      description: 'Invalid multiple handleDragOver selectionMode single',\n      dragOver: ['image/png', 'image/png'],\n      invalidMessage: 'Upload one file at a time',\n      single: true\n    },\n    {\n      description: 'Invalid multiple handleDragOver handleFileDrop',\n      dragOver: ['application/pdf', 'application/pdf'],\n      fileDrop: [\n        ['test.pdf', 'application/pdf'],\n        ['test2.pdf', 'application/pdf']\n      ],\n      invalidMessage: \"You can't upload files of type application/pdf\"\n    },\n    {\n      description: 'Invalid multiple unique types handleDragOver handleFileDrop',\n      dragOver: ['application/pdf', 'video/mp4'],\n      fileDrop: [\n        ['test.pdf', 'application/pdf'],\n        ['test.mp4', 'video/mp4']\n      ],\n      invalidMessage: \"You can't upload files of type: application/pdf, video/mp4\"\n    }\n  ];\n  it('Invalid Scenarios', () => {\n    invalidTestDetails.forEach(async (test) => {\n      let invalidPromise = Promise.resolve();\n      const onRejection = (event: any) => {\n        const message = event.messages[0];\n        // TODO JET-53367 for safari/edge testing for preact components\n        const correctMessage =\n          getClientHints().browser === 'safari' && test.invalidSafariIEMessage\n            ? test.invalidSafariIEMessage\n            : test.invalidMessage;\n        expect(message.severity, 'Message severity is error').to.equal('error');\n        expect(message.summary, 'Message summary is correct').to.equal(correctMessage);\n        invalidPromise = event.until;\n        expectedCalls.invalidCalled = true;\n      };\n\n      const mimetypeDot = test.mimeType ? true : false;\n      const expectedCalls = { invalidCalled: false };\n\n      const filePickerRef = createRef();\n      const content = await setupFilePicker(\n        {\n          accept: test.mimeType ? test.mimeType : ['image/*'],\n          selectionMode: test.single ? 'single' : 'multiple',\n          onReject: onRejection\n        },\n        filePickerRef\n      );\n      const filePickerContent = content.container.firstElementChild as HTMLElement;\n      const eventObj = createInvalidDragOverEvent(\n        test.dragOver,\n        expectedCalls,\n        filePickerContent,\n        mimetypeDot\n      );\n      const data = filePickerRef.current;\n      data.onDragOver(eventObj.event);\n\n      await waitFor(() => {\n        eventObj.expectEventToBeCancelled();\n        eventObj.expectedCalls();\n      });\n\n      if (test.fileDrop) {\n        const dropEventObj = createInvalidDropEvent(test.fileDrop, expectedCalls, mimetypeDot);\n        data.onDrop(dropEventObj.event);\n        await invalidPromise;\n        dropEventObj.expectEventToBeCancelled();\n        dropEventObj.expectedCalls();\n      }\n      if (test.dragLeave) {\n        const dragLeaveEventObj = createDragLeaveEvent(content.container, filePickerContent);\n        data.onDragLeave(dragLeaveEventObj.event, mimetypeDot);\n        await invalidPromise;\n        dragLeaveEventObj.expectEventToBeCancelled();\n        dragLeaveEventObj.expectedCalls();\n      }\n    });\n  });\n\n  const validTestDetails = [\n    {\n      description: 'Valid single handleDragOver handleFileDrop',\n      dragOver: ['image/png'],\n      fileDrop: [['test.png', 'image/png']]\n    },\n    {\n      description: 'Valid .pem handleDragOver handleFileDrop',\n      dragOver: [''],\n      fileDrop: [['test.pem', '']],\n      mimeType: ['.pem']\n    },\n    {\n      description: 'Valid multiple handleDragOver handleFileDrop',\n      dragOver: ['image/png', 'image/png'],\n      fileDrop: [\n        ['test.png', 'image/png'],\n        ['test2.png', 'image/png']\n      ]\n    }\n  ];\n  it('Valid Scenarios', () => {\n    validTestDetails.forEach(async (test) => {\n      const onCommit = (event: any) => {\n        const files = event.files;\n        let file;\n        for (let i = 0; i < files.length; i++) {\n          file = files[i];\n          expect(file.name, 'File name is correct').to.equal(test.fileDrop[i][0]);\n          expect(file.type, 'File type is correct').to.equal(test.fileDrop[i][1]);\n        }\n        expectedCalls.selectCalled = true;\n      };\n      const onReject = () => {\n        expect(false, 'Invalid Select Listener should not be called').to.be.true;\n      };\n      const filePickerRef = createRef();\n      const content = await setupFilePicker(\n        {\n          accept: test.mimeType ? test.mimeType : ['image/*'],\n          onReject: onReject,\n          onCommit: onCommit\n        },\n        filePickerRef\n      );\n      const expectedCalls = { selectCalled: false };\n      const filePickerContent = content.container.firstElementChild as HTMLElement;\n      const data = filePickerRef.current;\n      const eventObj = createValidDragOverEvent(test.dragOver, filePickerContent);\n      data.onDragOver(eventObj.event);\n\n      await waitFor(() => {\n        eventObj.expectEventToBeCancelled();\n        eventObj.expectedCalls();\n      });\n\n      const dropEventObj = createValidDropEvent(test.fileDrop, expectedCalls);\n      data.onDrop(dropEventObj.event);\n\n      await waitFor(() => {\n        dropEventObj.expectEventToBeCancelled();\n        dropEventObj.expectedCalls();\n      });\n    });\n  });\n  it('handleFileSelected (click listener)', async () => {\n    let resolver: any;\n    const expectedCalls = { select: false };\n    const fileType = 'image/png';\n    const fileName = 'test.png';\n    const invalidPromise = new Promise((resolve) => {\n      resolver = resolve;\n    });\n    const filePickerRef = createRef();\n    const commitListener = (event: CommitDetail) => {\n      const file = event.files[0];\n      expect(file.name, 'File name is correct').to.equal(fileName);\n      expect(file.type, 'File type is correct').to.equal(fileType);\n      expectedCalls.select = true;\n      resolver();\n    };\n    await setupFilePicker({ accept: ['image/*'], onCommit: commitListener }, filePickerRef);\n    const data = filePickerRef.current;\n    const expectedCallsFunc = createExpectedCalls(expectedCalls);\n    data.onClickSelected([{ name: fileName, type: fileType }]);\n    await invalidPromise;\n    expectedCallsFunc();\n  });\n\n  if (getClientHints().browser === 'edge') {\n    it('handleFileSelected invalid file Edge(click listener)', async () => {\n      const onRejection = (event: any) => {\n        const message = event.detail.messages[0];\n        expect(message.severity, 'Message severity is error').to.equal('error');\n        expect(message.summary, 'Message summary is correct').to.equal(\n          \"You can't upload files of type \" + fileType + '.'\n        );\n        expectedCalls.invalid = true;\n        resolver();\n      };\n      const expectedCalls = { invalid: false };\n      const filePickerRef = createRef();\n      const FilePickerContainer = await setupFilePicker(\n        {\n          onReject: onRejection\n        },\n        filePickerRef\n      );\n      render(FilePickerContainer);\n      const data = filePickerRef.current;\n      const fileName = 'test.pdf';\n      const fileType = 'document/pdf';\n      let resolver: any;\n      const invalidPromise = new Promise((resolve, reject) => {\n        resolver = resolve;\n        reject = reject;\n      });\n      const expectedCallsFunc = createExpectedCalls(expectedCalls);\n      data.onClickSelected([{ name: fileName, type: fileType }]);\n      await invalidPromise;\n      expectedCallsFunc();\n    });\n  }\n});\ndescribe('File Picker - TabbableModeContext', () => {\n  it(' RootEnvironmentProvider is not present', async () => {\n    const content = await setupFilePicker();\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    const tabindex = firstElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('0');\n  });\n\n  it('TabbableModeContext isTabbable=true', async () => {\n    const filePicker = <FilePicker></FilePicker>;\n    const content = await setupTabbableComponent(filePicker, true);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n\n    const tabindex = firstElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('0');\n  });\n\n  it('TabbableModeContext isTabbable=false', async () => {\n    const filePicker = <FilePicker></FilePicker>;\n    const content = await setupTabbableComponent(filePicker, false);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    const tabindex = firstElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('-1');\n  });\n\n  it('TabbableModeContext not provided', async () => {\n    const filePicker = <FilePicker></FilePicker>;\n    const content = await setupTabbableComponent(filePicker);\n    const firstElement = content.container.firstElementChild as HTMLElement;\n    const tabindex = firstElement?.getAttribute('tabindex');\n    expect(tabindex).to.equal('0');\n  });\n});\n\nconst setupFilePicker = async (props: filePickerProps = {}, ref?: TestHandlersRef) => {\n  const locale = matchTranslationBundle(['en'], new Set(['en-US', 'en']));\n  const { default: translations } = await import(`../../resources/nls/${locale}/bundle.ts`);\n  const env: Partial<RootEnvironment> = {\n    translations: { '@oracle/oraclejet-preact': translations }\n  };\n  let filePicker;\n  if (ref) {\n    const RefWrapper = forwardRef(TestFilePicker);\n    filePicker = <RefWrapper ref={ref} {...props}></RefWrapper>;\n  } else {\n    filePicker = <FilePicker {...props}></FilePicker>;\n  }\n\n  return render(<RootEnvironmentProvider environment={env}>{filePicker}</RootEnvironmentProvider>);\n};\n\nconst TestFilePicker = (props: filePickerProps, testHandlersRef: TestHandlersRef) => {\n  const BaseFilePicker = FilePicker as any;\n  const testProps = { __testHandlerSymbol: testHandlersRef, ...props };\n  return <BaseFilePicker {...testProps}></BaseFilePicker>;\n};\n\nconst createEvent = () => {\n  let defaultPrevented = false;\n  let propagationStopped = false;\n  return {\n    event: {\n      preventDefault: () => {\n        defaultPrevented = true;\n      },\n      stopPropagation: () => {\n        propagationStopped = true;\n      }\n    },\n    expectEventToBeCancelled: () => {\n      expect(defaultPrevented, 'Default prevented').to.be.true;\n      expect(propagationStopped, 'Propagation stopped').to.be.true;\n    }\n  };\n};\n\nconst createDragOverEvent = (types: Array<string>) => {\n  const eventObj = createEvent() as any;\n  const files = [] as Array<object>;\n  for (const type of types) {\n    files.push({ kind: 'file', type: type });\n  }\n  // TODO JET-53367 for safari/edge testing for preact components\n  const isSafari = getClientHints().browser === 'safari';\n  const dataTransfer = isSafari ? null : { items: files };\n  eventObj.event.dataTransfer = dataTransfer;\n\n  return eventObj;\n};\n\nconst createDropEvent = (types: Array<Array<string>>) => {\n  const eventObj = createEvent() as any;\n  const files = [] as Array<object>;\n  let type;\n\n  for (let i = 0; i < types.length; i++) {\n    type = types[i];\n    files.push({ name: type[0], type: type[1] });\n  }\n  eventObj.event.dataTransfer = { files: files };\n  return eventObj;\n};\n\nconst createValidDropEvent = (types: Array<Array<string>>, expectedCalls: any) => {\n  const eventObj = createDropEvent(types);\n  eventObj.expectedCalls = () => {\n    expect(expectedCalls.selectCalled, 'Select Listener Event fired').to.be.true;\n  };\n  return eventObj;\n};\n\nconst createValidDragOverEvent = (types: Array<string>, filepicker: HTMLElement) => {\n  const eventObj = createDragOverEvent(types);\n  eventObj.expectedCalls = () => {\n    expect(filepicker.querySelector('.oj-c-valid-drop') !== null, 'Overlay shown').to.be.true;\n  };\n  return eventObj;\n};\n\nconst createInvalidDragOverEvent = (\n  types: Array<string>,\n  expectedCalls: any,\n  filepicker: HTMLElement,\n  mimeTypeDot: boolean\n) => {\n  const eventObj = createDragOverEvent(types);\n  eventObj.expectedCalls = () => {\n    // TODO JET-53367 for safari/edge testing for preact components\n    // In IE and Safari, invalid select event isn't fired until drop\n    const isSafari = getClientHints().browser === 'safari';\n    if (isSafari || mimeTypeDot) {\n      expect(filepicker.querySelector('.oj-c-valid-drop') !== null, 'Overlay shown').to.be.true;\n      expect(expectedCalls.invalidCalled, 'Invalid Listener Event not fired in IE or Safari').to.be\n        .false;\n    } else {\n      expect(expectedCalls.invalidCalled, 'Invalid Listener Event fired').to.be.true;\n    }\n  };\n  return eventObj;\n};\n\nconst createInvalidDropEvent = (\n  types: Array<Array<string>>,\n  expectedCalls: any,\n  mimeTypeDot: boolean\n) => {\n  const eventObj = createDropEvent(types);\n  eventObj.expectedCalls = () => {\n    // TODO JET-53367 for safari/edge testing for preact components\n    const isSafari = getClientHints().browser === 'safari';\n    if (isSafari || mimeTypeDot) {\n      expect(expectedCalls.invalidCalled, 'Invalid Listener Event fired').to.be.true;\n    }\n  };\n  return eventObj;\n};\n\nconst createDragLeaveEvent = (container: Element, filepicker: HTMLElement) => {\n  const eventObj = createEvent() as any;\n  eventObj.event.relatedTarget = container;\n  // TODO JET-53367 for safari/edge testing for preact components\n  const isSafari = getClientHints().browser === 'safari';\n  eventObj.expectedCalls = () => {\n    // In IE and Safari, invalid select event isn't fired until drop\n    if (isSafari) {\n      expect(filepicker.querySelector('.oj-c-invalid-drop') === null, 'Invalid State removed').to.be\n        .true;\n    } else {\n      expect(filepicker.querySelector('.oj-c-valid-drop') === null, 'Overlay removed').to.be.true;\n    }\n  };\n  return eventObj;\n};\n\nconst createExpectedCalls = (calls: any) => {\n  return () => {\n    for (const call of Object.keys(calls)) {\n      expect(calls[call], call + ' Listener Event fired').to.be.true;\n    }\n  };\n};\n"],"names":["describe","it","async","classList","setupFilePicker","accept","container","firstElementChild","expect","length","equals","firstElement","focus","focusElement","document","activeElement","contains","blur","not","elementClasses","_a","value","to","be","a","that","content","primaryText","findByText","null","secondaryText","getAttribute","filePickerRef","createRef","eventObj","createEvent","current","onDragEnter","event","waitFor","expectEventToBeCancelled","invalidTestDetails","description","dragOver","dragLeave","invalidMessage","fileDrop","invalidSafariIEMessage","mimeType","single","forEach","test","invalidPromise","Promise","resolve","mimetypeDot","expectedCalls","invalidCalled","selectionMode","onReject","message","messages","correctMessage","getClientHints","browser","severity","equal","summary","until","filePickerContent","createInvalidDragOverEvent","data","onDragOver","dropEventObj","createInvalidDropEvent","onDrop","dragLeaveEventObj","createDragLeaveEvent","onDragLeave","validTestDetails","true","onCommit","files","file","i","name","type","selectCalled","createValidDragOverEvent","createValidDropEvent","resolver","select","fileType","fileName","expectedCallsFunc","createExpectedCalls","onClickSelected","invalid","FilePickerContainer","detail","render","reject","tabindex","filePicker","_jsx","FilePicker","setupTabbableComponent","props","ref","locale","matchTranslationBundle","Set","default","translations","__variableDynamicImportRuntime0__","env","RefWrapper","forwardRef","TestFilePicker","Object","assign","jsx","RootEnvironmentProvider","environment","children","testHandlersRef","BaseFilePicker","testProps","__testHandlerSymbol","defaultPrevented","propagationStopped","preventDefault","stopPropagation","createDragOverEvent","types","push","kind","dataTransfer","items","createDropEvent","filepicker","querySelector","mimeTypeDot","false","relatedTarget","isSafari","calls","call","keys"],"mappings":"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"}