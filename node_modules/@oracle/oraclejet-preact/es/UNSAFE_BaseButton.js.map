{"version":3,"file":"UNSAFE_BaseButton.js","sources":["../../src/UNSAFE_BaseButton/BaseButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Vers.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { useActive } from '../hooks/UNSAFE_useActive';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\ntype BaseButtonElementDetails =\n  | { type: 'button' }\n  | { type: 'a'; href: string; target?: string; rel?: string }\n  | { type: 'span' };\nconst NullFunction = () => null;\n\ntype IntrinsicProps = Pick<\n  HTMLAttributesSignalExcluded<HTMLElement>,\n  | 'autofocus'\n  | 'title'\n  | 'onBlur'\n  | 'onFocus'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onTouchEnd'\n  | 'onTouchStart'\n>;\nexport type StylingOptions =\n  | 'default'\n  | 'min'\n  | 'embedded'\n  | 'container'\n  | 'unstyled'\n  | 'fill'\n  | 'noBorderRadiusEnd'\n  | 'noBorderRadiusStart'\n  | 'active';\n\ntype AriaProps = {\n  ariaHidden?: boolean;\n  ariaExpanded?: boolean;\n  ariaRoledescription?: string;\n};\n\nexport type Props = IntrinsicProps &\n  AriaProps &\n  DimensionProps & {\n    /**\n     *The default slot is the button's text label. The oj-c-base-button element accepts plain text or DOM nodes as children for the default slot.\"\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Specifies if repeated events are dispatched for key or pointer held down\n     */\n    isRepeat?: boolean;\n\n    /**\n     *\n     * Indicates in what states the button has chrome (background and border).\n     *     \"ghost\": \"Ghost buttons are the least prominent variation.  Ghost buttons are\n     * useful for performing low-priority tasks, such as manipulating the UI.\",\n     *     \"borderless\"': \"Borderless buttons are a more prominent variation. Borderless\n     * buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\"\n     */\n    variant?: 'ghost' | 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';\n\n    /**\n     * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * Edge can be used to specify that the button is intended to go at the bottom of\n     * a region, stretching from left to right: \"bottom\" or \"none\" (default).\n     */\n    edge?: 'none' | 'bottom';\n\n    /**\n     * The accessibleLabel is used to provide guidance for screen readers.\n     */\n    accessibleLabel?: string;\n\n    /**\n     * Styling can be used for customizing buttons by removing label padding (\"min\") or\n     * removing all styling (\"unstyled\").\n     */\n    styling?: StylingOptions[];\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void;\n\n    /**\n     * Indicate element type and associated details\n     */\n    elementDetails?: BaseButtonElementDetails;\n\n    /**\n     * The ID of an element (or space separated IDs of multiple elements) that\n     * describes the button.\n     */\n    'aria-describedby'?: string;\n  };\n\nconst activeStyles = {\n  backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-bg-color-active)',\n  borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-active)',\n  color: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-color-active)'\n};\n\nconst hoverStyles = {\n  backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-bg-color-hover)',\n  borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-hover)',\n  color: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-color-hover)'\n};\n\nconst compStyles = {\n  base: cssProps`${{\n    alignItems: 'center',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-bg-color)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-radius)',\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    boxSizing: 'border-box',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-color)',\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n    display: 'inline-block',\n    fontFamily: 'inherit',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-font-size)',\n    fontWeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-font-weight)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-height)',\n    justifyContent: 'center',\n    minWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-height)',\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    paddingInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-to-edge-padding)',\n    paddingInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-to-edge-padding)',\n    paddingTop: 0,\n    paddingBottom: 0,\n    pointerEvents: 'auto',\n    textOverflow: 'ellipsis',\n    verticalAlign: 'top',\n    WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n    whiteSpace: 'nowrap',\n\n    // @ts-ignore\n    '&:active': activeStyles,\n\n    '&:focus-visible': {\n      outlineStyle: 'dotted',\n      outlineOffset: '1px',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)'\n    }\n  }}`,\n\n  hover: cssProps`${{\n    // @ts-ignore\n    '&:not(:active)': hoverStyles\n  }}`,\n\n  active: cssProps`${activeStyles}`,\n\n  pseudohover: cssProps`${{\n    // @ts-ignore\n    '@media(hover: hover)': {\n      '&:hover:enabled:not(:active)': hoverStyles\n    }\n  }}`,\n\n  pseudohoverSpan: cssProps`${{\n    // @ts-ignore\n    '@media(hover: hover)': {\n      '&:hover:not(:active)': hoverStyles\n    }\n  }}`,\n\n  unstyled: cssProps`${{\n    boxSizing: 'border-box',\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-height)'\n  }}`,\n\n  min: cssProps`${{\n    paddingInlineStart: '0',\n    paddingInlineEnd: '0'\n  }}`,\n\n  fill: cssProps`${{\n    width: '100%'\n  }}`,\n\n  container: cssProps`\n   ${{\n     backgroundColor: 'transparent',\n     borderStyle: 'hidden',\n     cursor: 'none',\n     display: 'flex',\n     '&:active': {\n       backgroundColor: 'transparent',\n       borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color)'\n     }\n   }}\n `,\n\n  embedded: cssProps`\n   ${{\n     height: '100%',\n     display: 'flex',\n     '&:focus-visible': {\n       outlineStyle: 'none'\n     }\n   }}\n `,\n\n  noBorderRadiusStart: cssProps`\n ${{\n   borderStartStartRadius: 0,\n   borderEndStartRadius: 0,\n   borderInlineStartWidth: '0px'\n }}\n `,\n\n  noBorderRadiusEnd: cssProps`\n ${{\n   borderEndEndRadius: 0,\n   borderStartEndRadius: 0,\n   borderInlineEndWidth: '0px'\n }}\n `,\n\n  disabled: cssProps`${{\n    pointerEvents: 'none',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-bg-color-disabled)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-disabled)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-color-disabled)'\n  }}`,\n\n  bottom: cssProps`${{\n    borderLeftWidth: '0',\n    borderRightWidth: '0',\n    borderBlockEndWidth: '0',\n    width: '100%',\n    borderTopLeftRadius: '0',\n    borderTopRightRadius: '0'\n  }}`\n};\n\nconst childrenStyles = cssProps`${{\n  /* @ts-ignore */\n  '& > *': {\n    marginTop: '0 !important',\n    marginBottom: '0 !important',\n    marginLeft: '0 !important',\n    marginRight: '0 !important'\n  }\n}}`;\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\n\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\nconst clientHints = getClientHints();\n// :active only works on IOS devices if a touch handler exists\nconst iosProps = clientHints.platform === 'ios' ? { ontouchstart: function () {} } : {};\nconst isHybrid = getClientHints().hoverSupport === 'events';\n\nconst roleProps = (elType: string, hidden: boolean) => {\n  switch (elType) {\n    case 'link':\n      return { role: 'link' };\n    case 'button':\n      return {};\n    default:\n      return hidden ? { role: 'generic' } : { role: 'button' };\n  }\n};\n\nexport const BaseButton = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isDisabled = false,\n      isRepeat = false,\n      size = 'md',\n      elementDetails = { type: 'button' },\n      styling = ['default'],\n      edge = 'none',\n      accessibleLabel,\n      ariaHidden,\n      ariaExpanded,\n      ariaRoledescription,\n      'aria-describedby': ariaDescribedBy,\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart,\n      ...props\n    }: Props,\n    ref?:\n      | ForwardedRef<HTMLButtonElement>\n      | ForwardedRef<HTMLAnchorElement>\n      | ForwardedRef<HTMLSpanElement>\n  ) => {\n    const { pressProps } = usePress(props.onAction ? props.onAction : NullFunction, {\n      isDisabled,\n      isRepeat\n    });\n    const isStyled = (name: StylingOptions) => {\n      return styling.indexOf(name) > -1;\n    };\n    const { hoverProps, isHover } = useHover({ isDisabled: !isHybrid });\n    const { activeProps, isActive } = useActive();\n    const { class: cls, ...styles } = styleInterpolations(props);\n    const { type: elementType = 'button', ...elementProps } = { ...elementDetails };\n    const role = roleProps(elementType, ariaHidden ?? false);\n    const tooltip = props.title || accessibleLabel;\n    const ElementType = elementDetails.type;\n    const isSpan = ElementType == 'span';\n    const isBaseButton = ElementType == 'button';\n    const { isTabbable } = useTabbableMode();\n    const rootStyles = classNames([\n      !isStyled('unstyled') && compStyles.base,\n      isStyled('unstyled') && compStyles.unstyled,\n      isStyled('embedded') && compStyles.embedded,\n      isStyled('container') && compStyles.container,\n      isStyled('noBorderRadiusStart') && compStyles.noBorderRadiusStart,\n      isStyled('noBorderRadiusEnd') && compStyles.noBorderRadiusEnd,\n      isStyled('active') && compStyles.active,\n      isStyled('fill') && compStyles.fill,\n      isStyled('min') && compStyles.min,\n      `oj-c-base-button-${variant}`,\n      `oj-c-base-button-${size}`,\n      isDisabled && compStyles.disabled,\n      edge === 'bottom' && compStyles.bottom,\n      !isHybrid && !isSpan && !isActive && compStyles.pseudohover,\n      !isHybrid &&\n        isSpan &&\n        !isActive &&\n        !isDisabled &&\n        !isStyled('container') &&\n        compStyles.pseudohoverSpan,\n      isHybrid && isHover && !isActive && !isDisabled && !isStyled('container') && compStyles.hover,\n      !isStyled('container') && isActive && !isDisabled && compStyles.active,\n      childrenStyles\n    ]);\n\n    const globalEventProps = {\n      ariaDescribedBy,\n      onBlur,\n      onFocus,\n      onMouseEnter,\n      onMouseLeave,\n      onTouchEnd,\n      onTouchStart\n    };\n\n    const mergedProps = mergeProps(\n      elementProps,\n      pressProps,\n      iosProps,\n      hoverProps,\n      isStyled('container') ? {} : activeProps,\n      isBaseButton ? {} : { 'aria-disabled': isDisabled },\n      globalEventProps\n    );\n\n    return (\n      <ElementType\n        // The ref casting was done to satisfy TS compiler, when the forwardRef had to be updated to ForwardedRef.\n        ref={\n          ref as ForwardedRef<HTMLButtonElement> &\n            ForwardedRef<HTMLAnchorElement> &\n            ForwardedRef<HTMLSpanElement>\n        }\n        disabled={isDisabled}\n        class={`${rootStyles} ${cls}`}\n        style={styles}\n        autofocus={props['autofocus']}\n        title={tooltip}\n        tabIndex={isDisabled || !isTabbable ? -1 : 0}\n        aria-label={accessibleLabel}\n        aria-hidden={ariaHidden}\n        aria-roledescription={ariaRoledescription}\n        aria-expanded={ariaExpanded}\n        {...mergedProps}\n        {...role}>\n        {props.children}\n      </ElementType>\n    );\n  }\n);\n"],"names":["NullFunction","activeStyles","backgroundColor","borderColor","color","hoverStyles","compStyles","active","childrenStyles","interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","clientHints","getClientHints","iosProps","platform","ontouchstart","isHybrid","hoverSupport","roleProps","elType","hidden","role","BaseButton","forwardRef","_a","ref","variant","isDisabled","isRepeat","size","elementDetails","type","styling","edge","accessibleLabel","ariaHidden","ariaExpanded","ariaRoledescription","ariaDescribedBy","onBlur","onFocus","onMouseEnter","onMouseLeave","onTouchEnd","onTouchStart","props","__rest","pressProps","usePress","onAction","isStyled","name","hoverProps","isHover","useHover","_b","class","cls","styles","_c","assign","elementType","elementProps","tooltip","title","ElementType","isSpan","isBaseButton","isTabbable","useTabbableMode","base","unstyled","embedded","container","noBorderRadiusStart","noBorderRadiusEnd","fill","min","bottom","isActive","pseudohoverSpan","hover","globalEventProps","mergedProps","mergeProps","activeProps","disabled","rootStyles","style","autofocus","tabIndex","children"],"mappings":"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"}