{"version":3,"file":"UNSAFE_Collapsible.js","sources":["../../src/UNSAFE_Collapsible/CollapsibleHeaderIcon.tsx","../../src/UNSAFE_Collapsible/CollapsibleHeader.tsx","../../src/UNSAFE_Collapsible/CollapsibleContent.tsx","../../src/UNSAFE_Collapsible/Collapsible.tsx","../../src/UNSAFE_Collapsible/index.ts"],"sourcesContent":["import { ExpandIcon, CollapseIcon, CollapseUpIcon } from '../UNSAFE_ThemedIcons';\n\ntype IconProps = {\n  isExpanded: boolean;\n  iconPosition?: 'start' | 'end';\n};\n\n/**\n * Header icon subcomponent\n */\nexport const CollapsibleHeaderIcon = ({ isExpanded, iconPosition }: IconProps) => {\n  const startIcon = iconPosition === 'start' && isExpanded ? ExpandIcon : CollapseIcon;\n  const endIcon = iconPosition === 'end' && isExpanded ? CollapseUpIcon : ExpandIcon;\n  const Icon = iconPosition === 'start' ? startIcon : endIcon;\n\n  return <Icon size=\"6x\" />;\n};\n","import { Fragment } from 'preact';\nimport { useCallback } from 'preact/hooks';\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Divider } from '../UNSAFE_Divider';\nimport { CollapsibleHeaderIcon } from './CollapsibleHeaderIcon';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { usePress } from '../hooks/UNSAFE_usePress';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'id' | 'children'>;\n\ntype HeaderProps = IntrinsicProps & {\n  id: string;\n  contentId: string;\n  isDisabled: boolean;\n  isExpanded: boolean;\n  iconPosition?: 'start' | 'end';\n  variant?: 'basic' | 'horizontal-rule';\n  toggleHandler: (target: EventTarget | null) => void;\n};\n\nconst styles = {\n  base: cssProps`${{\n    cursor: 'pointer',\n    '&:focus-visible': {\n      outlineStyle: 'dotted',\n      outlineOffset: '1px',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)'\n    }\n  }}`,\n  expanded: cssProps`${{\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x)'\n  }}`,\n  disabled: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-disabled)',\n    cursor: 'auto'\n  }}`,\n  divider: cssProps`${{\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)'\n  }}`\n};\n\nconst childrenStylesBase = {\n  base: cssProps`${{\n    flexGrow: 1,\n    /* @ts-ignore */\n    '& > *': {\n      marginTop: '0 !important',\n      marginBottom: '0 !important',\n      marginLeft: '0 !important',\n      marginRight: '0 !important'\n    }\n  }}`,\n  iconStart: cssProps`${{\n    paddingInlineStart: '16px'\n  }}`,\n  iconEnd: cssProps`${{\n    paddingInlineEnd: '16px'\n  }}`\n};\n\n/**\n * Header subcomponent\n */\n\nexport const CollapsibleHeader = ({\n  children,\n  id,\n  contentId,\n  isDisabled,\n  isExpanded,\n  iconPosition,\n  variant = 'basic',\n  toggleHandler\n}: HeaderProps) => {\n  const classes = classNames([\n    styles.base,\n    variant === 'horizontal-rule' && styles.divider,\n    isExpanded && variant !== 'horizontal-rule' && styles.expanded,\n    isDisabled && styles.disabled\n  ]);\n\n  const childrenClasses = classNames([\n    childrenStylesBase.base,\n    iconPosition === 'end' && childrenStylesBase.iconEnd,\n    iconPosition === 'start' && childrenStylesBase.iconStart\n  ]);\n\n  const pressHandler = useCallback(\n    (event: Event) => {\n      toggleHandler(event.target);\n    },\n    [toggleHandler]\n  );\n\n  const { pressProps } = usePress(pressHandler, {\n    isDisabled,\n    isRepeat: false\n  });\n\n  const getHeader = () => (\n    <Fragment>\n      {iconPosition === 'end' && <div className={childrenClasses}>{children}</div>}\n      <CollapsibleHeaderIcon iconPosition={iconPosition} isExpanded={isExpanded} />\n      {iconPosition === 'start' && <div className={childrenClasses}>{children}</div>}\n    </Fragment>\n  );\n\n  return (\n    <>\n      <div\n        role={'button'}\n        aria-controls={contentId}\n        aria-expanded={isExpanded}\n        id={id}\n        tabIndex={0}\n        className={classes}\n        {...pressProps}>\n        <Flex align=\"center\" justify={iconPosition === 'start' ? 'start' : 'between'}>\n          {getHeader()}\n        </Flex>\n      </div>\n      {variant === 'horizontal-rule' && <Divider />}\n    </>\n  );\n};\n","import { JSX } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { useAnimation, UseAnimationConfig } from '../hooks/UNSAFE_useAnimation';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children'>;\n\ntype ContentProps = IntrinsicProps & {\n  id: string;\n  isExpanded: boolean;\n  onTransitionEnd: () => void;\n};\n\n/**\n * The 'collapsing' and 'expanding' states are related to the animation. The 'unmounted' state\n * is used for conditional rendering. In this state, the Collapsible content is completely removed\n * from the DOM. The 'unmounted' state is set either as an initial state or when collapsing\n * animation ends.\n */\ntype Status = 'collapsing' | 'expanding' | 'unmounted';\n\nconst styles = cssProps`${{\n  /* @ts-ignore */\n  '& > *': {\n    marginTop: '0 !important',\n    marginBottom: '0 !important',\n    marginLeft: '0 !important',\n    marginRight: '0 !important'\n  }\n}}`;\n\nexport const CollapsibleContent = ({ children, id, isExpanded, onTransitionEnd }: ContentProps) => {\n  const [state, setState] = useState<Status>(isExpanded ? 'expanding' : 'unmounted');\n\n  /**\n   * 1. On initial render, Preact sets style.maxHeight field to 0 or 'none'.\n   * 2. During expanding animation, useAnimation hook uses WAAPI to animate the maxHeight out\n   *    to the expanded value.\n   * 3. On subsequent re-renders, Preact does never updates the style.maxHeight value\n   *    because even though we are telling Preact that maxHeight should be 0 or 'none', Preact\n   *    considers the maxHeight value is 0 or 'none' as it is not aware that we changed this value\n   *    in step 2. So from Preact's perspective there is no difference.\n   */\n  const contentInitialStyle = useRef<JSX.CSSProperties>({\n    overflowY: 'hidden',\n    maxHeight: isExpanded ? 'none' : '0'\n  });\n\n  useEffect(() => {\n    // Ignore state update on initial render\n    if (state === 'unmounted' && !isExpanded) {\n      return;\n    }\n    setState(isExpanded ? 'expanding' : 'collapsing');\n  }, [isExpanded, state]);\n\n  const { nodeRef } = useAnimation<Status, HTMLDivElement>(state, {\n    animationStates,\n    onAnimationEnd: ({ animationState }) => {\n      if (animationState === 'collapsing') {\n        setState('unmounted');\n      }\n      onTransitionEnd?.();\n    }\n  });\n\n  return (\n    <div\n      className={styles}\n      ref={nodeRef}\n      id={id}\n      tabIndex={-1}\n      style={contentInitialStyle.current}\n      aria-hidden={!isExpanded || undefined}>\n      {state !== 'unmounted' && children}\n    </div>\n  );\n};\n\n/**\n * The transition from collapsed to expanded works as follows:\n * 1. When the component is initially rendered in the collapsed state, we\n *    explicitly set maxHeight and overflowY from \"to\" configuration.\n * 2. When the expanded prop changes from false to true, we first mount the content children.\n * 3. Once this is mounted we trigger an animation updating animationState value of useAnimationHook.\n * 4. Configuration is represented inside hook. Passed config depends if previous animation was completed or not.\n *    We could check that based on node.style.maxHeight.\n *\n * The transition from expanded to collapsed is similar:\n * 1. We trigger an animation updating animationState value of useAnimationHook.\n * 2. Once animation is completed, with the help of end config,we set max-Height as 'none'.\n *    This will allow us to keep adding content.\n * 3. Once this is done, onAnimationEnd is called(as 'from collapsed to expanded\"). Here, content children are unmouunted.\n */\nconst animationStates: UseAnimationConfig<Status, HTMLDivElement>['animationStates'] = {\n  expanding: (node) => ({\n    to: {\n      maxHeight: `${node.scrollHeight}px`\n    },\n    options: {\n      duration: 400\n    },\n    end: {\n      maxHeight: 'none'\n    }\n  }),\n  collapsing: (node) => ({\n    ...(node.style.maxHeight === 'none' && {\n      from: {\n        maxHeight: `${node.scrollHeight}px`\n      }\n    }),\n    to: {\n      maxHeight: '0'\n    },\n    options: {\n      duration: 400\n    }\n  })\n};\n","import { ComponentChildren } from 'preact';\nimport { useRef, useCallback } from 'preact/hooks';\nimport { useId } from '../hooks/UNSAFE_useId';\nimport { CollapsibleHeader } from './CollapsibleHeader';\nimport { CollapsibleContent } from './CollapsibleContent';\n\ntype Props = {\n  /**\n   * Id of the component\n   */\n  id?: string;\n\n  /**\n   * Collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.\n   */\n  header?: ComponentChildren;\n\n  /**\n   * The content node to be collapsed\n   */\n  children?: ComponentChildren;\n\n  /**\n   * Disables the collapsible if set to true\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies if the content is expanded\n   */\n  isExpanded?: boolean;\n\n  /**\n   * Changes chevron icon placement at the end of the collapsible header\n   */\n  iconPosition?: 'start' | 'end';\n\n  /**\n   * Controls the header display which con include a divider below the collapsible header\n   */\n  variant?: 'basic' | 'horizontal-rule';\n\n  /**\n   * Property that triggers a callback immediately when toggle happens and value of expanded property should be updated\n   */\n  onToggle?: (details: ToggleDetail) => void;\n\n  /**\n   * Property that triggers a callback after toggle animation is done\n   */\n  onTransitionEnd?: (details: TransitionEnd) => void;\n};\n\ntype ToggleDetail = TransitionEnd & {\n  target: EventTarget | null;\n};\n\ntype TransitionEnd = {\n  value: boolean;\n};\n\n/**\n * A collapsible displays a header that can be expanded to show its content.\n */\n\nexport const Collapsible = ({\n  id,\n  header,\n  children,\n  isDisabled = false,\n  isExpanded = false,\n  iconPosition = 'start',\n  variant = 'basic',\n  onToggle,\n  onTransitionEnd\n}: Props) => {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const uniqueID = useId();\n  const headerId = `oj-collapsible-header-${uniqueID}`;\n  const contentId = `oj-collapsible-content-${uniqueID}`;\n\n  /**\n   * Function handling toggle and invoking callback for collapsing/expanding\n   */\n  const toggleHandler = useCallback(\n    (target: EventTarget | null) => {\n      if (isDisabled) {\n        return;\n      }\n      onToggle?.({\n        value: !isExpanded,\n        target\n      });\n    },\n    [isDisabled, onToggle, isExpanded]\n  );\n\n  /**\n   * Function that is triggerd when animation ends\n   */\n  const transitionEndHandler = useCallback(() => {\n    onTransitionEnd?.({\n      value: isExpanded\n    });\n  }, [onTransitionEnd, isExpanded]);\n\n  return (\n    <div id={id} ref={rootRef}>\n      <CollapsibleHeader\n        id={headerId}\n        contentId={contentId}\n        toggleHandler={toggleHandler}\n        isDisabled={isDisabled}\n        isExpanded={isExpanded}\n        iconPosition={iconPosition}\n        variant={variant}>\n        {header}\n      </CollapsibleHeader>\n      <CollapsibleContent\n        id={contentId}\n        isExpanded={isExpanded}\n        onTransitionEnd={transitionEndHandler}>\n        {children}\n      </CollapsibleContent>\n    </div>\n  );\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { Collapsible } from './Collapsible';\n"],"names":["ExpandIcon","CollapseUpIcon","_jsx","styles","childrenStylesBase","CollapsibleHeader","children","id","contentId","isDisabled","isExpanded","iconPosition","variant","toggleHandler","base","divider","expanded","iconEnd","iconStart","pressHandler","useCallback","event","target","pressProps","usePress","isRepeat","_jsxs","_Fragment","Object","assign","role","tabIndex","className","classes","Flex","align","justify","getHeader","Divider","CollapsibleContent","onTransitionEnd","state","setState","useState","overflowY","nodeRef","useAnimation","onAnimationEnd","animationState","ref","style","contentInitialStyle","current","undefined","animationStates","expanding","node","to","maxHeight","scrollHeight","options","duration","end","collapsing","from"],"mappings":"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"}