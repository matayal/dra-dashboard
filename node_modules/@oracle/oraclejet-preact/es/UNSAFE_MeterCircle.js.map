{"version":3,"file":"UNSAFE_MeterCircle.js","sources":["../../src/UNSAFE_MeterCircle/CircularReferenceLine.tsx","../../src/UNSAFE_MeterCircle/CircleMeterUtils.ts","../../src/UNSAFE_MeterCircle/LayoutUtils.ts","../../src/UNSAFE_MeterCircle/MeterCircle.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { getCenterCoord } from '../utils/PRIVATE_meterUtils';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { DvtThresholdsColors, getDvtThresholdColor } from '../utils/UNSAFE_dvtCommonUtils';\n\ntype getCenterCoordParamType = Parameters<typeof getCenterCoord>;\n\nexport type CircularReferenceLineProps = {\n  color?: ColorProps['color'] | DvtThresholdsColors;\n  angle: number;\n  radius: string;\n  length: string;\n  section: getCenterCoordParamType[0];\n};\n\nexport function CircularReferenceLine({\n  color,\n  angle,\n  radius,\n  length,\n  section = 'full'\n}: CircularReferenceLineProps) {\n  const centerCoord = getCenterCoord(section);\n  const yOffset = `calc(${centerCoord.y * 100}% - ((${Math.sin(\n    (angle * 2 * Math.PI) / 360\n  )} * ${radius})))`;\n  const xOffset = `calc(${centerCoord.x * 100}%  + ((${Math.cos(\n    (angle * 2 * Math.PI) / 360\n  )} * ${radius})))`;\n\n  return (\n    <div\n      class={referenceLineStyles.base}\n      style={{\n        left: xOffset,\n        top: yOffset,\n        width: `calc(${length})`,\n        transform: `translate(0, -1px) rotate(${360 - angle}deg)`,\n        backgroundColor: color\n          ? getDvtThresholdColor(color)\n          : 'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-reference-object-line-color)',\n        borderBottom: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-dvt-contrast-line-color)'\n      }}></div>\n  );\n}\n\nconst referenceLineStyles = {\n  base: cssProps`${{\n    height: '2px',\n    position: 'absolute',\n    transformOrigin: '0 50%',\n    backgroundClip: 'padding-box'\n  }}`\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport type { Ref } from 'preact/hooks';\nimport {\n  getPositiveAngle,\n  convertToPolar,\n  getCenterCoord,\n  Sector\n} from '../utils/PRIVATE_meterUtils';\n\nimport { CenterContext } from './MeterCircle.types';\n\ntype Dimensions = {\n  width: number;\n  height: number;\n  innerRadius: number;\n  outerRadius: number;\n};\n\n/**\n * Returns the true dimensions of the meter circle after initial render. All dimensions are 0 for initial render.\n * @param element The HTML element that wraps the track and indicator div.\n * @param section The section in which the meter circle lies.\n * @returns The dimensions of the meter circle.\n */\nexport function getDimensions(element: HTMLElement | null, section: Sector): Dimensions {\n  if (!element) {\n    return {\n      width: 0,\n      height: 0,\n      innerRadius: 0,\n      outerRadius: 0\n    };\n  }\n\n  const circleTrack = element.children[0] as HTMLElement;\n  const rect = circleTrack.getBoundingClientRect();\n\n  return {\n    width: Math.round(rect.width),\n    height: Math.round(rect.height),\n    ...getInnerAndOuterRadius(circleTrack, rect, section)\n  };\n}\n\n/**\n * Returns the inner and outer radius of the meter circle.\n * @param element The HTML element that wraps the track and indicator div.\n * @param rect The bounding rect of the wrapper HTML element.\n * @param section The section in which the meter circle lies.\n * @returns The inner and outer radius of the meter circle.\n */\nfunction getInnerAndOuterRadius(\n  element: HTMLElement,\n  rect: any,\n  section: string\n): {\n  innerRadius: number;\n  outerRadius: number;\n} {\n  const width = element.clientWidth;\n  const height = element.clientHeight;\n\n  if (section === 'bottom' || section === 'top') {\n    return { outerRadius: rect.width / 2, innerRadius: height };\n  } else if (section === 'left' || section === 'right') {\n    return { outerRadius: rect.height / 2, innerRadius: width };\n  }\n  return { innerRadius: width / 2, outerRadius: rect.width / 2 };\n}\n\n/**\n * Returns the value corresponding to clicked point in the meter circle. Returns undefined if the clicked point is\n * outside the track of the meter circle.\n * @param pageX The pageX of the click event\n * @param pageY The pageY of the click event\n * @param max The max value of the meter circle.\n * @param min The min value of the meter circle.\n * @param step The step of the metercircle.\n * @param dimensionsRef The ref that stores dimensions reference of meter circle.\n * @param startAngle The startAngle of the meter circle.\n * @param angleExtent The angleExtent of the meter circle\n * @returns {number} The value corresponding to clicked point in the meter circle.\n */\nexport function getValue(\n  event: PointerEvent,\n  min: number,\n  max: number,\n  step: number,\n  dimensionsRef: Ref<Dimensions>,\n  startAngle: number,\n  angleExtent: number,\n  section: Sector,\n  isRtl: boolean\n): number | undefined {\n  const dims = dimensionsRef.current;\n  if (!dims) {\n    return undefined;\n  }\n\n  const center = getCenterCoord(section);\n  const { angle } = convertToPolar(\n    dims.width * center.x,\n    dims.height * center.y,\n    event.offsetX,\n    event.offsetY\n  );\n\n  const positiveAngle = getPositiveAngle(angle);\n\n  let val;\n  if (isRtl && startAngle + angleExtent > positiveAngle) {\n    val = (getPositiveAngle(angle - startAngle) / angleExtent) * (max - min);\n  }\n\n  if (!isRtl) {\n    const clockwiseArc = getPositiveAngle(startAngle - positiveAngle);\n    if (clockwiseArc <= angleExtent) {\n      val = (clockwiseArc * (max - min)) / angleExtent;\n    }\n  }\n\n  if (val != undefined) {\n    val = Math.round(val / step) * step;\n  }\n  return val;\n}\n\n/**\n * Returns the fraction of angle extent for given delta.\n * @param delta The delta of metric values.\n * @param min The minimum value of the meter circle.\n * @param max The maximum value of the meter circle.\n * @param angleExtent The angle extent of the meter circle.\n * @returns The angle extent corresponding to delta in metric value.\n */\nexport function getAngleExtentFromDelta(\n  delta: number,\n  min: number,\n  max: number,\n  angleExtent: number\n): number {\n  return (delta * angleExtent) / (max - min);\n}\n\n/**\n * Returns the start angle for given metric value.\n * @param value The metric value\n * @param min The minimum value of the meter circle.\n * @param max The maximum value of the meter circle.\n * @param startAngle The startAngle of the meter circle.\n * @param angleExtent The angleExtent of the meter circle.\n * @param isRtl Whether the reading mode is 'rtl'\n * @returns The startAngle for the metric value.\n */\nexport function getStartAngleForValue(\n  value: number,\n  min: number,\n  max: number,\n  startAngle: number,\n  angleExtent: number,\n  isRtl: boolean\n): number {\n  const extent = getAngleExtentFromDelta(value - min, min, max, angleExtent);\n  return startAngle + (isRtl ? 1 : -1) * extent;\n}\n\n/**\n * Returns the center context of for the meter circle.\n */\nexport function getCenterContext(\n  dimensionsRef: Ref<Dimensions>,\n  section: 'top' | 'bottom' | 'left' | 'right' | 'full'\n): CenterContext | undefined {\n  const dims = dimensionsRef.current;\n\n  if (!dims) {\n    return;\n  }\n\n  const center = getCenterCoord(section);\n  const cx = center.x * dims.width;\n  const cy = center.y * dims.height;\n\n  const isHoriz = section === 'top' || section === 'bottom';\n\n  let innerX, innerY, innerW, innerH;\n  let outerX, outerY, outerW, outerH;\n\n  if (isHoriz || section === 'full') {\n    outerW = 2 * dims.innerRadius;\n    outerH = section === 'full' ? 2 * dims.innerRadius : dims.innerRadius;\n    outerX = cx - dims.innerRadius;\n    outerY = section === 'bottom' ? 0 : cy - dims.innerRadius;\n\n    innerW = Math.sqrt(2) * dims.innerRadius;\n    innerH = section === 'full' ? innerW : dims.innerRadius / Math.sqrt(2);\n    innerX = cx - dims.innerRadius / Math.sqrt(2);\n    innerY = section === 'bottom' ? 0 : cy - dims.innerRadius / Math.sqrt(2);\n  } else {\n    outerH = 2 * dims.innerRadius;\n    outerW = dims.innerRadius;\n    outerX = section === 'left' ? cx - dims.innerRadius : 0;\n    outerY = cy - dims.innerRadius;\n\n    innerH = Math.sqrt(2) * dims.innerRadius;\n    innerW = dims.innerRadius / Math.sqrt(2);\n    innerX = section === 'left' ? cx - dims.innerRadius / Math.sqrt(2) : 0;\n    innerY = cy - dims.innerRadius / Math.sqrt(2);\n  }\n\n  return {\n    outerBounds: {\n      x: outerX,\n      y: outerY,\n      width: outerW,\n      height: outerH\n    },\n    innerBounds: {\n      x: innerX,\n      y: innerY,\n      width: innerW,\n      height: innerH\n    }\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Threshold, MeterSize, ThresholdDisplay } from '../utils/UNSAFE_meterTypes';\nimport { getClipPath, Sector } from '../utils/PRIVATE_meterUtils';\nimport { getAngleExtentFromDelta, getStartAngleForValue } from './CircleMeterUtils';\nimport { MeterProps, CircularRefLine } from './MeterCircle.types';\nimport { ColorProps } from '../utils/UNSAFE_interpolations/colors';\nimport { getDvtThresholdColor } from '../utils/UNSAFE_dvtCommonUtils';\n\nexport type MeterInfo = Required<\n  Pick<MeterProps, 'min' | 'max' | 'value' | 'size' | 'startAngle' | 'angleExtent'>\n> & {\n  section: Sector;\n  isRtl: boolean;\n  innerRadius: number;\n};\n\n/**\n * Returns the css variable corresponding to the default size of the meter circle.\n * @param size The size of the meter circle.\n * @returns The css variable corresponding to the default size of the meter circle.\n */\nfunction getSizeVar(size: MeterSize): string {\n  return `var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-${size}-size)`;\n}\n\n/**\n * Returns the css variable corresponding to the default track size of the meter circle.\n * @param size The size of the meter circle.\n * @returns The css variable corresponding to the default track size of the meter circle.\n */\nfunction getTrackSizeVar(size: MeterSize): string {\n  return `var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-${size}-track-size)`;\n}\n\n/**\n * Returns the calculated css variable string for the inner radius when given size and innerRadius of meter circle.\n * @param size The size of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns {string} CSS varible string for the calculated inner radius of the meter circle.\n */\n\nexport function getInnerRadius(size: MeterSize, innerRadius?: number): string {\n  if (innerRadius != undefined) {\n    return `(${getSizeVar(size)} * ${innerRadius / 2})`;\n  }\n  return `(${getSizeVar(size)} * 0.5 - ${getTrackSizeVar(size)})`;\n}\n\n/**\n * Returns the calculated css variable string for meter circle track for a given size and innerRadius of meter circle.\n * @param size The size of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns {string} CSS variable for the calculated track size of the meter circle.\n */\nexport function getTrackSize(size: MeterSize, innerRadius?: number): string {\n  if (innerRadius != undefined) {\n    return `(${getSizeVar(size)} * ${1 - innerRadius} / 2)`;\n  }\n  return getTrackSizeVar(size);\n}\n\n/**\n * Returns the calculated length of reference line for given size and inner radius of meter circle.\n * The length of reference line runs from the inner radius to slight outside the outer radius.\n * The length outside the outer radius depends on size of the meter circle.\n * @param size The size of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns The calculated CSS var for the length of reference line.\n */\nexport function getRefLineLength(size: MeterSize, innerRadius?: number): string {\n  const outerExtent = { sm: '1rem', md: '0.75rem', lg: '0.5rem' };\n  return `${getTrackSize(size, innerRadius)} + ${outerExtent[size]}`;\n}\n\n/**\n * Returns the array of calculated props for InnerCircle representing each threshold.\n * @param meterInfo MeterInfo object containing info about given meter circle.\n * @param thresholds thresholds array of the meter circle.\n * @param isTrackRendered Whether track is rendered.\n * @param trackColor The track color of the meter circle.\n * @param innerRadius The inner radius of the meter circle.\n * @returns Array of calculated props object for InnerCircle representing each threshold.\n */\nexport function getThresholdsProps(\n  meterInfo: MeterInfo,\n  thresholds: Threshold[],\n  isTrackRendered: boolean,\n  trackColor?: ColorProps['color'],\n  innerRadius?: number\n): Array<{\n  clipPath: string;\n  color?: ColorProps['color'];\n  section: Sector;\n  size: string;\n}> {\n  const {\n    min,\n    max,\n    startAngle,\n    angleExtent,\n    size,\n    section,\n    isRtl,\n    innerRadius: innerDim\n  } = meterInfo;\n  const trackSize = `calc(${getTrackSize(size, innerRadius)})`;\n  const thresholdProps = [];\n  const validThresholds = thresholds\n    .filter((threshold: Threshold) => threshold.max > min && threshold.max <= max)\n    .sort((a, b) => a.max - b.max);\n  const numOfThreshold = validThresholds.length;\n  for (let i = 0; i < numOfThreshold; i++) {\n    const threshold = validThresholds[i];\n    const startValue = i === 0 ? min : validThresholds[i - 1].max;\n    const diff = i === 0 ? threshold.max : threshold.max - validThresholds[i - 1].max;\n\n    let thresholdStart = getStartAngleForValue(\n      startValue,\n      min,\n      max,\n      startAngle,\n      angleExtent,\n      isRtl\n    );\n    let thresholdExtent = getAngleExtentFromDelta(diff, min, max, angleExtent);\n\n    const { startOffset, extentOffset } = getThresholdsBuffer(\n      innerDim,\n      angleExtent,\n      i === 0,\n      threshold.max === max,\n      isRtl\n    );\n    const clipPath = getClipPath(\n      thresholdStart + startOffset,\n      thresholdExtent + extentOffset,\n      isRtl,\n      section\n    );\n\n    thresholdProps.push({\n      clipPath,\n      color: getDvtThresholdColor(threshold.color),\n      size: trackSize,\n      section\n    });\n\n    if (i === numOfThreshold - 1 && threshold.max < max && isTrackRendered) {\n      thresholdStart = thresholdStart + (isRtl ? 1 : -1) * thresholdExtent;\n      thresholdExtent = getAngleExtentFromDelta(max - threshold.max, min, max, angleExtent);\n      const { startOffset, extentOffset } = getThresholdsBuffer(\n        innerDim,\n        angleExtent,\n        false,\n        true,\n        isRtl\n      );\n      thresholdProps.push({\n        clipPath: getClipPath(\n          thresholdStart + startOffset,\n          thresholdExtent + extentOffset,\n          isRtl,\n          section\n        ),\n        color: trackColor,\n        size: trackSize,\n        section\n      });\n    }\n  }\n  return thresholdProps;\n}\n\n/**\n * Returns the calculated props for CircularReferenceLine.\n * @param meterInfo MeterInfo object containing info about the meter circle.\n * @param refLine The CircularRefLine object\n * @param innerRadius The innerRadius of the meter circle.\n * @returns An bject with calculated props for CircularReferenceLine.\n */\nexport function getReferenceLinesProps(\n  meterInfo: MeterInfo,\n  refLine: CircularRefLine,\n  innerRadius?: number\n): {\n  radius: string;\n  length: string;\n  angle: number;\n  color?: ColorProps['color'];\n} {\n  const { min, max, startAngle, angleExtent, size, isRtl } = meterInfo;\n  return {\n    radius: getInnerRadius(size, innerRadius),\n    length: getRefLineLength(size, innerRadius),\n    angle: getStartAngleForValue(refLine.value, min, max, startAngle, angleExtent, isRtl),\n    color: refLine.color\n  };\n}\n\n/**\n * Returns the calculated props for InnerCircle representing the track.\n * @param meterInfo MeterInfo object containing info about the meter circle.\n * @param trackColor The color of the track.\n * @param istrackRendered Whether the track is rendered.\n * @param thresholdDisplay Specifies whether the current threshold is displayed in the track, on the indicator, or if all thresholds are displayed in the track.\n * @param innerRadius The innerRadius of the meter circle.\n * @param thresholds thresholds array of the meter circle.\n * @returns An object with calculated props for InnerCircle that represents the track.\n */\nexport function getTrackProps(\n  meterInfo: MeterInfo,\n  isTrackRendered: boolean,\n  thresholdDisplay: ThresholdDisplay,\n  trackColor?: ColorProps['color'],\n  innerRadius?: number,\n  thresholds?: Threshold[]\n): {\n  section: Sector;\n  color?: ColorProps['color'];\n  clipPath: string;\n  size: string;\n} {\n  const { startAngle, angleExtent, size, section, isRtl } = meterInfo;\n  const color = !isTrackRendered\n    ? 'transparent'\n    : thresholdDisplay === 'all' && thresholds\n    ? 'var(--oj-c-PRIVATE-DO-NOT-USE-dvt-contrast-line-color)'\n    : trackColor;\n  return {\n    section,\n    color,\n    clipPath: getClipPath(startAngle, angleExtent, isRtl, section),\n    size: `calc(${getTrackSize(size, innerRadius)})`\n  };\n}\n\n/**\n * Returns the calculated props for InnerCircle representing the indicator.\n * @param meterInfo MeterInfo object containing info about the meter circle.\n * @param indicatorSize Relative thickness of the indicator to the track.\n * @param innerRadius The innerRadius of the meter circle.\n * @returns An object with calculated props for InnerCircle that represents the indicator.\n */\nexport function getIndicatorProps(\n  meterInfo: MeterInfo,\n  indicatorSize: number,\n  innerRadius?: number\n): {\n  section: Sector;\n  width: string;\n  height: string;\n  size: string;\n  clipPath: string;\n} {\n  const { value, min, max, startAngle, angleExtent, size, section, isRtl } = meterInfo;\n  const valueExtent = ((value - min) * angleExtent) / (max - min);\n  const validIndicatorSize = Math.min(Math.max(0, indicatorSize), 1);\n  const isHoriz = section === 'left' || section === 'right';\n  const isVert = section === 'top' || section === 'bottom';\n  const valueTrackSize = `calc(${getTrackSize(size, innerRadius)} * ${validIndicatorSize})`;\n  const diameter = `${getSizeVar(size)} - ((1 - ${validIndicatorSize}) * ${getTrackSize(\n    size,\n    innerRadius\n  )})`;\n  const radius = `(${diameter}) / 2`;\n  return {\n    section,\n    width: isHoriz ? `calc(${radius})` : `calc(${diameter})`,\n    height: isVert ? `calc(${radius})` : `calc(${diameter})`,\n    size: valueTrackSize,\n    clipPath: getClipPath(startAngle, valueExtent, isRtl, section)\n  };\n}\n\n/**\n * Returns the threshold offsets to create the whitespace between the thresholds.\n * @param innerRadius The innerRadius of the meter circle.\n * @param angleExtent The angleExtent of the meter circle.\n * @param firstThreshold Whether the current threshold is the first threshold.\n * @param lastThreshold  Whether the current threshold is the last threshold.\n * @param isRtl Whether the document reading mode is 'rtl'\n * @returns The offsets (startOffset and extentOffset) to add to calculated threshold startAngle and threhsold extent.\n */\nfunction getThresholdsBuffer(\n  innerRadius: number,\n  angleExtent: number,\n  firstThreshold: boolean,\n  lastThreshold: boolean,\n  isRtl: boolean\n): {\n  startOffset: number;\n  extentOffset: number;\n} {\n  if (!innerRadius) {\n    return { startOffset: 0, extentOffset: 0 };\n  }\n  const offset = 360 / (2 * Math.PI * innerRadius);\n  let startOffset = (offset / 2) * (isRtl ? 1 : -1);\n  let extentOffset = -1 * offset;\n\n  if (firstThreshold && angleExtent < 360) {\n    startOffset = 0;\n    extentOffset = -0.5 * offset;\n  }\n\n  if (lastThreshold && angleExtent < 360) {\n    extentOffset = -0.5 * offset;\n  }\n  return { startOffset, extentOffset };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { CircleWrapper, CircleInner } from '../PRIVATE_Meter';\nimport { CircularReferenceLine } from './CircularReferenceLine';\n\nimport {\n  validateRange,\n  getTrackAndIndicatorColor,\n  getMeterAriaProps,\n  getCircleSection\n} from '../utils/PRIVATE_meterUtils';\n\nimport { getDimensions, getValue, getCenterContext } from './CircleMeterUtils';\n\nimport {\n  getIndicatorProps,\n  getTrackProps,\n  getThresholdsProps,\n  getReferenceLinesProps,\n  MeterInfo\n} from './LayoutUtils';\n\nimport {\n  usePointerEvents,\n  useKeyboardEvents,\n  useMeterDatatip\n} from '../hooks/PRIVATE_useDvtMeterEvents';\n\nimport { MeterProps, CircularRefLine } from './MeterCircle.types';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\n\n/**\n * A Meter circle displays information graphically in a circular bar, highlighting a specific metric value's progress in relation to its min, max, or thresholds.\n */\nexport function MeterCircle({\n  max = 100,\n  min = 0,\n  value = 0,\n  step = 1,\n  size = 'lg',\n  startAngle = 90,\n  angleExtent = 360,\n  isTrackRendered = true,\n  thresholdDisplay = 'all',\n  indicatorSize = 1,\n  ...props\n}: MeterProps) {\n  validateRange(min, max, value, step);\n\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n  const section = getCircleSection(startAngle, angleExtent, isRtl);\n  const dimensionsRef = useRef(getDimensions(null, section));\n  const circleWrapperRef = useRef<HTMLDivElement>(null);\n  const [isDimsReady, setDimsReady] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (props.onCommit || props.onInput || props.children) {\n      dimensionsRef.current = getDimensions(circleWrapperRef.current, section);\n      setDimsReady(true);\n    }\n  }, [size, props.onCommit, props.onInput, props.children]);\n\n  const getValueFromEvent = (event: PointerEvent) => {\n    const circleContainer = circleWrapperRef.current;\n    if (event.target == circleContainer) {\n      return getValue(\n        event,\n        min,\n        max,\n        step,\n        dimensionsRef,\n        startAngle,\n        angleExtent,\n        section,\n        isRtl\n      );\n    }\n    return;\n  };\n\n  const pointerEventsProps = usePointerEvents(\n    value,\n    getValueFromEvent,\n    circleWrapperRef,\n    props.onCommit,\n    props.onInput\n  );\n\n  const keyboardEventsProps = useKeyboardEvents(\n    value,\n    min,\n    max,\n    step,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { datatipContent, datatipProps } = useMeterDatatip(\n    value,\n    props.datatip,\n    props.ariaDescribedBy\n  );\n\n  const ariaProps = getMeterAriaProps(\n    value,\n    min,\n    max,\n    `${value}`,\n    props.accessibleLabel,\n    props.ariaLabelledBy,\n    props.thresholds\n  );\n  const mergedProps = mergeProps(pointerEventsProps, keyboardEventsProps, datatipProps, ariaProps);\n\n  const { trackColor, indicatorColor } = getTrackAndIndicatorColor(\n    value,\n    thresholdDisplay,\n    props.trackColor,\n    props.indicatorColor,\n    props.thresholds\n  );\n\n  const orientation =\n    section === 'bottom' || section === 'top'\n      ? 'Horizontal'\n      : section === 'left' || section === 'right'\n      ? 'Vertical'\n      : 'Full';\n\n  const meterInfo = {\n    min,\n    max,\n    value,\n    startAngle,\n    angleExtent,\n    size,\n    section,\n    isRtl,\n    innerRadius: dimensionsRef.current.innerRadius\n  } as MeterInfo;\n  const isInteractive = props.onCommit || props.onInput;\n  const { isTabbable } = useTabbableMode();\n  const centerContext = getCenterContext(dimensionsRef, section);\n  return (\n    <>\n      <div\n        class={classNames([component.base, isInteractive ? component.interactive : ''])}\n        tabIndex={!isTabbable ? -1 : 0}\n        role=\"slider\"\n        {...mergedProps}>\n        <CircleWrapper\n          ref={circleWrapperRef}\n          class={classNames([\n            circleWrapper.base,\n            props.referenceLines && props.referenceLines.length > 0\n              ? styles[`${size}${section}`]\n              : '',\n            styles[`${size}${orientation}`]\n          ])}>\n          <CircleInner\n            class={classNames([circleTrack.base, styles[section]])}\n            {...getTrackProps(\n              meterInfo,\n              isTrackRendered,\n              thresholdDisplay,\n              trackColor,\n              props.innerRadius,\n              props.thresholds\n            )}\n          />\n          {thresholdDisplay === 'all' &&\n            props.thresholds &&\n            getThresholdsProps(\n              meterInfo,\n              props.thresholds,\n              isTrackRendered,\n              trackColor,\n              props.innerRadius\n            ).map((threshold) => {\n              return (\n                <CircleInner\n                  class={classNames([circleTrack.base, styles[section], styles.thresholds])}\n                  {...threshold}\n                />\n              );\n            })}\n\n          <CircleInner\n            color={indicatorColor}\n            class={classNames([circleValue.base, circleValue[section], styles[section]])}\n            {...getIndicatorProps(meterInfo, indicatorSize, props.innerRadius)}\n          />\n          {props.referenceLines?.map((refLine: CircularRefLine) => {\n            return (\n              <CircularReferenceLine\n                {...getReferenceLinesProps(meterInfo, refLine, props.innerRadius)}\n                section={section}\n              />\n            );\n          })}\n          {isDimsReady && props.children && centerContext && (\n            <div class={classNames([styles.centerContent, childrenStyles])}>\n              {props.children(centerContext)}\n            </div>\n          )}\n        </CircleWrapper>\n      </div>\n      {datatipContent}\n    </>\n  );\n}\n\nconst component = {\n  base: cssProps`${{\n    display: 'inline-block',\n    pointerEvents: 'none'\n  }}`,\n  interactive: cssProps`${{\n    touchAction: 'none',\n    '&:focus-visible': {\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n      outlineStyle: 'dotted',\n      outlineWidth: '1px'\n    }\n  }}`\n};\n\nconst styles = {\n  full: cssProps`${{\n    borderRadius: '50%'\n  }}`,\n  top: cssProps`${{\n    borderRadius: '50% 50% 0 0 / 100% 100% 0 0',\n    borderBottom: '0'\n  }}`,\n  bottom: cssProps`${{\n    borderRadius: '0% 0% 50% 50% / 0% 0% 100% 100%',\n    borderTop: '0'\n  }}`,\n  right: cssProps`${{\n    borderRadius: '0 100% 100% 0 / 0% 50% 50% 0%',\n    borderLeft: '0'\n  }}`,\n  left: cssProps`${{\n    borderRadius: '100% 0 0 100% / 50% 0 0 50%',\n    borderRight: '0'\n  }}`,\n  smtop: cssProps`${{\n    margin: '1rem 1rem 0 1rem'\n  }}`,\n  mdtop: cssProps`${{\n    margin: '0.75rem 0.75rem 0 0.75rem'\n  }}`,\n  lgtop: cssProps`${{\n    margin: '0.5rem 0.5rem 0 0.5rem'\n  }}`,\n  smbottom: cssProps`${{\n    margin: '0 1rem 1rem 1rem'\n  }}`,\n  mdbottom: cssProps`${{\n    margin: '0 0.75rem 0.75rem 0.75rem'\n  }}`,\n  lgbottom: cssProps`${{\n    margin: '0 0.5rem 0.5rem 0.5rem'\n  }}`,\n  smleft: cssProps`${{\n    margin: '1rem 0 1rem 1rem'\n  }}`,\n  mdleft: cssProps`${{\n    margin: '0.75rem 0 0.75rem 0.75rem'\n  }}`,\n  lgleft: cssProps`${{\n    margin: '0.5rem 0 0.5rem 0.5rem'\n  }}`,\n  smright: cssProps`${{\n    margin: '1rem 1rem 1rem 0'\n  }}`,\n  mdright: cssProps`${{\n    margin: '0.75rem 0.75rem 0.75rem 0'\n  }}`,\n  lgright: cssProps`${{\n    margin: '0.5rem 0.5rem 0.5rem 0'\n  }}`,\n  smfull: cssProps`${{\n    margin: '1rem'\n  }}`,\n  mdfull: cssProps`${{\n    margin: '0.75rem'\n  }}`,\n  lgfull: cssProps`${{\n    margin: '0.5rem'\n  }}`,\n  lgHorizontal: cssProps`${{\n    height: 'calc(var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-lg-size) / 2 )',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-lg-size)'\n  }}`,\n  lgVertical: cssProps`${{\n    width: 'calc(var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-lg-size) / 2 )',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-lg-size)'\n  }}`,\n  smHorizontal: cssProps`${{\n    height: 'calc(var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-sm-size) / 2 )',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-sm-size)'\n  }}`,\n  smVertical: cssProps`${{\n    width: 'calc(var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-sm-size) / 2 )',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-sm-size)'\n  }}`,\n  mdHorizontal: cssProps`${{\n    height: 'calc(var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-md-size) / 2 )',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-md-size)'\n  }}`,\n  mdVertical: cssProps`${{\n    width: 'calc(var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-md-size) / 2 )',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-md-size)'\n  }}`,\n  smFull: cssProps`${{\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-sm-size)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-sm-size)'\n  }}`,\n  mdFull: cssProps`${{\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-md-size)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-md-size)'\n  }}`,\n  lgFull: cssProps`${{\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-lg-size)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-circle-lg-size)'\n  }}`,\n  centerContent: cssProps`${{\n    pointerEvents: 'none',\n    width: '100%',\n    height: '100%',\n    lineHeight: 'initial'\n  }}`,\n  thresholds: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-threshold-color)'\n  }}`\n};\nconst childrenStyles = cssProps`${{\n  /* @ts-ignore */\n  '& > *': {\n    marginTop: '0 !important',\n    marginBottom: '0 !important',\n    marginLeft: '0 !important',\n    marginRight: '0 !important'\n  }\n}}`;\n\nconst circleWrapper = {\n  base: cssProps`${{\n    position: 'relative',\n    boxSizing: 'border-box',\n    cursor: 'pointer',\n    pointerEvents: 'auto'\n  }}`\n};\n\nconst circleTrack = {\n  base: cssProps`${{\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    borderStyle: 'solid',\n    boxSizing: 'border-box',\n    pointerEvents: 'none',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-track-bg-color)'\n  }}`,\n  sm: cssProps`${{\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-sm-track-size)'\n  }}`,\n  md: cssProps`${{\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-md-track-size)'\n  }}`,\n  lg: cssProps`${{\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-lg-track-size)'\n  }}`\n};\n\nconst circleValue = {\n  base: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-meter-value-bg-color)',\n    borderStyle: 'solid',\n    boxSizing: 'border-box',\n    position: 'absolute',\n    pointerEvents: 'none'\n  }}`,\n  full: cssProps`${{\n    borderRadius: '50%',\n    top: '50%',\n    left: '50%',\n    translate: '-50% -50%'\n  }}`,\n  top: cssProps`${{\n    top: '100%',\n    left: '50%',\n    translate: '-50% -100%'\n  }}`,\n  right: cssProps`${{\n    top: '50%',\n    translate: '0 -50%'\n  }}`,\n  left: cssProps`${{\n    left: '100%',\n    top: '50%',\n    translate: '-100% -50%'\n  }}`,\n  bottom: cssProps`${{\n    left: '50%',\n    translate: '-50% 0'\n  }}`\n};\n"],"names":["CircularReferenceLine","color","angle","radius","length","section","centerCoord","getCenterCoord","yOffset","y","Math","sin","PI","xOffset","x","cos","left","top","transform","backgroundColor","getDvtThresholdColor","borderBottom","referenceLineStyles","MeterCircle","_a","direction","useUser","isRtl","circleWrapperRef","useRef","size","props","onCommit","onInput","children","getValueFromEvent","event","circleContainer","current","target","pointerEventsProps","usePointerEvents","value","datatipContent","datatipProps","useMeterDatatip","datatip","ariaDescribedBy","mergedProps","mergeProps","keyboardEventsProps","ariaProps","meterInfo","innerRadius","dimensionsRef","isTabbable","useTabbableMode","circleWrapper","base","styles","orientation","_jsx","CircleInner","Object","assign","class","classNames","circleTrack","getTrackProps","isTrackRendered","thresholdDisplay","trackColor","thresholds","isDimsReady","centerContext","centerContent","childrenStyles","component","circleValue"],"mappings":"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"}