/* @oracle/oraclejet-preact: 14.1.0 */
import { useRef, useCallback, useEffect } from 'preact/compat';

/**
 *
 * @param props
 */
const useModal = (props) => {
    const { isOpen, onBackdropClick: onBackdropClickProp, } = props;
    const modalRef = useRef(null);
    const mouseDownTarget = useRef(null);
    const onMouseDown = useCallback((event) => {
        if (modalRef.current === event.target) {
            mouseDownTarget.current = event.target;
        }
    }, []);
    const onBackdropClick = useCallback((event) => {
        if (modalRef.current === event.target) {
            event.stopPropagation();
            // event should originate on the same target
            if (mouseDownTarget.current === event.target) {
                onBackdropClickProp === null || onBackdropClickProp === void 0 ? void 0 : onBackdropClickProp();
            }
        }
    }, [onBackdropClickProp]);
    useEffect(() => {
        const modal = modalRef.current;
        if (modal) {
            modal.addEventListener('mousedown', onMouseDown);
            modal.addEventListener('click', onBackdropClick);
            return () => {
                modal.removeEventListener('mousedown', onMouseDown);
                modal.removeEventListener('click', onBackdropClick);
            };
        }
        return () => { };
    }, [isOpen, onMouseDown, onBackdropClick]);
    return {
        modalRef,
    };
};

export { useModal as u };
/*  */
//# sourceMappingURL=useModal-beb96266.js.map
