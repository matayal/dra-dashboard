{"version":3,"file":"PRIVATE_Message.js","sources":["../../src/PRIVATE_Message/MessageCloseButton.tsx","../../src/PRIVATE_Message/MessageCustomStartIcon.tsx","../../src/PRIVATE_Message/Message.types.ts","../../src/PRIVATE_Message/MessageFormattingUtils.ts","../../src/PRIVATE_Message/MessageDetail.tsx","../../src/PRIVATE_Message/MessageHeader.tsx","../../src/PRIVATE_Message/MessageStartIcon.tsx","../../src/PRIVATE_Message/MessageSummary.tsx","../../src/PRIVATE_Message/MessageTimestamp.tsx","../../src/PRIVATE_Message/MessageUtils.ts","../../src/PRIVATE_Message/Message.tsx","../../src/PRIVATE_Message/MessageTransition.tsx","../../src/PRIVATE_Message/MessagesManager.tsx","../../src/PRIVATE_Message/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { VNode } from 'preact';\nimport { Button } from '../UNSAFE_Button';\nimport { CloseIcon } from '../UNSAFE_ThemedIcons';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageVariant } from './Message.types';\n\n// TODO: remove usages of margin here\nconst messageCloseButtonStyles = {\n  base: cssProps`${{\n    alignSelf: 'flex-start',\n    display: 'flex'\n  }}`,\n  banner: cssProps`${{\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x)',\n    marginInlineEnd: 'calc(-1 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x))',\n    marginTop: 'calc(-1 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x))',\n    marginBottom: 'calc(-1 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x))'\n  }}`,\n  inline: undefined,\n  toast: cssProps`${{\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)',\n    marginInlineEnd: 'calc(-1 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x) / 2)',\n    marginTop: 'calc(-1 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x) / 2)',\n    marginBottom: 'calc(-1 * var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-3x) / 2)'\n  }}`\n};\n\n/**\n * Props for the MessageCloseButton component\n */\ntype Props = {\n  /**\n   * The callback function to be called when the close icon is clicked\n   */\n  onAction: (event?: Event) => void;\n\n  /**\n   * Button renderer\n   */\n  buttonRenderer?: (\n    title: string,\n    onAction: (event?: Event) => void,\n    variant?: MessageVariant\n  ) => VNode;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n\n  /**\n   * Close button title\n   */\n  title?: string;\n};\n\n/**\n * A Component for rendering the message close button\n */\nfunction MessageCloseButton({\n  onAction,\n  buttonRenderer,\n  title = 'Close',\n  variant = 'banner'\n}: Props) {\n  const renderedButton = buttonRenderer ? (\n    buttonRenderer(title, onAction, variant)\n  ) : (\n    <Button\n      startIcon={<CloseIcon />}\n      size=\"sm\"\n      title={title}\n      variant=\"borderless\"\n      onAction={onAction}\n    />\n  );\n  // TODO: JET-48715 - remove marker classes\n  // Right now, oj-message-banner component uses this for unit tests and has no alternate way for\n  // testing. This will need to be removed as we work on oj-c-message-banner.\n  const markerClassForTests = 'oj-c-messagebanner-close-icon';\n  const classes = classNames([\n    variant === 'banner' && markerClassForTests,\n    messageCloseButtonStyles.base,\n    messageCloseButtonStyles[variant]\n  ]);\n\n  // Otherwise, render the close icon\n  return <div class={classes}>{renderedButton}</div>;\n}\n\nexport { MessageCloseButton };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { ComponentChildren } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageRendererDataItem } from './Message.types';\n\nconst messageStartIconStyles = {\n  base: cssProps`${{\n    marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)',\n    alignSelf: 'flex-start',\n    display: 'flex'\n  }}`,\n  toast: cssProps`${{\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-start-icon-size)',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-start-icon-size)'\n  }}`\n};\n\n/**\n * Props for the StartIcon component\n */\ntype Props<K, D> = {\n  /**\n   * The data item for rendering the start icon\n   */\n  item: MessageRendererDataItem<K, D>;\n\n  /**\n   * A custom renderer for rendering the start icon\n   */\n  renderer: (item: MessageRendererDataItem<K, D>) => ComponentChildren;\n};\n\n/**\n * Component for rendering custom icon/content for start icon in Message\n */\nfunction MessageCustomStartIcon<K, D>({ item, renderer }: Props<K, D>) {\n  const classes = classNames([\n    messageStartIconStyles.base,\n    // for now only toast has support for custom icon\n    messageStartIconStyles.toast\n  ]);\n  return (\n    <div class={classes} role=\"presentation\">\n      {renderer(item)}\n    </div>\n  );\n}\n\nexport { MessageCustomStartIcon };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ItemMetadata } from '../utils/UNSAFE_dataProvider';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\n\nexport const variants = stringLiteralArray(['banner', 'inline', 'toast']);\nexport type MessageVariant = typeof variants[number];\n\nexport const severities = stringLiteralArray(['error', 'warning', 'confirmation', 'info', 'none']);\nexport type MessageSeverity = typeof severities[number];\n\n/**\n * Structure of data item passed to the renderer functions\n */\nexport type MessageRendererDataItem<K, D> = {\n  /**\n   * The data for the current message\n   */\n  data: D;\n\n  /**\n   * The zero-based index of the current message\n   */\n  index: number;\n\n  /**\n   * The key for the current message\n   */\n  key: K;\n\n  /**\n   * The metadata for the current message\n   */\n  metadata?: ItemMetadata<K>;\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { getLocale } from '../utils/UNSAFE_getLocale';\nimport { isEmptyOrUndefined } from '../utils/UNSAFE_stringUtils';\nimport { severities } from './Message.types';\n\n// Types of properties that can be formatted\ntype PropFormat = 'severity' | 'string' | 'timestamp';\n\n/**\n * Options for creating an Intl.DateTimeFormat instance.\n */\nconst DATE_FORMAT_OPTIONS = Object.freeze({\n  TODAY: {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  },\n  DEFAULT: {\n    day: '2-digit',\n    month: '2-digit',\n    year: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  }\n});\n\n/**\n * Regex for validating ISO timestamp\n */\nconst ISO_DATE_REGEX =\n  /^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/;\n\n/**\n * Checks if the provided date is today\n *\n * @param isoDate Date to be tested for today\n *\n * @returns boolean indicating if the provided date is today\n */\nfunction isDateToday(isoDate: string) {\n  const today = new Date();\n  const provided = new Date(isoDate);\n\n  return (\n    today.getUTCFullYear() === provided.getUTCFullYear() &&\n    today.getUTCMonth() === provided.getUTCMonth() &&\n    today.getUTCDate() === provided.getUTCDate()\n  );\n}\n\n/**\n * Creates an instance of Intl.DateTimeFormat\n *\n * @param isToday A boolean to indicate whether a formatter is needed for the date\n *                that is the current day.\n *\n * @returns the formatter instance\n */\nfunction getDateTimeFormatter(isToday: boolean) {\n  const locale = getLocale();\n  const { DateTimeFormat } = Intl;\n  if (isToday) {\n    return new DateTimeFormat(locale, DATE_FORMAT_OPTIONS.TODAY as Intl.DateTimeFormatOptions);\n  }\n\n  return new DateTimeFormat(locale, DATE_FORMAT_OPTIONS.DEFAULT as Intl.DateTimeFormatOptions);\n}\n\n/**\n * Checks if the provided value is valid for the prop specified.\n * By default, this method just checks for the value to be a valid string.\n *\n * @param value The value to be checked\n * @param prop The property for which the value needs to be evaluated\n *\n * @returns the result of the validation\n */\nfunction isValidValueForProp<T>(\n  value: T | null | undefined,\n  prop: PropFormat = 'string'\n): value is T {\n  switch (prop) {\n    case 'severity':\n      // Should be one of the allowed severity\n      return typeof value === 'string' && severities.includes(value as any);\n\n    case 'timestamp':\n      // Should be a valid ISO Datetime string\n      return typeof value === 'string' && ISO_DATE_REGEX.test(value);\n\n    case 'string':\n    default:\n      // anything other than null, undefined and '' is a valid string\n      return typeof value === 'string' && !isEmptyOrUndefined(value);\n  }\n}\n\n/**\n * Formats the timestamp in the required format based on the current\n * locale.\n *\n * @param isoTime Timestamp in ISO format\n */\nfunction formatTimestamp(isoTime: string) {\n  const isToday = isDateToday(isoTime);\n  const formatter = getDateTimeFormatter(isToday);\n\n  return formatter.format(new Date(isoTime));\n}\n\nexport { formatTimestamp, isValidValueForProp };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { ComponentChildren, Fragment } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageRendererDataItem, MessageVariant } from './Message.types';\nimport { isValidValueForProp } from './MessageFormattingUtils';\n\nconst messageDetailStyles = {\n  // TODO: Reevaluate once the TEXT component is available (JET-46891)\n  base: cssProps`${{\n    overflowWrap: 'anywhere'\n  }}`,\n\n  banner: cssProps`${{\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-sm-font-size)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)'\n  }}`,\n\n  inline: undefined,\n\n  toast: cssProps`${{\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-sm-font-size)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-detail-text-color)'\n  }}`\n};\n\ntype MessageWithDetailText = {\n  /**\n   * The detail text for the message\n   */\n  detail?: string;\n};\n\n/**\n * Props for the Detail component\n */\ntype Props<K, D> = {\n  /**\n   * The data item for rendering the detail content\n   */\n  item: MessageRendererDataItem<K, D>;\n\n  /**\n   * A custom renderer for rendering the detail content\n   */\n  renderer?: (item: MessageRendererDataItem<K, D>) => ComponentChildren;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n};\n\n/**\n * Default renderer for rendering the detail content.\n *\n * @param item The data item object\n * @returns Rendered detail content\n */\nfunction defaultDetailRenderer<D extends MessageWithDetailText>(\n  item: MessageRendererDataItem<unknown, D>\n): ComponentChildren {\n  const { detail } = item.data;\n  // If the detail is null or an empty string, do not render the\n  // content row\n  if (!isValidValueForProp(detail)) {\n    return null;\n  }\n  return <Fragment>{detail}</Fragment>;\n}\n\n/**\n * Detail Component for rendering the detail content of the Message\n */\nfunction MessageDetail<K, D extends MessageWithDetailText>({\n  item,\n  renderer = defaultDetailRenderer,\n  variant = 'banner'\n}: Props<K, D>) {\n  const renderedContent = renderer(item);\n\n  if (renderedContent == null) return null;\n\n  // If detail content is rendered, then wrap it in a div with specified style classes\n  // TODO: JET-48715 - remove marker classes\n  // Right now, oj-message-banner component uses this for unit tests and has no alternate way for\n  // testing. This will need to be removed as we work on oj-c-message-banner.\n  const markerClassForTests = 'oj-c-messagebanner-detail';\n  const classes = classNames([\n    variant === 'banner' && markerClassForTests,\n    messageDetailStyles.base,\n    messageDetailStyles[variant]\n  ]);\n  return <div class={classes}>{renderedContent}</div>;\n}\n\nexport { MessageDetail };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { ComponentChildren } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageVariant } from './Message.types';\n\nconst messageHeaderStyles = {\n  base: cssProps`${{\n    boxSizing: 'border-box',\n\n    // TODO: Replace with Flex and ResponsiveProps when creating oj-c-message-banner\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    '@media screen and (max-width: 599.9px)': {\n      flexDirection: 'column'\n    }\n  }}`,\n  banner: cssProps`${{\n    lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-summary-line-height)'\n  }}`,\n  inline: undefined,\n  toast: cssProps`${{\n    lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-start-icon-size)'\n  }}`\n};\n\n/**\n * Props for the MessageHeader component\n */\ntype MessageHeaderProps = {\n  variant?: MessageVariant;\n  children?: ComponentChildren;\n};\n/**\n * A component that styles the header for the message component\n * @param param0 Props\n * @returns MessageHeader component instance\n */\nexport function MessageHeader({ children, variant = 'banner' }: MessageHeaderProps) {\n  const rootClasses = classNames([messageHeaderStyles.base, messageHeaderStyles[variant]]);\n  return (\n    <div role=\"presentation\" class={rootClasses}>\n      {children}\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageSeverity, MessageVariant } from './Message.types';\nimport {\n  MessageConfirmationIcon,\n  MessageErrorIcon,\n  MessageInfoIcon,\n  MessageWarningIcon\n} from '../UNSAFE_ThemedIcons';\nimport { Flex } from '../UNSAFE_Flex';\n\nconst messageStartIconStyles = cssProps`${{\n  marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)',\n  display: 'flex',\n  alignSelf: 'flex-start'\n}}`;\n\nconst severityIconStyles = {\n  banner: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-start-icon-color)',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-start-icon-size)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-summary-line-height)'\n  }}`,\n  inline: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-inline-start-icon-color)',\n    fontSize: '1rem'\n  }}`,\n  toast: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-start-icon-color)',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-start-icon-size)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-start-icon-size)',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-start-icon-size)'\n  }}`\n};\n\nconst severityIcons = {\n  confirmation: MessageConfirmationIcon,\n  error: MessageErrorIcon,\n  info: MessageInfoIcon,\n  warning: MessageWarningIcon\n};\n\nconst containerStyles = cssProps`${{\n  height: '100%'\n}}`;\n\n/**\n * Props for the StartIcon component\n */\ntype Props = {\n  /**\n   * The icon severity\n   */\n  severity: Exclude<MessageSeverity, 'none'>;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n\n  /**\n   * Translations resources\n   * TODO: Replace with preact translations when it is available\n   */\n  translations?: {\n    /**\n     * Text for 'error' severity level\n     */\n    error?: string;\n\n    /**\n     * Text for 'warning' severity level\n     */\n    warning?: string;\n\n    /**\n     * Text for 'info' severity level\n     */\n    info?: string;\n\n    /**\n     * Text for 'confirmation' severity level\n     */\n    confirmation?: string;\n  };\n};\n\n/**\n * StartIcon Component for rendering the severity based icon in Message\n */\nfunction MessageStartIcon({ severity, variant = 'banner', translations }: Props) {\n  const IconComponent = severityIcons[severity];\n  // TODO: JET-50793\n  const iconContent =\n    variant !== 'inline' ? (\n      <Flex align=\"center\" height=\"100%\">\n        <span class={containerStyles} role=\"img\" title={translations?.[severity]}>\n          <IconComponent />\n        </span>\n      </Flex>\n    ) : (\n      <span class={containerStyles} role=\"img\" title={translations?.[severity]}>\n        <IconComponent />\n      </span>\n    );\n  // If detail content is rendered, then wrap it in a div with specified style classes\n  // TODO: JET-48715 - remove marker classes\n  // Right now, oj-message-banner component uses this for unit tests and has no alternate way for\n  // testing. This will need to be removed as we work on oj-c-message-banner.\n  const markerClassForTests = 'oj-c-messagebanner-start-icon';\n  return (\n    <div\n      class={classNames([\n        variant === 'banner' && markerClassForTests,\n        messageStartIconStyles,\n        severityIconStyles[variant]\n      ])}\n      role=\"presentation\">\n      {iconContent}\n    </div>\n  );\n}\n\nexport { MessageStartIcon };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageVariant } from './Message.types';\n\nconst messageSummaryStyles = {\n  // TODO: Reevaluate once the TEXT component is available (JET-46891)\n  base: cssProps`${{\n    flex: '1',\n    overflowWrap: 'anywhere'\n  }}`,\n\n  banner: cssProps`${{\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-summary-text-size)',\n    fontWeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-summary-text-weight)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-summary-text-color)'\n  }}`,\n\n  inline: cssProps`${{\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-user-assistance-inline-font-size)',\n    fontWeight: '400',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-user-assistance-inline-text-color)',\n    lineHeight: 1.333\n  }}`,\n\n  toast: cssProps`${{\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-summary-text-size)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-summary-text-color)'\n  }}`\n};\n\n/**\n * Props for the Summary component\n */\ntype Props = {\n  /**\n   * The summary text\n   */\n  text?: string;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n};\n\n/**\n * Summary Component for rendering the summary text of the Message\n */\nfunction MessageSummary({ text, variant = 'banner' }: Props) {\n  // If detail content is rendered, then wrap it in a div with specified style classes\n  // TODO: JET-48715 - remove marker classes\n  // Right now, oj-message-banner component uses this for unit tests and has no alternate way for\n  // testing. This will need to be removed as we work on oj-c-message-banner.\n  const markerClassForTests = 'oj-c-messagebanner-summary';\n  const classes = classNames([\n    variant === 'banner' && markerClassForTests,\n    messageSummaryStyles.base,\n    messageSummaryStyles[variant]\n  ]);\n  return (\n    <div role=\"heading\" class={classes}>\n      {text}\n    </div>\n  );\n}\n\nexport { MessageSummary };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { MessageVariant } from './Message.types';\nimport { formatTimestamp } from './MessageFormattingUtils';\n\nconst messageTimestampStyles = {\n  banner: cssProps`${{\n    flexShrink: 0,\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-xs-font-size)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-secondary)'\n  }}`,\n  inline: undefined,\n  toast: undefined\n};\n\n/**\n * Props for the Timestamp component\n */\ntype Props = {\n  /**\n   * The timestamp to show in ISO format\n   */\n  value: string;\n\n  /**\n   * Style variant\n   */\n  variant?: MessageVariant;\n};\n\n/**\n * Timestamp Component for rendering timestamp in Message\n */\nfunction MessageTimestamp({ value, variant = 'banner' }: Props) {\n  // If detail content is rendered, then wrap it in a div with specified style classes\n  // TODO: JET-48715 - remove marker classes\n  // Right now, oj-message-banner component uses this for unit tests and has no alternate way for\n  // testing. This will need to be removed as we work on oj-c-message-banner.\n  const markerClassForTests = 'oj-c-messagebanner-timestamp';\n  const classes = classNames([\n    variant === 'banner' && markerClassForTests,\n    messageTimestampStyles[variant]\n  ]);\n\n  // Otherwise, render the timestamp\n  const formattedTimestamp = formatTimestamp(value as string);\n  return <div class={classes}>{formattedTimestamp}</div>;\n}\n\nexport { MessageTimestamp };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren } from 'preact';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { Logger } from '../utils/UNSAFE_logger';\nimport { playAudioFromURL, playDefaultNotificationSound } from '../utils/UNSAFE_soundUtils';\nimport { isValidValueForProp } from './MessageFormattingUtils';\nimport { MessageSeverity, MessageVariant } from './Message.types';\n\n/**\n * Logger that prepends the component name to the message\n */\nconst MessageLogger = {\n  error: (message: string, type = 'common') => Logger.error(`JET Message(${type}): ${message}`),\n  warn: (message: string, type = 'common') => Logger.warn(`JET Message(${type}): ${message}`),\n  info: (message: string, type = 'common') => Logger.info(`JET Message(${type}): ${message}`),\n  log: (message: string, type = 'common') => Logger.log(`JET Message(${type}): ${message}`)\n};\n\n/**\n * Plays a sound based on the provided argument. Supported keywords:\n * 1. default - plays the default beep sound\n * 2. none - no sound will be played\n *\n * @param sound Supported keywords or URL to an audio file\n */\nasync function playSound(sound: string) {\n  if (sound === 'none') {\n    // no need to play any audio\n    return;\n  }\n\n  // For default, we play a beep sound using WebAudio API\n  if (sound === 'default') {\n    try {\n      playDefaultNotificationSound();\n    } catch (error) {\n      // Default sound is not played due to some error\n      // Log a message and return doing nothing else\n      MessageLogger.warn(`Failed to play the default sound. ${error}.`);\n    }\n    return;\n  }\n\n  // If it is not a key word, then it is an URL\n  try {\n    await playAudioFromURL(sound);\n  } catch (error) {\n    // Playing audio using the URL failed.\n    MessageLogger.warn(`Failed to play the audio from the url ${sound}. ${error}.`);\n  }\n}\n\n/**\n * A helper function that throws an error\n *\n * @param message The error message\n * @param type The type of the message that is throwing an error\n * @throws {Error}\n */\nfunction throwError(message: string, type = 'common') {\n  throw new Error(`JET Message(${type}) - ${message}`);\n}\n\n/**\n * Fetches a renderer for the current message if one is provided\n *\n * @param message The item context for the current message\n * @param rendererIdentifier Identifier of the current renderer\n * @param renderers All available renderers\n * @returns The renderer for rendering the custom content\n */\nfunction getRenderer<K, D, R>(\n  message: Item<K, D>,\n  rendererIdentifier?: string | ((item: Item<K, D>) => string | undefined),\n  renderers?: Record<string, (data: R) => ComponentChildren>,\n  type?: string\n) {\n  // If either detailRenderer function or record of renderers are not available,\n  // return null\n  if (!rendererIdentifier || !renderers) {\n    return undefined;\n  }\n\n  const rendererKey =\n    typeof rendererIdentifier === 'function' ? rendererIdentifier(message) : rendererIdentifier;\n\n  // If rendererKey is null or undefined, then we need to use default rendering\n  // so return null\n  if (rendererKey == null) {\n    return undefined;\n  }\n\n  // If the returned render key is a string but does not exist in the provided\n  // record of renderers, throw an error\n  if (!(rendererKey in renderers)) {\n    throwError(\n      `${rendererKey} is not a valid template name for the message with key=${message.key}`,\n      type\n    );\n  }\n\n  // Else, fetch and return the renderer\n  return renderers[rendererKey];\n}\n\n/**\n * Fetches a renderer for the current message if one is provided.\n * Proxies the said renderer to exclude the index in the payload.\n *\n * @param message The item context for the current message\n * @param rendererIdentifier Identifier of the current renderer\n * @param renderers All available renderers\n * @returns The renderer for rendering the custom content\n */\nfunction getRendererWithoutIndex<K, D, R>(\n  message: Item<K, D>,\n  rendererIdentifier?: string | ((item: Item<K, D>) => string | undefined),\n  renderers?: Record<string, (data: R) => ComponentChildren>,\n  type?: string\n) {\n  const renderer = getRenderer(message, rendererIdentifier, renderers, type);\n  if (typeof renderer === 'function') {\n    return (data: R) => {\n      const dataCopy = { ...data };\n      if ('index' in dataCopy) {\n        delete (dataCopy as any)['index'];\n      }\n      return renderer.call(null, dataCopy);\n    };\n  }\n  return renderer;\n}\n\n/**\n * Generates a root style class based on the severity. For invalid severity and severity=none\n * no specific style class exists.\n *\n * @param severity The message severity\n * @returns calculated style class based on the severity\n */\nfunction severityBasedStyleClass(severity: MessageSeverity, variant: MessageVariant) {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none' ? `oj-c-message${variant}-${severity}` : '';\n}\n\n/**\n * Determines if a severity icon is needed based on the component severity\n *\n * @param severity The component severity\n * @returns Whether or not to render the severity icon\n */\nfunction isSeverityIconNeeded(\n  severity: MessageSeverity\n): severity is Exclude<MessageSeverity, 'none'> {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none';\n}\n\nexport {\n  getRenderer,\n  getRendererWithoutIndex,\n  playSound,\n  throwError,\n  severityBasedStyleClass,\n  isSeverityIconNeeded\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { ComponentChildren, Ref, VNode } from 'preact';\nimport { useCallback, useEffect, useRef } from 'preact/hooks';\nimport { Flex } from '../UNSAFE_Flex';\nimport { MessageToastItem } from '../UNSAFE_MessageToast';\nimport { Timer } from '../utils/PRIVATE_timer';\nimport { classNames as cx } from '../utils/UNSAFE_classNames';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { MessageRendererDataItem, MessageSeverity } from './Message.types';\nimport { MessageCloseButton } from './MessageCloseButton';\nimport { MessageCustomStartIcon } from './MessageCustomStartIcon';\nimport { MessageDetail } from './MessageDetail';\nimport { isValidValueForProp } from './MessageFormattingUtils';\nimport { MessageHeader } from './MessageHeader';\nimport { MessageStartIcon } from './MessageStartIcon';\nimport { MessageSummary } from './MessageSummary';\nimport { MessageTimestamp } from './MessageTimestamp';\nimport { playSound, severityBasedStyleClass } from './MessageUtils';\n\n// TODO: Refactor Message Item types\n// https://jira.oraclecorp.com/jira/browse/JET-54215\n\n/**\n * An object representing a single message in Message component.\n */\nexport type MessageItem = {\n  /**\n   * Defines whether or not to include the close icon for the message\n   *\n   * @default 'on'\n   */\n  closeAffordance?: 'on' | 'off';\n\n  /**\n   * Defines the detail text of the message\n   */\n  detail?: string;\n\n  /**\n   * Defines the severity of the message\n   */\n  severity?: MessageSeverity;\n\n  /**\n   * Defines the sound to be played when opening the message\n   */\n  sound?: 'default' | 'none' | string;\n\n  /**\n   * Defines the primary text of the message\n   */\n  summary?: string;\n\n  /**\n   * Defines the timestamp for the message in ISO format\n   */\n  timestamp?: string;\n};\n\n/**\n * Props for the Message Component\n */\ntype Props<Key, Data> = {\n  /**\n   * A ref object for holding reference to this component\n   */\n  messageRef?: Ref<HTMLDivElement>;\n\n  /**\n   * The index of the current message instance\n   */\n  index?: number;\n\n  /**\n   * The message item with all the necessary data in it\n   */\n  item: Item<Key, Data>;\n\n  /**\n   * A renderer that renders the close button in the message.\n   */\n  closeButtonRenderer?: (title: string, onAction: (event?: Event) => void) => VNode;\n\n  /**\n   * A custom renderer for rendering the detail content\n   */\n  detailRenderer?: (item: MessageRendererDataItem<Key, Data>) => ComponentChildren;\n\n  /**\n   * A custom renderer for rendering the start icon\n   */\n  iconRenderer?: (item: MessageRendererDataItem<Key, Data>) => ComponentChildren;\n\n  /**\n   * Triggered when a user tries to close a message through UI interaction. The parent\n   * should listen to this event and remove the corresponding message item from the data\n   * which would then result in the message to be removed from the DOM. If the parent\n   * fails to remove the message item from the data, then no change will be done in the\n   * UI by the component.\n   */\n  onClose?: (item: Item<Key, Data>) => void;\n\n  /**\n   * A message can be a Banner message or Toast message.\n   *\n   * Furthermore, a Banner message can have a different look and feel. For example, when using page-level\n   * messaging the messages need to be rendered from edge to edge without any outline. On the other\n   * hand, when they are being used in a section of a page or a dialog, they need to be rendered\n   * with an outline. This attribute can be used to specify where the component is being used so that\n   * it will render the messages accordingly.\n   */\n  variant?: 'pageBanner' | 'sectionBanner' | 'toast';\n\n  /**\n   * Translations resources\n   */\n  translations?: {\n    /**\n     * Label for the message close button\n     */\n    close?: string;\n\n    /**\n     * Text for 'error' severity level\n     */\n    error?: string;\n\n    /**\n     * Text for 'warning' severity level\n     */\n    warning?: string;\n\n    /**\n     * Text for 'info' severity level\n     */\n    info?: string;\n\n    /**\n     * Text for 'confirmation' severity level\n     */\n    confirmation?: string;\n  };\n};\n\n/**\n * Determines the base variant of the message - banner or toast\n *\n * @param variant The message variant\n * @returns The base variant\n */\nfunction getBaseVariant(variant: 'pageBanner' | 'sectionBanner' | 'toast') {\n  if (variant === 'pageBanner' || variant === 'sectionBanner') {\n    return 'banner';\n  }\n  return 'toast';\n}\n\n/**\n * Determines if a severity icon is needed based on the component severity\n *\n * @param severity The component severity\n * @returns Whether or not to render the severity icon\n */\nfunction isSeverityIconNeeded(\n  severity: MessageSeverity\n): severity is Exclude<MessageSeverity, 'none'> {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none';\n}\n\n/**\n * CSS styles for various components\n */\nconst messageStyles = {\n  base: {\n    banner: cssProps`${{\n      backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-background-color)',\n      borderBottom: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color)',\n\n      '&:focus-visible': {\n        outlineStyle: 'dotted',\n        outlineWidth: '1px',\n        outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n        outlineOffset: '1px'\n      }\n    }}`,\n    toast: cssProps`${{\n      backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-toast-background-color)',\n      borderRadius: '6px',\n      boxShadow: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-box-shadow-sm)',\n      width: 'fit-content',\n\n      '&:focus-visible': {\n        outlineStyle: 'dotted',\n        outlineWidth: '1px',\n        outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n        outlineOffset: '1px'\n      }\n    }}`\n  },\n  section: cssProps`${{\n    border: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-lg)'\n  }}`,\n  // TODO: Replace with Flex and View components to handle padding and flex\n  content: {\n    base: cssProps`${{\n      alignItems: 'center',\n      boxSizing: 'border-box',\n      display: 'flex',\n      flexWrap: 'wrap',\n      paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)',\n      paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)'\n    }}`,\n    banner: cssProps`${{\n      paddingInlineStart:\n        'var(--oj-c-PRIVATE-DO-NOT-USE-core-gutter-start, var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x))',\n      paddingInlineEnd:\n        'var(--oj-c-PRIVATE-DO-NOT-USE-core-gutter-end, var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x))'\n    }}`,\n    toast: cssProps`${{\n      paddingInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)',\n      paddingInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)'\n    }}`\n  }\n} as const;\n\n/**\n * Default timeout duration for autoTimeout in milliseconds\n */\nconst MIN_SECONDS = 5;\nconst DEFAULT_TIMEOUT = MIN_SECONDS * 1000;\n\n/**\n * Component that renders an individual message\n */\nfunction Message<K extends string | number = string | number, D extends MessageItem = MessageItem>({\n  closeButtonRenderer,\n  detailRenderer,\n  iconRenderer,\n  index = -1,\n  item,\n  onClose,\n  messageRef = () => {},\n  variant = 'pageBanner',\n  translations\n}: Props<K, D>) {\n  const { closeAffordance = 'on', severity = 'error', sound, summary, timestamp } = item.data;\n  const { autoTimeout = 'off' } = item.data as MessageToastItem;\n  const baseVariant = getBaseVariant(variant);\n\n  /**\n   * Handles clicking on the close icon of the message\n   */\n  const handleClose = useCallback(() => {\n    onClose?.(item);\n  }, [item, onClose]);\n\n  /**\n   * Handles closing the message on pressing Esc\n   */\n  const handleCloseOnEsc = useCallback(\n    (event: KeyboardEvent) => {\n      // Close the message only when closeAffordance is on\n      if (event.key === 'Escape' && closeAffordance === 'on') {\n        onClose?.(item);\n      }\n    },\n    [closeAffordance, item, onClose]\n  );\n\n  /**\n   * Set auto timeout for toast messages\n   */\n  const shouldTimeout = baseVariant === 'toast' && autoTimeout !== 'off';\n  const currentTimerRef = useRef<Timer>();\n  const timeout = typeof autoTimeout === 'number' ? autoTimeout : DEFAULT_TIMEOUT;\n  const timeoutDuration = autoTimeout === 'on' ? DEFAULT_TIMEOUT : timeout;\n\n  const startTimer = useCallback(() => {\n    if (currentTimerRef.current) return;\n\n    currentTimerRef.current = new Timer(handleClose, timeoutDuration);\n  }, [handleClose, timeoutDuration]);\n\n  const clearTimer = useCallback(() => {\n    if (!currentTimerRef.current) return;\n\n    currentTimerRef.current.clear();\n    currentTimerRef.current = undefined;\n  }, []);\n\n  const pauseTimer = useCallback(() => {\n    currentTimerRef.current?.pause();\n  }, []);\n\n  const resumeTimer = useCallback(() => {\n    currentTimerRef.current?.resume();\n  }, []);\n\n  useEffect(() => {\n    if (isValidValueForProp(sound)) {\n      // It is sufficient to check for the value to be a\n      // non-empty string. The playSound method takes care of the rest.\n      playSound(sound);\n    }\n\n    // on mount, start timer for toast messages if needed\n    if (shouldTimeout) {\n      startTimer();\n    }\n\n    return () => {\n      // clear out any pending timer\n      clearTimer();\n    };\n    // eslint-disable-next-line\n  }, []); // No deps to run this only on mount\n\n  const rootClasses = cx([\n    messageStyles.base[baseVariant],\n    // for now, we do not have severity based styling on toast. So, we ignore this class for toasts\n    variant !== 'toast' && severityBasedStyleClass(severity, baseVariant),\n    variant === 'sectionBanner' && messageStyles.section\n  ]);\n\n  const contentClasses = cx([messageStyles.content.base, messageStyles.content[baseVariant]]);\n\n  // We will be animating the root div, so add padding to an inner wrapper div so that\n  // when animating height looks smooth. If padding were to be added to the root\n  // div, the animation will not be smooth as height will never reach 0 due to the\n  // padding.\n  return (\n    <div\n      ref={messageRef}\n      class={rootClasses}\n      role=\"alert\"\n      aria-atomic=\"true\"\n      tabIndex={0}\n      onKeyUp={handleCloseOnEsc}\n      onfocusin={pauseTimer}\n      onfocusout={resumeTimer}>\n      <div class={contentClasses}>\n        {iconRenderer ? (\n          <MessageCustomStartIcon item={{ ...item, index }} renderer={iconRenderer} />\n        ) : isSeverityIconNeeded(severity) ? (\n          <MessageStartIcon severity={severity} variant={baseVariant} translations={translations} />\n        ) : null}\n        <Flex direction=\"column\" flex=\"1\" gap=\"--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x\">\n          <MessageHeader variant={baseVariant}>\n            <MessageSummary variant={baseVariant} text={summary} />\n            {isValidValueForProp(timestamp, 'timestamp') && variant !== 'toast' && (\n              <MessageTimestamp variant={baseVariant} value={timestamp!} />\n            )}\n          </MessageHeader>\n          <MessageDetail\n            variant={baseVariant}\n            item={{ ...item, index }}\n            renderer={detailRenderer}\n          />\n        </Flex>\n        {closeAffordance === 'on' && (\n          <MessageCloseButton\n            buttonRenderer={closeButtonRenderer}\n            title={translations?.close}\n            variant={baseVariant}\n            onAction={handleClose}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport { Message };\n","import { JSX, RenderableProps } from 'preact';\nimport { useCallback, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useAnimation, UseAnimationConfig } from '../hooks/UNSAFE_useAnimation';\nimport { useMessagesContext } from '../hooks/UNSAFE_useMessagesContext';\nimport { Transition, TransitionProps } from '../PRIVATE_TransitionGroup';\n\ntype State = 'entering' | 'exiting';\ntype AnimationStates = UseAnimationConfig<State, HTMLDivElement>['animationStates'];\ntype AnimationCallback = UseAnimationConfig<State, HTMLDivElement>['onAnimationEnd'];\ntype Props = RenderableProps<TransitionProps> & {\n  animationStates?: AnimationStates;\n  initialAnimationStyles?: JSX.HTMLAttributes<HTMLDivElement>['style'];\n};\n\nconst DEFAULT_ANIMATION_STATES = {};\n\n/**\n * A intermediary component that handles animation for the messages component.\n *\n * The expected flow is as follows:\n * 1. message removed from the data\n * 2. onExiting called and a callback is passed which needs to be called to complete the transition\n * 3. state set to \"exiting\" in this component\n * 4. triggers useAnimation to perform the exit animation\n * 5. onAnimationEnd is called after the animation, which invokes the callback provided earlier\n * 6. onExited is called (done when the callback mentioned above is called)\n * 7. message is removed from the UI\n *\n * @param param0 Props of the message component\n */\nexport function MessageTransition({\n  animationStates = DEFAULT_ANIMATION_STATES,\n  initialAnimationStyles,\n  onEntering,\n  onExiting,\n  ...transitionProps\n}: Props) {\n  const [state, setState] = useState<State>('entering');\n  const animationCallbackRef = useRef<() => void>();\n  const busyStateResolveRef = useRef<() => void>();\n  const { controller, nodeRef } = useAnimation(state, {\n    animationStates,\n    isAnimatedOnMount: true,\n    onAnimationEnd: useCallback<NonNullable<AnimationCallback>>(() => {\n      // resolve animation callbacks & busyStates\n      animationCallbackRef.current?.();\n      animationCallbackRef.current = undefined;\n      busyStateResolveRef.current?.();\n      busyStateResolveRef.current = undefined;\n    }, [])\n  });\n  const { addBusyState } = useMessagesContext();\n\n  const onEnteringCallback = useCallback<NonNullable<TransitionProps['onEntering']>>(\n    (node, callback, metadata) => {\n      // cancel any existing animation\n      if (animationCallbackRef.current) {\n        animationCallbackRef.current = undefined;\n        controller.cancel();\n      }\n\n      // resolve any existing busyState\n      busyStateResolveRef.current?.();\n      busyStateResolveRef.current = undefined;\n\n      onEntering?.(node, undefined, metadata);\n      // start the animation and set the callback & busyState\n      setState('entering');\n\n      // if there is no animation configured, resolve immediately\n      if (\n        animationStates['entering'] === undefined &&\n        animationStates['exiting => entering'] === undefined\n      ) {\n        callback?.();\n        return;\n      }\n      animationCallbackRef.current = callback;\n      busyStateResolveRef.current = addBusyState?.('messages animating');\n    },\n    [animationStates, controller, addBusyState, onEntering]\n  );\n\n  const onExitingCallback = useCallback<NonNullable<TransitionProps['onExiting']>>(\n    (node, callback, metadata) => {\n      // cancel any existing animation\n      if (animationCallbackRef.current) {\n        animationCallbackRef.current = undefined;\n        controller.cancel();\n      }\n\n      // resolve any existing busyState\n      busyStateResolveRef.current?.();\n      busyStateResolveRef.current = undefined;\n\n      onExiting?.(node, undefined, metadata);\n      // start the animation and set the callback & busyState\n      setState('exiting');\n\n      // if there is no animation configured, resolve immediately\n      if (\n        animationStates['exiting'] === undefined &&\n        animationStates['entering => exiting'] === undefined\n      ) {\n        callback?.();\n        return;\n      }\n      animationCallbackRef.current = callback;\n      busyStateResolveRef.current = addBusyState?.('messages animating');\n    },\n    [animationStates, controller, addBusyState, onExiting]\n  );\n\n  // if animation is interrupted, the busyState may be left hanging. So clear that on unmount\n  // Note: When using a class-based component inside a functional component, the timings of\n  // componentDidMount and useEffect might differ. So, in order to guarantee the registration\n  // of the cleanup function, use useLayoutEffect instead of useEffect. This way we can make sure\n  // the cleanup registers at all times.\n  useLayoutEffect(() => () => busyStateResolveRef.current?.(), []);\n\n  return (\n    <div ref={nodeRef} style={initialAnimationStyles}>\n      <Transition\n        {...transitionProps}\n        onEntering={onEnteringCallback}\n        onExiting={onExitingCallback}\n      />\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, ComponentProps, Fragment } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { TransitionGroup } from '../PRIVATE_TransitionGroup';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { MessageTransition } from './MessageTransition';\n\n/**\n * Metadata passed on to the Transition component\n */\ntype TransitionMetadata<K> = {\n  index: number;\n  key: K;\n};\n\n/**\n * Type of the render context passed on to render individual message\n */\ntype MessageRenderContext<Key, Data> = {\n  /**\n   * The index of the current message\n   */\n  index: number;\n\n  /**\n   * The message item with all the necessary data in it\n   */\n  item: Item<Key, Data>;\n};\n\ntype PickedPropsFromMessageTransition = Pick<\n  ComponentProps<typeof MessageTransition>,\n  'animationStates' | 'initialAnimationStyles'\n>;\n\n/**\n * Props for the Message Component\n */\ntype Props<Key, Data> = PickedPropsFromMessageTransition & {\n  /**\n   * A render function that renders individual child.\n   */\n  children?: (context: MessageRenderContext<Key, Data>) => ComponentChild;\n\n  /**\n   * Data for the messages. This data is used for rendering each message.\n   */\n  data: Item<Key, Data>[];\n\n  /**\n   * A callback function that gets called before a message is removed\n   */\n  onMessageWillRemove?: (key: Key, index: number, node?: Element) => void;\n};\n\n/**\n * The component that renders individual messages for the provided data.\n */\nexport function MessagesManager<K extends string | number = string | number, D = any>({\n  data,\n  animationStates,\n  children,\n  initialAnimationStyles,\n  onMessageWillRemove\n}: Props<K, D>) {\n  /**\n   * Handles when a message has finished to exit.\n   *\n   * @param node The corresponding message element\n   * @param callback A callback function to be called after the animation is complete\n   */\n  const handleExited = useCallback(\n    async (node?: Element, metadata?: TransitionMetadata<K>) => {\n      metadata && onMessageWillRemove?.(metadata.key, metadata.index, node);\n    },\n    [onMessageWillRemove]\n  );\n\n  return (\n    <TransitionGroup elementType={Fragment}>\n      {data.map((item, index) => (\n        <MessageTransition\n          animationStates={animationStates}\n          initialAnimationStyles={initialAnimationStyles}\n          key={item.key}\n          metadata={{ index, key: item.key }}\n          onExited={handleExited}>\n          {children?.({ index, item })}\n        </MessageTransition>\n      ))}\n    </TransitionGroup>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { Message } from './Message';\nexport { MessageCloseButton } from './MessageCloseButton';\nexport { MessageDetail } from './MessageDetail';\nexport { formatTimestamp, isValidValueForProp } from './MessageFormattingUtils';\nexport { MessagesManager } from './MessagesManager';\nexport { MessageStartIcon } from './MessageStartIcon';\nexport { MessageSummary } from './MessageSummary';\nexport { MessageTimestamp } from './MessageTimestamp';\nexport {\n  getRenderer,\n  getRendererWithoutIndex,\n  playSound,\n  throwError,\n  severityBasedStyleClass,\n  isSeverityIconNeeded\n} from './MessageUtils';\nexport type { MessageSeverity, MessageRendererDataItem } from './Message.types';\nexport { severities } from './Message.types';\n"],"names":["messageCloseButtonStyles","inline","undefined","MessageCloseButton","onAction","buttonRenderer","title","variant","base","_jsx","Object","assign","class","classes","children","renderedButton","messageStartIconStyles","MessageCustomStartIcon","item","renderer","toast","role","messageDetailStyles","defaultDetailRenderer","detail","data","isValidValueForProp","Fragment","MessageDetail","renderedContent","messageHeaderStyles","MessageHeader","rootClasses","classNames","severityIconStyles","severityIcons","confirmation","MessageConfirmationIcon","error","MessageErrorIcon","info","MessageInfoIcon","warning","MessageWarningIcon","containerStyles","MessageStartIcon","severity","translations","IconComponent","iconContent","Flex","align","height","messageSummaryStyles","MessageSummary","text","messageTimestampStyles","MessageTimestamp","value","formattedTimestamp","formatTimestamp","isSeverityIconNeeded","getBaseVariant","isValidSeverity","messageStyles","content","MIN_SECONDS","DEFAULT_TIMEOUT","Message","closeButtonRenderer","detailRenderer","iconRenderer","index","onClose","messageRef","closeAffordance","sound","summary","timestamp","baseVariant","handleClose","useCallback","handleCloseOnEsc","event","currentTimerRef","useRef","timeout","autoTimeout","timeoutDuration","startTimer","clearTimer","current","clear","pauseTimer","_a","pause","resumeTimer","resume","shouldTimeout","section","contentClasses","cx"],"mappings":"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"}