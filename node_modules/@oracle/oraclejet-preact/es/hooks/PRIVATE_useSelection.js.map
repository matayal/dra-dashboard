{"version":3,"file":"PRIVATE_useSelection.js","sources":["../../../src/hooks/PRIVATE_useSelection/useSelection.ts","../../../src/hooks/PRIVATE_useSelection/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { RefObject } from 'preact';\nimport { useCallback, useRef } from 'preact/hooks';\nimport { stringLiteralArray } from '../../utils/UNSAFE_arrayUtils';\nimport { Keys, containsKey, isKeyDefined, addKey, removeKey } from '../../utils/UNSAFE_keys';\nimport { SelectionDetail, SelectionMode } from '../../UNSAFE_Collection';\n\n/**\n * Type for selection behavior.  See useMultipleSelection hook for details.\n */\nexport const behaviors = stringLiteralArray(['toggle', 'replace']);\nexport type SelectionBehavior = typeof behaviors[number];\n\n/**\n * Type for payload of selection range change event handler\n */\nexport type SelectionRangeDetail<K> = {\n  value: { start: K; end: K };\n};\n\nconst isShiftModeSupported = <K>(\n  anchorKey: K,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  selectionBehavior: SelectionBehavior\n) => {\n  return (\n    selectionMode === 'multiple' &&\n    selectionBehavior !== 'toggle' &&\n    containsKey(selectedKeys, anchorKey)\n  );\n};\n\nconst handleSelect = <K>(\n  event: MouseEvent | KeyboardEvent,\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  selectionBehavior: SelectionBehavior,\n  isSelectionRequired: boolean,\n  keyboardCursorRef: RefObject<K | undefined>,\n  anchorKey?: K,\n  onChange?: (detail: SelectionDetail<K>) => void,\n  onRangeChange?: (detail: SelectionRangeDetail<K>) => void\n) => {\n  const itemKey = keyExtractor(event.target as HTMLElement);\n  if (itemKey == null) {\n    return;\n  }\n\n  // handle shift key selection\n  if (\n    event.shiftKey &&\n    anchorKey !== undefined &&\n    onRangeChange &&\n    isShiftModeSupported(anchorKey, selectedKeys, selectionMode, selectionBehavior)\n  ) {\n    onRangeChange({ value: { start: anchorKey, end: itemKey } });\n    // set keyboard selection cursor in case user extends with SHIFT+ARROW\n    if (keyboardCursorRef) {\n      keyboardCursorRef.current = itemKey;\n    }\n    return;\n  }\n\n  const selected = containsKey(selectedKeys, itemKey);\n  let keySet = selectedKeys;\n  if (!selected) {\n    if (\n      selectionMode === 'single' ||\n      (event as KeyboardEvent).key === 'Enter' ||\n      (selectionBehavior === 'replace' && !(event.ctrlKey || event.metaKey))\n    ) {\n      // should only contains this item key\n      keySet = { all: false, keys: new Set([itemKey]) };\n    } else {\n      // add to existing selected keys\n      keySet = addKey(selectedKeys, itemKey);\n    }\n  } else if ((event as KeyboardEvent).key !== 'Enter') {\n    // no de-select for enter key\n    if (\n      selectionBehavior === 'toggle' ||\n      event.ctrlKey ||\n      event.metaKey ||\n      (event as KeyboardEvent).key === ' '\n    ) {\n      // de-select only when ctrl/meta key is pressed or selectionBehavior is\n      // explicitly set to toggle\n      keySet = removeKey(selectedKeys, itemKey, isSelectionRequired);\n    } else if (selectionMode === 'multiple' && (selectedKeys.all || selectedKeys.keys.size > 1)) {\n      // in this case everything should be de-selected except for this key\n      keySet = { all: false, keys: new Set([itemKey]) };\n    }\n  }\n\n  // only invoke callback if there is really a change\n  // note onSelectionChange should never be null here\n  if (selectedKeys != keySet && onChange) {\n    onChange({ value: keySet, target: event.target });\n    if (event.type === 'click') {\n      event.stopPropagation();\n    }\n  }\n};\n\n/**\n * Hook for handling various selection mode.  This can be reuse by all Collection components.\n * @param keyExtractor function to extract the key based on provided element\n * @param selectedKeys the currently selected keys\n * @param selectionMode the selection mode\n * @param selectionBehavior the selection behavior.  If the value is 'toggle', then the key is\n *                          added/removed from the current selected keys.  If the value is 'replace',\n *                          then the current selected keys are cleared first before the key is added\n *                          unless the ctrl/shift/meta key is pressed.\n * @param onSelectionChange callback function that is invoked when selection has changed.\n * @returns an event map that the consumer can register as event listeners\n */\nexport function useSelection<K>(\n  keyExtractor: (element: HTMLElement) => K | null,\n  selectedKeys: Keys<K>,\n  selectionMode: SelectionMode,\n  isSelectionRequired: boolean,\n  selectionBehavior: SelectionBehavior,\n  onChange?: (detail: SelectionDetail<K>) => void,\n  anchorKey?: K,\n  currentKey?: K | undefined,\n  getPrevNextKey?: (currentKey: K | undefined, isPrev: boolean) => () => K | null,\n  scrollToKey?: (key: K) => void,\n  onRangeChange?: (detail: SelectionRangeDetail<K>) => void\n) {\n  // ref to track the cursor for the SHIFT+ARROW keyboard selection separately than the anchor of the selection.\n  const keyboardSelectionCursor = useRef<K>();\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      handleSelect(\n        event,\n        keyExtractor,\n        selectedKeys,\n        selectionMode,\n        selectionBehavior,\n        isSelectionRequired,\n        keyboardSelectionCursor,\n        anchorKey,\n        onChange,\n        onRangeChange\n      );\n      if (!event.shiftKey) {\n        // reset keyboard cursor when using mouse to select\n        keyboardSelectionCursor.current = undefined;\n      }\n    },\n    [\n      keyExtractor,\n      selectedKeys,\n      selectionMode,\n      selectionBehavior,\n      isSelectionRequired,\n      keyboardSelectionCursor,\n      anchorKey,\n      onChange,\n      onRangeChange\n    ]\n  );\n\n  // general keyboard events listen to keyUp for a11y\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      // older browser that we don't support returns 'Spacebar' for space key\n      if (event.key === ' ' || event.key === 'Enter') {\n        handleSelect(\n          event,\n          keyExtractor,\n          selectedKeys,\n          selectionMode,\n          selectionBehavior,\n          isSelectionRequired,\n          keyboardSelectionCursor,\n          anchorKey,\n          onChange,\n          event.shiftKey && event.key === ' ' ? onRangeChange : undefined\n        );\n      }\n    },\n    [\n      keyExtractor,\n      selectedKeys,\n      selectionMode,\n      selectionBehavior,\n      isSelectionRequired,\n      anchorKey,\n      onChange,\n      onRangeChange\n    ]\n  );\n\n  // arrowKey events listen to keyDown so they can support holding them down\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // prevent default (propagation) for keyDown to space bar causing container to scroll\n      if (event.key === ' ') {\n        event.preventDefault();\n        return;\n      }\n\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        if (event.shiftKey && getPrevNextKey && scrollToKey) {\n          let keySet = selectedKeys;\n          // on first selection event, set keyboard cursor to start at currentKey\n          if (!keyboardSelectionCursor.current && isKeyDefined(currentKey)) {\n            keySet = { all: false, keys: new Set([currentKey as K]) };\n          }\n          const newAnchorKey = getPrevNextKey(\n            keyboardSelectionCursor.current || currentKey,\n            event.key === 'ArrowDown' ? false : true\n          );\n          const cursorKey = newAnchorKey();\n          if (cursorKey != null) {\n            // extend selection\n            if (!containsKey(keySet, cursorKey)) {\n              keySet = addKey(keySet, cursorKey);\n              // subtract from selection\n            } else if (\n              keyboardSelectionCursor.current != null &&\n              keyboardSelectionCursor.current !== cursorKey\n            ) {\n              keySet = removeKey(keySet, keyboardSelectionCursor.current, isSelectionRequired);\n            }\n            keyboardSelectionCursor.current = cursorKey;\n            // keep visible\n            scrollToKey(cursorKey);\n          }\n          if (selectedKeys != keySet && onChange) {\n            onChange({ value: keySet, target: event.target });\n          }\n        } else {\n          // reset keyBoard on non-shifted arrow use as this interrupts the extend mode (and would make for messy logic that doesn't align with current Jet behavior)\n          keyboardSelectionCursor.current = undefined;\n        }\n      }\n    },\n    [selectedKeys, isSelectionRequired, onChange, currentKey, getPrevNextKey, scrollToKey]\n  );\n\n  const selectionProps =\n    selectionMode === 'none' || onChange == null ? {} : { onClick, onKeyDown, onKeyUp };\n  return { selectionProps };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { useSelection, SelectionBehavior, SelectionRangeDetail } from './useSelection';\n"],"names":[],"mappings":";;;;;AAaA;;AAEG;AACI,MAAM,SAAS,GAAG,kBAAkB,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;AAUnE,MAAM,oBAAoB,GAAG,CAC3B,SAAY,EACZ,YAAqB,EACrB,aAA4B,EAC5B,iBAAoC,KAClC;IACF,QACE,aAAa,KAAK,UAAU;AAC5B,QAAA,iBAAiB,KAAK,QAAQ;AAC9B,QAAA,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,EACpC;AACJ,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,CACnB,KAAiC,EACjC,YAAgD,EAChD,YAAqB,EACrB,aAA4B,EAC5B,iBAAoC,EACpC,mBAA4B,EAC5B,iBAA2C,EAC3C,SAAa,EACb,QAA+C,EAC/C,aAAyD,KACvD;IACF,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,MAAqB,CAAC,CAAC;IAC1D,IAAI,OAAO,IAAI,IAAI,EAAE;QACnB,OAAO;AACR,KAAA;;IAGD,IACE,KAAK,CAAC,QAAQ;AACd,QAAA,SAAS,KAAK,SAAS;QACvB,aAAa;QACb,oBAAoB,CAAC,SAAS,EAAE,YAAY,EAAE,aAAa,EAAE,iBAAiB,CAAC,EAC/E;AACA,QAAA,aAAa,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;;AAE7D,QAAA,IAAI,iBAAiB,EAAE;AACrB,YAAA,iBAAiB,CAAC,OAAO,GAAG,OAAO,CAAC;AACrC,SAAA;QACD,OAAO;AACR,KAAA;IAED,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACpD,IAAI,MAAM,GAAG,YAAY,CAAC;IAC1B,IAAI,CAAC,QAAQ,EAAE;QACb,IACE,aAAa,KAAK,QAAQ;YACzB,KAAuB,CAAC,GAAG,KAAK,OAAO;AACxC,aAAC,iBAAiB,KAAK,SAAS,IAAI,EAAE,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EACtE;;AAEA,YAAA,MAAM,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;AACnD,SAAA;AAAM,aAAA;;AAEL,YAAA,MAAM,GAAG,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;AACxC,SAAA;AACF,KAAA;AAAM,SAAA,IAAK,KAAuB,CAAC,GAAG,KAAK,OAAO,EAAE;;QAEnD,IACE,iBAAiB,KAAK,QAAQ;AAC9B,YAAA,KAAK,CAAC,OAAO;AACb,YAAA,KAAK,CAAC,OAAO;AACZ,YAAA,KAAuB,CAAC,GAAG,KAAK,GAAG,EACpC;;;YAGA,MAAM,GAAG,SAAS,CAAC,YAAY,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC;AAChE,SAAA;AAAM,aAAA,IAAI,aAAa,KAAK,UAAU,KAAK,YAAY,CAAC,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE;;AAE3F,YAAA,MAAM,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;AACnD,SAAA;AACF,KAAA;;;AAID,IAAA,IAAI,YAAY,IAAI,MAAM,IAAI,QAAQ,EAAE;AACtC,QAAA,QAAQ,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;AAClD,QAAA,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;YAC1B,KAAK,CAAC,eAAe,EAAE,CAAC;AACzB,SAAA;AACF,KAAA;AACH,CAAC,CAAC;AAEF;;;;;;;;;;;AAWG;AACG,SAAU,YAAY,CAC1B,YAAgD,EAChD,YAAqB,EACrB,aAA4B,EAC5B,mBAA4B,EAC5B,iBAAoC,EACpC,QAA+C,EAC/C,SAAa,EACb,UAA0B,EAC1B,cAA+E,EAC/E,WAA8B,EAC9B,aAAyD,EAAA;;AAGzD,IAAA,MAAM,uBAAuB,GAAG,MAAM,EAAK,CAAC;AAE5C,IAAA,MAAM,OAAO,GAAG,WAAW,CACzB,CAAC,KAAiB,KAAI;QACpB,YAAY,CACV,KAAK,EACL,YAAY,EACZ,YAAY,EACZ,aAAa,EACb,iBAAiB,EACjB,mBAAmB,EACnB,uBAAuB,EACvB,SAAS,EACT,QAAQ,EACR,aAAa,CACd,CAAC;AACF,QAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;;AAEnB,YAAA,uBAAuB,CAAC,OAAO,GAAG,SAAS,CAAC;AAC7C,SAAA;AACH,KAAC,EACD;QACE,YAAY;QACZ,YAAY;QACZ,aAAa;QACb,iBAAiB;QACjB,mBAAmB;QACnB,uBAAuB;QACvB,SAAS;QACT,QAAQ;QACR,aAAa;AACd,KAAA,CACF,CAAC;;AAGF,IAAA,MAAM,OAAO,GAAG,WAAW,CACzB,CAAC,KAAoB,KAAI;;QAEvB,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE;AAC9C,YAAA,YAAY,CACV,KAAK,EACL,YAAY,EACZ,YAAY,EACZ,aAAa,EACb,iBAAiB,EACjB,mBAAmB,EACnB,uBAAuB,EACvB,SAAS,EACT,QAAQ,EACR,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,GAAG,aAAa,GAAG,SAAS,CAChE,CAAC;AACH,SAAA;AACH,KAAC,EACD;QACE,YAAY;QACZ,YAAY;QACZ,aAAa;QACb,iBAAiB;QACjB,mBAAmB;QACnB,SAAS;QACT,QAAQ;QACR,aAAa;AACd,KAAA,CACF,CAAC;;AAGF,IAAA,MAAM,SAAS,GAAG,WAAW,CAC3B,CAAC,KAAoB,KAAI;;AAEvB,QAAA,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE;YACrB,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,OAAO;AACR,SAAA;QAED,IAAI,KAAK,CAAC,GAAG,KAAK,WAAW,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS,EAAE;AACxD,YAAA,IAAI,KAAK,CAAC,QAAQ,IAAI,cAAc,IAAI,WAAW,EAAE;gBACnD,IAAI,MAAM,GAAG,YAAY,CAAC;;gBAE1B,IAAI,CAAC,uBAAuB,CAAC,OAAO,IAAI,YAAY,CAAC,UAAU,CAAC,EAAE;AAChE,oBAAA,MAAM,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,UAAe,CAAC,CAAC,EAAE,CAAC;AAC3D,iBAAA;gBACD,MAAM,YAAY,GAAG,cAAc,CACjC,uBAAuB,CAAC,OAAO,IAAI,UAAU,EAC7C,KAAK,CAAC,GAAG,KAAK,WAAW,GAAG,KAAK,GAAG,IAAI,CACzC,CAAC;AACF,gBAAA,MAAM,SAAS,GAAG,YAAY,EAAE,CAAC;gBACjC,IAAI,SAAS,IAAI,IAAI,EAAE;;AAErB,oBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE;AACnC,wBAAA,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;;AAEpC,qBAAA;AAAM,yBAAA,IACL,uBAAuB,CAAC,OAAO,IAAI,IAAI;AACvC,wBAAA,uBAAuB,CAAC,OAAO,KAAK,SAAS,EAC7C;wBACA,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,uBAAuB,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;AAClF,qBAAA;AACD,oBAAA,uBAAuB,CAAC,OAAO,GAAG,SAAS,CAAC;;oBAE5C,WAAW,CAAC,SAAS,CAAC,CAAC;AACxB,iBAAA;AACD,gBAAA,IAAI,YAAY,IAAI,MAAM,IAAI,QAAQ,EAAE;AACtC,oBAAA,QAAQ,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;AACnD,iBAAA;AACF,aAAA;AAAM,iBAAA;;AAEL,gBAAA,uBAAuB,CAAC,OAAO,GAAG,SAAS,CAAC;AAC7C,aAAA;AACF,SAAA;AACH,KAAC,EACD,CAAC,YAAY,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,CAAC,CACvF,CAAC;IAEF,MAAM,cAAc,GAClB,aAAa,KAAK,MAAM,IAAI,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;IACtF,OAAO,EAAE,cAAc,EAAE,CAAC;AAC5B;;AC9PA;;;;;;AAMG;;;;;;;"}