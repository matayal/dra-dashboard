/* @oracle/oraclejet-preact: 14.1.0 */
import { _ as __rest } from './tslib.es6-821b2d99.js';
import { jsx } from 'preact/jsx-runtime';
import { usePress } from './hooks/UNSAFE_usePress.js';
import { useHover } from './hooks/UNSAFE_useHover.js';
import { useActive } from './hooks/UNSAFE_useActive.js';
import { classNames } from './utils/UNSAFE_classNames.js';
import { forwardRef } from 'preact/compat';
import "./UNSAFE_BaseButton.css";
import { dimensionInterpolations } from './utils/UNSAFE_interpolations/dimensions.js';
import { mergeInterpolations } from './utils/UNSAFE_mergeInterpolations.js';
import { getClientHints } from './utils/PRIVATE_clientHints.js';
import { useTabbableMode } from './hooks/UNSAFE_useTabbableMode.js';
import { mergeProps } from './utils/UNSAFE_mergeProps.js';
import 'preact/hooks';
import './hooks/UNSAFE_useToggle.js';
import './utils/UNSAFE_arrayUtils.js';
import './utils/UNSAFE_size.js';
import './_curry1-ab762f3c.js';
import './_curry3-77af75f1.js';
import './_curry2-9cf34233.js';
import './_has-e54ed87c.js';
import 'preact';

const NullFunction = () => null;

const activeStyles = {
  backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-bg-color-active)',
  borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-active)',
  color: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-color-active)'
};
const hoverStyles = {
  backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-bg-color-hover)',
  borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-hover)',
  color: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-color-hover)'
};
const compStyles = {
  base: "_1hs6wpf",
  hover: "ao30fh",
  active: "_9ugdfk",
  pseudohover: "_1y7lsgo",
  pseudohoverSpan: "_1ppl2q7",
  unstyled: "_34q0mk",
  min: "_152mtj0",
  fill: "_1qr7tjl",
  container: "_1jkbtzw",
  embedded: "_1tb7m71",
  noBorderRadiusStart: "_14570u8",
  noBorderRadiusEnd: "_16558mu",
  disabled: "cocc1t",
  bottom: "_6l0k3v"
};
const childrenStyles = "_1bp9nal";
const interpolations = [...Object.values(dimensionInterpolations)];
const styleInterpolations = mergeInterpolations(interpolations);
const clientHints = getClientHints(); // :active only works on IOS devices if a touch handler exists

const iosProps = clientHints.platform === 'ios' ? {
  ontouchstart: function () {}
} : {};
const isHybrid = getClientHints().hoverSupport === 'events';

const roleProps = (elType, hidden) => {
  switch (elType) {
    case 'link':
      return {
        role: 'link'
      };

    case 'button':
      return {};

    default:
      return hidden ? {
        role: 'generic'
      } : {
        role: 'button'
      };
  }
};

const BaseButton = forwardRef((_a, ref) => {
  var {
    variant = 'outlined',
    isDisabled = false,
    isRepeat = false,
    size = 'md',
    elementDetails = {
      type: 'button'
    },
    styling = ['default'],
    edge = 'none',
    accessibleLabel,
    ariaHidden,
    ariaExpanded,
    ariaRoledescription,
    'aria-describedby': ariaDescribedBy,
    onBlur,
    onFocus,
    onMouseEnter,
    onMouseLeave,
    onTouchEnd,
    onTouchStart
  } = _a,
      props = __rest(_a, ["variant", "isDisabled", "isRepeat", "size", "elementDetails", "styling", "edge", "accessibleLabel", "ariaHidden", "ariaExpanded", "ariaRoledescription", 'aria-describedby', "onBlur", "onFocus", "onMouseEnter", "onMouseLeave", "onTouchEnd", "onTouchStart"]);

  const {
    pressProps
  } = usePress(props.onAction ? props.onAction : NullFunction, {
    isDisabled,
    isRepeat
  });

  const isStyled = name => {
    return styling.indexOf(name) > -1;
  };

  const {
    hoverProps,
    isHover
  } = useHover({
    isDisabled: !isHybrid
  });
  const {
    activeProps,
    isActive
  } = useActive();

  const _b = styleInterpolations(props),
        {
    class: cls
  } = _b,
        styles = __rest(_b, ["class"]);

  const _c = Object.assign({}, elementDetails),
        {
    type: elementType = 'button'
  } = _c,
        elementProps = __rest(_c, ["type"]);

  const role = roleProps(elementType, ariaHidden !== null && ariaHidden !== void 0 ? ariaHidden : false);
  const tooltip = props.title || accessibleLabel;
  const ElementType = elementDetails.type;
  const isSpan = ElementType == 'span';
  const isBaseButton = ElementType == 'button';
  const {
    isTabbable
  } = useTabbableMode();
  const rootStyles = classNames([!isStyled('unstyled') && compStyles.base, isStyled('unstyled') && compStyles.unstyled, isStyled('embedded') && compStyles.embedded, isStyled('container') && compStyles.container, isStyled('noBorderRadiusStart') && compStyles.noBorderRadiusStart, isStyled('noBorderRadiusEnd') && compStyles.noBorderRadiusEnd, isStyled('active') && compStyles.active, isStyled('fill') && compStyles.fill, isStyled('min') && compStyles.min, `oj-c-base-button-${variant}`, `oj-c-base-button-${size}`, isDisabled && compStyles.disabled, edge === 'bottom' && compStyles.bottom, !isHybrid && !isSpan && !isActive && compStyles.pseudohover, !isHybrid && isSpan && !isActive && !isDisabled && !isStyled('container') && compStyles.pseudohoverSpan, isHybrid && isHover && !isActive && !isDisabled && !isStyled('container') && compStyles.hover, !isStyled('container') && isActive && !isDisabled && compStyles.active, childrenStyles]);
  const globalEventProps = {
    ariaDescribedBy,
    onBlur,
    onFocus,
    onMouseEnter,
    onMouseLeave,
    onTouchEnd,
    onTouchStart
  };
  const mergedProps = mergeProps(elementProps, pressProps, iosProps, hoverProps, isStyled('container') ? {} : activeProps, isBaseButton ? {} : {
    'aria-disabled': isDisabled
  }, globalEventProps);
  return jsx(ElementType // The ref casting was done to satisfy TS compiler, when the forwardRef had to be updated to ForwardedRef.
  , Object.assign({
    // The ref casting was done to satisfy TS compiler, when the forwardRef had to be updated to ForwardedRef.
    ref: ref,
    disabled: isDisabled,
    class: `${rootStyles} ${cls}`,
    style: styles,
    autofocus: props['autofocus'],
    title: tooltip,
    tabIndex: isDisabled || !isTabbable ? -1 : 0,
    "aria-label": accessibleLabel,
    "aria-hidden": ariaHidden,
    "aria-roledescription": ariaRoledescription,
    "aria-expanded": ariaExpanded
  }, mergedProps, role, {
    children: props.children
  }));
});

export { BaseButton };
/*  */
//# sourceMappingURL=UNSAFE_BaseButton.js.map
