{"version":3,"file":"UNSAFE_SelectMultiple.js","sources":["../../src/UNSAFE_SelectMultiple/SelectedValuesCount.tsx","../../src/UNSAFE_SelectMultiple/useDisplayValues.ts","../../src/UNSAFE_SelectMultiple/useSelectedOnlyData.ts","../../src/UNSAFE_SelectMultiple/useSelectMultiple.ts","../../src/UNSAFE_SelectMultiple/SelectMultiple.tsx","../../src/UNSAFE_SelectMultiple/index.ts"],"sourcesContent":["import { ComponentProps } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Chip } from '../UNSAFE_Chip';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\nconst rootStyles = cssProps`${{\n  display: 'inline-flex'\n}}`;\n\ntype PickedPropsFromChip = Pick<\n  ComponentProps<typeof Chip>,\n  'accessibleLabel' | 'isDisabled' | 'isSelected' | 'onToggle'\n>;\n\ntype Props = PickedPropsFromChip & {\n  count?: number;\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onMouseDown?: (event: MouseEvent) => void;\n};\n\n// This component renders a badge showing the number of selected values\nexport function SelectedValuesCount({\n  accessibleLabel,\n  count = 0,\n  onKeyDown,\n  onKeyUp,\n  onMouseDown,\n  ...passThroughProps\n}: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const instructions = translations.selectMultiple_showSelectedValues();\n  const accLabel = accessibleLabel ? `${accessibleLabel}. ` : '';\n\n  const ninetyNinePlus = translations.selectMultiple_countPlus({ COUNT: `99` });\n  // The Chip shows the number of values selected or 99+ if the number is over 99.\n  const chipCount = count > 99 ? `${ninetyNinePlus}` : `${count}`;\n  // The screenreader will hear what the number of selected values is along with instructions\n  // like Click to see the full list.\n  const valuesSelectedText = translations.selectMultiple_valuesSelected({\n    VALUE_COUNT: `${count}`\n  });\n  const label = `${accLabel}${valuesSelectedText} ${instructions}`;\n  return (\n    <div class={rootStyles} onKeyDown={onKeyDown} onKeyUp={onKeyUp} onMouseDown={onMouseDown}>\n      <Chip accessibleLabel={label} {...passThroughProps}>\n        {chipCount}\n      </Chip>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { renderItemText } from '../PRIVATE_SelectCommon';\n\nexport function useDisplayValues<K, D>(\n  itemText: ItemTextType<K, D>,\n  valueItems?: Item<K, D>[]\n): string {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const separator = translations.plural_separator();\n\n  // create the text displayed in the field from the selected values\n  const concatenatedDisplayValues = useMemo(() => {\n    if (valueItems === undefined) {\n      return '';\n    }\n    const displayValues = _createDisplayValues(itemText, valueItems);\n    const concatDisplayValues = _concatDisplayValues(displayValues, separator);\n    return concatDisplayValues;\n  }, [valueItems, itemText]);\n\n  return concatenatedDisplayValues;\n}\n\nfunction _concatDisplayValues(displayValues: Set<string>, separator: string) {\n  return Array.from(displayValues.values()).join(separator);\n}\n\nfunction _createDisplayValues<K, D>(itemText: ItemTextType<K, D>, selectedItems?: Item<K, D>[]) {\n  const arValues = selectedItems ? [...selectedItems?.values()] : [];\n  const mapFunc = (itemContext: Item<K, D>) => renderItemText(itemContext, itemText);\n  const mappedArray = arValues.map(mapFunc);\n  return new Set<string>(mappedArray as string[]);\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useMemo } from 'preact/hooks';\nimport { DataState } from 'src/UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\n\ntype Props<K, D> = {\n  isDropdownSelectedOnlyView?: boolean;\n  valueItems?: Item<K, D>[];\n};\n\n/**\n * Get the data to show in the dropdown for the selected-only view.\n * @param isDropdownSelectedOnlyView Whether the component is showing only selected\n * values in the dropdown: true if so, false if not.\n * @param valueItems The keys, data, and optional metadata for the selected values.\n * @returns An object with data and onLoadRange properties that can be passed on to the\n * list in the dropdown.\n */\nexport function useSelectedOnlyData<K, D>({ isDropdownSelectedOnlyView, valueItems }: Props<K, D>) {\n  // Need to specify type of useMemo here so the return statement below doesn't show a type error\n  // related to the sizePrecision prop on DataState:\n  //   Type 'string' is not assignable to type '\"exact\" | \"atLeast\"'.\n  // Note that useMemo here only depends on isDropdownSelectedOnlyView because we only want to\n  // recalculate when that value changes.  While the selected only view is shown, we want the\n  // data set to remain static with the set of valueItems as of the time the view was changed to\n  // only show selected items so that the user can deselect and reselect items.\n  // If useMemo depended on the valueItems too, then the data set would change as the user\n  // deselected items, which means those items would disappear from the dropdown and the user\n  // could not reselect them.\n  const selectedOnlyViewDataState = useMemo<DataState<K, D> | undefined>(() => {\n    return !isDropdownSelectedOnlyView || !valueItems || valueItems.length === 0\n      ? undefined\n      : {\n          offset: 0,\n          totalSize: valueItems?.length ?? 0,\n          sizePrecision: 'exact',\n          data: valueItems.map((valueItem: Item<K, D>) => {\n            return { data: valueItem.data, metadata: valueItem.metadata ?? { key: valueItem.key } };\n          })\n        };\n  }, [isDropdownSelectedOnlyView]);\n\n  return {\n    data: selectedOnlyViewDataState,\n    onLoadRange: undefined\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps } from 'preact';\nimport { MutableRef, useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { DataState, SelectionDetail } from '../UNSAFE_Collection';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { isControlOrFunctionKey, KEYS, useSelectCommon } from '../PRIVATE_SelectCommon';\nimport { SelectMultiple } from './SelectMultiple';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { useSelectedOnlyData } from './useSelectedOnlyData';\n\ntype PickedPropsFromSelectMultiple = Pick<\n  ComponentProps<typeof SelectMultiple>,\n  'isDisabled' | 'isReadonly' | 'onFilter' | 'onLoadRange'\n>;\ntype UseSelectMultipleProps<K, D> = PickedPropsFromSelectMultiple & {\n  data?: DataState<K, D> | null;\n  inputRef: MutableRef<HTMLInputElement>;\n  isFocused?: boolean;\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  valueItems?: Item<K, D>[];\n};\n\ntype SelectedValuesCountToggleType = ComponentProps<typeof SelectedValuesCount>['onToggle'];\ntype SelectedValuesCountToggleDetailType = Parameters<\n  Exclude<SelectedValuesCountToggleType, undefined>\n>[0];\n\n/**\n * Hook that manages SelectMultiple state and behavior.  This hook creates state variables and\n * event listeners, returning properties to apply to components internally rendered by\n * SelectMultiple, as well as state information.\n *\n * @param data Specifies data for the dropdown list.\n * @param inputRef Ref to the input element.\n * @param isDisabled Specifies whether the component is disabled.\n * @param isFocused Specifies whether the component has focus.\n * @param isReadonly Specifies whether the component is readonly.\n * @param onCommit Callback invoked when the selected values are committed.\n * @param onFilter Callback function to trigger loading data for the dropdown list,\n * which may or may not be filtered by user entered text.\n * @param onLoadRange Callback function to handle when the viewport of the dropdown list has\n * changed, including the case where the user scrolls to the end of the list and there are more\n * items to load.  The function should set a new DataState on the component for the specified\n * range.\n * @param valueItems Specifies the keys, data, and optional metadata for the selected values.\n *\n * @returns Properties to apply to internal components that SelectMultiple renders, and component\n * state.\n */\nexport function useSelectMultiple<K, D>({\n  data: propData,\n  inputRef,\n  isDisabled,\n  isFocused: propIsFocused,\n  isReadonly,\n  onCommit,\n  onFilter,\n  onLoadRange: propOnLoadRange,\n  valueItems\n}: UseSelectMultipleProps<K, D>) {\n  const [isDropdownSelectedOnlyView, setDropdownSelectedOnlyView] = useState(false);\n\n  const selectedValuesCount = valueItems?.length;\n  const hasSelectedValuesCount =\n    (selectedValuesCount !== undefined && selectedValuesCount > 0) || isDropdownSelectedOnlyView;\n\n  // show only the selected values in the dropdown if isDropdownSelectedOnlyView is true,\n  // otherwise show the full data set\n  // TODO: We may need to revisit this for hierarchical data because the selected valueItems\n  // won't have any information about ancestor group nodes, and we should probably show selected\n  // items in context within the hierarchy.  Also, the order of the items in the selected-only\n  // view right now follows the order in which they were selected, not the order in which they\n  // would appear in the full data set.  This may be more of a problem for hierarchical data\n  // if items have to appear within the correct group ancestors.  We may need to move\n  // construction of the selected-only DataState out of the component to the consuming code,\n  // and take a callback that we can call as a notification that the app should provide this\n  // special DataState to us (kind of like onLoadRange).  Note that we may also need an\n  // enhancement on the DataProvider API to be able to specify a filterCriterion to filter by\n  // the selected keys through a fetchFirst call, because a regular fetchByKeys call would\n  // still return results in the order in which the keys were specified and would not return\n  // data for the ancestor group nodes.\n  const selectedOnlyDataProps = useSelectedOnlyData<K, D>({\n    isDropdownSelectedOnlyView,\n    valueItems\n  });\n  const data = isDropdownSelectedOnlyView ? selectedOnlyDataProps.data : propData;\n  const onLoadRange = isDropdownSelectedOnlyView\n    ? selectedOnlyDataProps.onLoadRange\n    : propOnLoadRange;\n\n  const {\n    currentRow,\n    dropdownRef,\n    handleDropdownArrowClick,\n    handleDropdownAutoDismiss: baseHandleDropdownAutoDismiss,\n    handleDropdownPosition,\n    handleInput,\n    handleMainFieldKeyDown: baseHandleMainFieldKeyDown,\n    handleMainFieldKeyUp,\n    handleUpDownArrowKeys,\n    isDropdownAbove,\n    isDropdownOpen,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    onCurrentKeyChange,\n    onMouseDown,\n    searchText,\n    selectedKeys,\n    setCurrentRow,\n    setDropdownOpen,\n    setSelectedKeys,\n    userInput\n  } = useSelectCommon<K, D>({\n    data,\n    inputRef,\n    isFocused: propIsFocused,\n    onFilter\n  });\n\n  const removeDropdown = useCallback(() => {\n    dropdownRef.current?.parentElement?.removeChild(dropdownRef.current);\n  }, []);\n\n  const myHandleDropdownAutoDismiss = useCallback(\n    (event?: Event) => {\n      if (isDropdownOpen) {\n        if (event?.type === 'keydown') {\n          const keyboardEvent = event as KeyboardEvent;\n          switch (keyboardEvent.code) {\n            case KEYS.TAB:\n              // Put focus on an element in the main field, but don't kill the event, so that\n              // the browser can naturally transfer focus to the next focusable item relative\n              // to the element in the main field.\n              if (keyboardEvent.shiftKey || !hasSelectedValuesCount) {\n                inputRef.current?.focus();\n              } else {\n                chipRef.current?.focus();\n              }\n\n              // Remove the dropdown immediately, without waiting for a rerender based on changing\n              // state, so that the open dropdown cannot get focus when the browser handles the\n              // Tab key.\n              removeDropdown();\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    [hasSelectedValuesCount, isDropdownOpen]\n  );\n\n  const myHandleMainFieldKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      // const target = event.target as HTMLElement;\n      // ignore control key and function key\n      if (isControlOrFunctionKey(event)) {\n        return;\n      }\n\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && (event.shiftKey || (!hasSelectedValuesCount && !event.shiftKey))) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the selected values count chip\n          if (hasSelectedValuesCount && !event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        default:\n          break;\n      }\n    },\n    [hasSelectedValuesCount, isDropdownOpen]\n  );\n\n  // when the array of valueItems changes, pull out the new set of selectedKeys\n  useEffect(() => {\n    const keys = valueItems?.reduce((accumKeys, currentItem) => {\n      accumKeys.add(currentItem.key);\n      return accumKeys;\n    }, new Set<K>());\n    setSelectedKeys(keys);\n  }, [valueItems]);\n\n  const chipRef = useRef<HTMLElement | null>(null);\n  useEffect(() => {\n    chipRef.current =\n      hasSelectedValuesCount && mainFieldRef.current\n        ? mainFieldRef.current.querySelector('[role=\"switch\"]')\n        : null;\n  }, [hasSelectedValuesCount, isDisabled, isReadonly]);\n\n  const handleSelectedValuesCountKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.TAB:\n          if (isDropdownOpen && !event.shiftKey) {\n            // Remove the dropdown immediately, without waiting for a rerender based on changing\n            // state, so that the open dropdown cannot get focus when the browser handles the\n            // Tab key.\n            removeDropdown();\n\n            setDropdownOpen(false);\n          }\n\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to jump focus to the next cell and skip\n          // over the input\n          if (event.shiftKey) {\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.UP:\n        case KEYS.DOWN:\n          // prevent the page from scrolling\n          event.preventDefault();\n          break;\n\n        case KEYS.ESC:\n          if (isDropdownOpen) {\n            setDropdownOpen(false);\n\n            event.preventDefault();\n\n            // JET-53183 - core pack compat: stop propagation of handled events\n            // we don't want a parent collection component to stop editing the row when we close\n            // the dropdown\n            event.stopPropagation();\n          }\n          break;\n\n        case KEYS.ENTER:\n          // JET-53183 - core pack compat: stop propagation of handled events\n          // we don't want a parent collection component to move focus to the next row when\n          // we toggle between the full and selected only list in the dropdown\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [isDropdownOpen]\n  );\n\n  const handleSelectedValuesCountKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.code) {\n        case KEYS.UP:\n        case KEYS.DOWN:\n          handleUpDownArrowKeys(event);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleUpDownArrowKeys]\n  );\n\n  const handleSelectedValuesCountMouseDown = useCallback((event: MouseEvent) => {\n    // call preventDefault so that the dropdown doesn't open showing the full list on mousedown\n    // on the chip before switching to show only the selected values on mouseup when the click\n    // is handled\n    event.preventDefault();\n    // explicitly focus the input because it won't happen naturally due to preventDefault()\n    inputRef.current?.focus();\n  }, []);\n\n  const handleSelectedValuesCountToggle = useCallback(\n    (detail: SelectedValuesCountToggleDetailType) => {\n      if (!isDropdownOpen) {\n        setDropdownOpen(true);\n      }\n\n      const value = detail.value ?? false;\n      if (value !== isDropdownSelectedOnlyView) {\n        setDropdownSelectedOnlyView(value);\n      }\n    },\n    [isDropdownOpen, isDropdownSelectedOnlyView]\n  );\n\n  // when the dropdown closes, automatically turn off isDropdownSelectedOnlyView\n  useEffect(() => {\n    if (!isDropdownOpen && isDropdownSelectedOnlyView) {\n      setDropdownSelectedOnlyView(false);\n    }\n  }, [isDropdownOpen, isDropdownSelectedOnlyView]);\n\n  const onSelectionChange = useCallback(\n    (detail: SelectionDetail<K>) => {\n      const newKeys = new Set(detail.value.keys?.values());\n      // update the selectedKeys so that the selection visual state of the collection\n      // updates immediately while waiting for new valueItems to be set\n      setSelectedKeys(newKeys);\n      // call the onCommit callback so that the consuming code can update the valueItems\n      onCommit?.({ value: newKeys, previousValue: selectedKeys });\n    },\n    [onCommit, selectedKeys]\n  );\n\n  const dropdownEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onAutoDismiss: baseHandleDropdownAutoDismiss,\n        onPosition: handleDropdownPosition\n      },\n      { onAutoDismiss: myHandleDropdownAutoDismiss }\n    );\n  }, [baseHandleDropdownAutoDismiss, handleDropdownPosition, myHandleDropdownAutoDismiss]);\n\n  const inputEventHandlers = useMemo(() => {\n    return mergeProps(\n      {\n        onInput: handleInput,\n        onKeyDown: baseHandleMainFieldKeyDown,\n        onKeyUp: handleMainFieldKeyUp\n      },\n      { onKeyDown: myHandleMainFieldKeyDown }\n    );\n  }, [baseHandleMainFieldKeyDown, handleInput, handleMainFieldKeyUp, myHandleMainFieldKeyDown]);\n\n  useEffect(() => {\n    // clear the current item when the dropdown opens\n    if (isDropdownOpen) {\n      setCurrentRow({ rowKey: undefined });\n    }\n  }, [isDropdownOpen]);\n\n  return {\n    collectionProps: {\n      currentKey: currentRow.rowKey,\n      onCurrentKeyChange,\n      onSelectionChange,\n      selectedKeys\n    },\n    data,\n    dropdownArrowEventHandlers: {\n      onClick: handleDropdownArrowClick\n    },\n    dropdownEventHandlers,\n    dropdownRef,\n    hasSelectedValuesCount,\n    inputEventHandlers,\n    inputRef,\n    isDropdownAbove,\n    isDropdownOpen,\n    isDropdownSelectedOnlyView,\n    isFocused,\n    isUserFiltering,\n    mainFieldRef,\n    mouseProps: isDisabled || isReadonly ? {} : { onMouseDown },\n    onLoadRange,\n    searchText,\n    selectedValuesCountProps: {\n      onKeyDown: handleSelectedValuesCountKeyDown,\n      onKeyUp: handleSelectedValuesCountKeyUp,\n      onMouseDown: handleSelectedValuesCountMouseDown,\n      onToggle: handleSelectedValuesCountToggle\n    },\n    userInput\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { MutableRef } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useLoadingIndicatorTimer } from '../hooks/UNSAFE_useLoadingIndicatorTimer';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { DataState } from '../UNSAFE_Collection';\nimport { Flex } from '../UNSAFE_Flex';\nimport { Label } from '../UNSAFE_Label';\nimport { ListView } from '../UNSAFE_ListView';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport {\n  DefaultList,\n  Dropdown,\n  DropdownArrow,\n  DropdownList,\n  DropdownUserAssistance,\n  EmptyResults,\n  isBeforeDataFetch,\n  isMobile\n} from '../PRIVATE_SelectCommon';\nimport { ItemTextType } from '../utils/UNSAFE_selectUtils';\nimport { SelectedValuesCount } from './SelectedValuesCount';\nimport { useDisplayValues } from './useDisplayValues';\nimport { useSelectMultiple } from './useSelectMultiple';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props<K extends string | number, D extends Record<string, any>> = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  ariaDescribedBy?: TextFieldInputProps['ariaDescribedBy'];\n  /**\n   * Text to provide guidance to help the user understand what data to enter or select.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Specifies data for the dropdown list.\n   *\n   * Note that the <code>itemText</code> property allows for customizing the rendering\n   * of each data item.\n   */\n  data?: DataState<K, D> | null;\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is waiting for <code>valueItems</code> to load.\n   * While loading, SelectMultiple will show the progressive loading indicator in the text field.\n   */\n  isLoading?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * selected by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be selected by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has selected a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies how to get the text string to render for a data item.\n   * This property can be set to either:\n   * <ul>\n   * <li>a string that specifies the name of a top level data attribute to render as text, or</li>\n   * <li>a callback function that takes a properties object and returns the text string to\n   * display.</li>\n   * </ul>\n   *\n   * This text will be rendered for the selected <code>valueItems</code> of the component.\n   * It will also be rendered for each item in the dropdown.  When rendered for the\n   * dropdown items, default matching search term highlighting will still be applied.\n   */\n  itemText: ItemTextType<K, D>;\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user selects or enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline.  Layout will reflow when text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: InlineUserAssistanceProps['userAssistanceDensity'];\n  /**\n   * Specifies the keys, data, and optional metadata for the selected values.\n   */\n  valueItems?: Item<K, D>[];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  /**\n   * Callback invoked when the user commits the selected values.\n   *\n   * The function should set a new array as the <code>valueItems</code> property.\n   */\n  onCommit: (detail: ValueUpdateDetail<Set<K>>) => void;\n  /**\n   * Callback function to trigger loading data for the dropdown list, which may or may not be\n   * filtered by user entered search text.\n   *\n   * The function should set a new <code>DataState</code> as the <code>data</code> property.\n   */\n  onFilter?: ({ searchText }: { searchText?: string }) => void;\n  /**\n   * Callback function to handle when the viewport of the dropdown list has changed, for example\n   * by scrolling, including the case where the user scrolls to the end of the list and there are\n   * more items to load.\n   *\n   * The function should set a new <code>DataState</code> for the specified range as the\n   * <code>data</code> property.\n   */\n  onLoadRange?: ComponentProps<typeof ListView>['onLoadRange'];\n};\n\n/**\n * A SelectMultiple is a dropdown list that supports multiple selection and search filtering.\n */\nexport const SelectMultiple = forwardRef(\n  <K extends string | number, D extends Record<string, any>>(\n    {\n      ariaDescribedBy,\n      assistiveText,\n      data: propData,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isLoading: propIsLoading,\n      isReadonly: propIsReadonly,\n      isRequired,\n      isRequiredShown,\n      itemText,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      valueItems,\n      variant = 'default',\n      virtualKeyboard\n    }: Props<K, D>,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const {\n      enabledElementRef,\n      focusProps,\n      isFocused: origIsFocused,\n      readonlyElementRef\n    } = useFocusableTextField<HTMLInputElement, HTMLDivElement>({ isDisabled, isReadonly, ref });\n\n    const {\n      collectionProps,\n      data,\n      dropdownArrowEventHandlers,\n      dropdownEventHandlers,\n      dropdownRef,\n      hasSelectedValuesCount,\n      inputEventHandlers,\n      isDropdownAbove,\n      isDropdownOpen,\n      isDropdownSelectedOnlyView,\n      isFocused,\n      isUserFiltering,\n      mainFieldRef,\n      mouseProps,\n      onLoadRange,\n      searchText,\n      selectedValuesCountProps,\n      userInput\n    } = useSelectMultiple<K, D>({\n      data: propData,\n      inputRef: enabledElementRef as MutableRef<HTMLInputElement>,\n      isDisabled,\n      isFocused: origIsFocused,\n      isReadonly,\n      onCommit,\n      onFilter,\n      onLoadRange: propOnLoadRange,\n      valueItems\n    });\n\n    // The incoming propIsLoading tells us that we are in a loading state, but we don't want to\n    // show the loading indicator until after a delay, because showing it immediately could result\n    // in unwanted flashing.  The isLoading var below will be set to true by useLoadingIndicatorTimer\n    // after the delay, when the timer expires, at which point we should show the loading indicator.\n    // If propIsLoading is set to false before the timer expires, then the timer will be cancelled\n    // and no loading indicator will be shown.\n    // (ListView detects its loading state by checking data === null.  While it would be nice for\n    // us to be consistent and check valueItems === null, we need to use a separate isLoading prop.\n    // If valueItems === null triggers our loading state, then the selections in the dropdown\n    // are cleared for that period of time, which is undesirable.)\n    const isLoading = useLoadingIndicatorTimer(propIsLoading ?? false);\n\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      isDisabled,\n      isFocused,\n      isLoading,\n      isReadonly,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      value: valueItems !== undefined && valueItems.length > 0 ? true : undefined\n    });\n\n    const dropdownId = `${baseId}-dropdown`;\n\n    const displayValue = useDisplayValues(itemText, valueItems);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaDescribedBy={ariaDescribedBy}\n              ariaLabel={ariaLabel}\n              ariaLabelledBy={labelProps.id}\n              as=\"div\"\n              elementRef={readonlyElementRef}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n              textAlign={textAlign}\n              value={displayValue}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const isDataFetched = data !== undefined && data !== null && !isBeforeDataFetch<K, D>(data);\n    const hasInsideLabel = labelComp !== undefined && labelEdge === 'inside';\n    const liveRegionText =\n      isDropdownOpen && isDataFetched\n        ? data?.totalSize === 0\n          ? translations.select_noMatchesFound()\n          : data?.totalSize === 1\n          ? translations.select_oneMatchFound()\n          : data?.sizePrecision === 'exact'\n          ? translations.select_sizeMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n          : translations.select_sizeOrMoreMatchesFound({ TOTAL_SIZE: `${data?.totalSize}` })\n        : '';\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          ariaAutoComplete=\"list\"\n          ariaControls={dropdownId}\n          ariaExpanded={isDropdownOpen}\n          ariaLabel={ariaLabel}\n          autoComplete=\"off\"\n          hasInsideLabel={hasInsideLabel}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          // onCommit={handleCommit}\n          {...inputEventHandlers}\n          placeholder={placeholder}\n          role=\"combobox\"\n          spellcheck={false}\n          textAlign={textAlign}\n          type={isMobile() ? (virtualKeyboard === 'auto' ? 'search' : virtualKeyboard) : undefined}\n          value={isUserFiltering ? userInput : displayValue}\n          {...inputProps}\n        />\n        <LiveRegion>{liveRegionText}</LiveRegion>\n      </Fragment>\n    );\n\n    const dropdownArrow = (\n      <DropdownArrow\n        isDisabled={isDisabled}\n        size={hasInsideLabel ? 'md' : 'sm'}\n        {...dropdownArrowEventHandlers}\n      />\n    );\n    const selectedValuesCount = valueItems?.length;\n    const endContent = isLoading ? undefined : !hasSelectedValuesCount ? (\n      dropdownArrow\n    ) : (\n      <Flex align=\"center\" justify=\"center\" gap={[0, '1x']}>\n        <SelectedValuesCount\n          accessibleLabel={label}\n          count={selectedValuesCount}\n          isDisabled={isDisabled}\n          isSelected={isDropdownSelectedOnlyView}\n          {...selectedValuesCountProps}\n        />\n        {dropdownArrow}\n      </Flex>\n    );\n\n    const dropdownInlineUserAssistance =\n      isDropdownOpen &&\n      !isDropdownAbove &&\n      !isDisabled &&\n      !isReadonly &&\n      (assistiveText || helpSourceLink) &&\n      (userAssistanceDensity === 'efficient' || userAssistanceDensity === 'reflow') ? (\n        <DropdownUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          userAssistanceDensity={userAssistanceDensity}\n        />\n      ) : undefined;\n\n    const isEmptyResults = isDataFetched && data?.totalSize === 0;\n    const dropdownListContent = isEmptyResults ? (\n      <EmptyResults />\n    ) : (\n      <DefaultList<K, D>\n        {...collectionProps}\n        accessibleSummary={label ?? ''}\n        data={data}\n        itemText={itemText}\n        onLoadRange={onLoadRange}\n        searchText={\n          isDropdownSelectedOnlyView ? undefined : isUserFiltering ? searchText : undefined\n        }\n        selectionMode=\"multiple\"\n      />\n    );\n\n    return (\n      <Fragment>\n        <FormFieldContext.Provider value={formFieldContext}>\n          <TextField\n            endContent={endContent}\n            inlineUserAssistance={inlineUserAssistance}\n            mainContent={mainContent}\n            mainFieldRef={mainFieldRef}\n            onBlur={focusProps?.onfocusout}\n            onFocus={focusProps?.onfocusin}\n            {...textFieldProps}\n            {...fieldLabelProps}\n            {...mouseProps}></TextField>\n        </FormFieldContext.Provider>\n        <Dropdown\n          dropdownRef={dropdownRef}\n          id={dropdownId}\n          isOpen={\n            isDropdownOpen &&\n            data !== undefined &&\n            (data === null || data.totalSize > 0 || isBeforeDataFetch<K, D>(data) || isEmptyResults)\n          }\n          anchorRef={mainFieldRef}\n          {...dropdownEventHandlers}>\n          <DropdownList\n            hasBottomGap={dropdownInlineUserAssistance === undefined}\n            isLoading={data === null}>\n            {dropdownListContent}\n          </DropdownList>\n          {dropdownInlineUserAssistance}\n        </Dropdown>\n      </Fragment>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport { SelectMultiple } from './SelectMultiple';\n"],"names":["rootStyles","SelectedValuesCount","_a","accessibleLabel","count","onKeyDown","onKeyUp","onMouseDown","passThroughProps","__rest","translations","useTranslationBundle","instructions","selectMultiple_showSelectedValues","accLabel","ninetyNinePlus","selectMultiple_countPlus","COUNT","chipCount","valuesSelectedText","selectMultiple_valuesSelected","_jsx","Object","assign","class","children","Chip","label","_jsxs"],"mappings":"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"}