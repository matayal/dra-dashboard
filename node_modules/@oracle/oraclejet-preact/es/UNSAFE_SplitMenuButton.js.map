{"version":3,"file":"UNSAFE_SplitMenuButton.js","sources":["../../src/UNSAFE_SplitMenuButton/SplitMenuButton.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ButtonLayout } from '../UNSAFE_Button';\nimport { NavDownIcon } from '../UNSAFE_ThemedIcons';\nimport { Menu } from '../UNSAFE_Menu';\n\nimport { BaseButton, StylingOptions } from '../UNSAFE_BaseButton';\n\nimport { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\n\nimport { ComponentChildren } from 'preact';\nimport { forwardRef, ForwardedRef } from 'preact/compat';\nimport { useCallback, useState, useRef, useImperativeHandle } from 'preact/hooks';\n\ntype IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLElement>, 'title'>;\n\ntype WidthInterpolationProps = Pick<DimensionProps, 'width'>;\n\nexport type Props = IntrinsicProps &\n  WidthInterpolationProps & {\n    /**\n     * children - One or more MenuItems\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * The label rendered on the action side of the button.  Used\n     * to identify which child MenuItem action is invoked.\n     */\n    label?: string;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     \n     */\n    variant?: 'outlined' | 'solid' | 'callToAction';\n\n    /**\n     * The size indicates how large the button is rendered: \"sm\", \"md\" (default), \"lg\".\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void;\n  };\n\nexport const compStyles = {\n  divider: cssProps`${{\n    borderTopWidth: '0px',\n    borderBottomWidth: '0px',\n    borderRightWidth: '0px',\n    borderLeftWidth: '1px',\n    borderStyle: 'solid',\n    height: '100%',\n    display: 'inline-flex',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color)'\n  }}`,\n\n  disabledDivider: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-disabled)'\n  }}`,\n\n  icon: cssProps`${{\n    display: 'contents'\n  }}`,\n\n  root: cssProps`${{\n    display: 'inline-block'\n  }}`,\n\n  childrenMargins: cssProps`${{\n    /* @ts-ignore */\n    '& > *': {\n      marginTop: '0 !important',\n      marginBottom: '0 !important',\n      marginLeft: '0 !important',\n      marginRight: '0 !important'\n    }\n  }}`\n};\n\nconst menuButtonStyling = ['embedded', 'min', 'noBorderRadiusStart'] as StylingOptions[];\nconst menuButtonActiveStyling = [...menuButtonStyling, 'active'] as StylingOptions[];\n\nconst actionbuttonStyling = ['embedded', 'fill', 'noBorderRadiusEnd'] as StylingOptions[];\nconst actionButtonActiveStyling = [...actionbuttonStyling, 'active'] as StylingOptions[];\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\n\nconst styleInterpolations = mergeInterpolations<DimensionProps>(interpolations);\n\n/**\n * A SplitMenuButton is a combined action and menu button.\n */\nexport const SplitMenuButton = forwardRef(\n  (\n    {\n      children,\n      label = '',\n      variant = 'outlined',\n      isDisabled = false,\n      size = 'md',\n      onAction,\n      ...props\n    }: Props,\n    ref?: ForwardedRef<HTMLSpanElement>\n  ) => {\n    const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false);\n    const [isActive, setIsActive] = useState<boolean>(false);\n    const { class: cls, ...styles } = styleInterpolations(props);\n\n    // SPACE or ENTER on root area invokes action, as does CLICK/TAP on LEFT SIDE ACTION AREA\n    // DOWN ARROW invokes menu, as does CLICK/TAP on RIGHT SIDE MENU AREA\n    const onKeyDown = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === ' ' || event.key === 'Enter') {\n          setIsActive(true);\n        } else if (event.key == 'ArrowDown') {\n          !isDisabled && setIsMenuOpen((menuOpen: boolean) => !menuOpen);\n          // Prevent page scroll for down arrow, user definitely wanted to show menu in this case.\n          // Don't prevent other keypress defaults, as user may want to hold SPACE down to scroll page.\n          event.preventDefault();\n        }\n      },\n      [isDisabled, setIsMenuOpen, setIsActive]\n    );\n\n    const onKeyUp = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === ' ' || event.key === 'Enter') {\n          !isDisabled && onAction && onAction();\n          setIsActive(false);\n        }\n      },\n      [isDisabled, onAction, setIsActive]\n    );\n\n    const onBlur = useCallback(() => {\n      setIsActive(false);\n    }, [setIsActive]);\n\n    const _ref = useRef<HTMLSpanElement>(null);\n    useImperativeHandle(ref!, () => _ref.current!, [_ref]);\n\n    const menuHandler = () => {\n      setIsMenuOpen(!isMenuOpen);\n    };\n\n    const handleClose = (e: any) => {\n      //Focus has to be set on the launcher when menu is dismissed or\n      //item is \"selected\"\n      if (e.reason === 'dismissed' || e.reason === 'itemAction') {\n        _ref.current?.focus();\n      }\n      setIsMenuOpen(false);\n    };\n\n    const dividerStyles = classNames([\n      compStyles.divider,\n      isDisabled && compStyles.disabledDivider\n    ]);\n\n    const rootStyles = classNames([compStyles.root]);\n\n    // Using Span for top button allows us to avoid :hover state rendering by\n    // taking advantage of :enabled not on spans\n    const rootButton = () => {\n      return (\n        <BaseButton\n          elementDetails={{ type: 'span' }}\n          ref={\n            _ref as ForwardedRef<HTMLButtonElement> &\n              ForwardedRef<HTMLAnchorElement> &\n              ForwardedRef<HTMLSpanElement>\n          }\n          isDisabled={isDisabled}\n          styling={['container', 'min']}\n          variant={variant}\n          size={size}\n          accessibleLabel={label}\n          ariaRoledescription=\"split menu button, press down arrow to invoke menu\"\n          ariaExpanded={isMenuOpen}>\n          <TabbableModeContext.Provider value={{ isTabbable: false }}>\n            <BaseButton\n              elementDetails={{ type: 'span' }}\n              variant={variant}\n              styling={getActionButtonStyling(isActive)}\n              size={size}\n              isDisabled={isDisabled}\n              ariaHidden={true}\n              onAction={onAction}>\n              {label}\n            </BaseButton>\n            <div class={`${dividerStyles}`} />\n            <BaseButton\n              elementDetails={{ type: 'span' }}\n              variant={variant}\n              styling={getMenuButtonStyling(isMenuOpen)}\n              size={size}\n              isDisabled={isDisabled}\n              ariaHidden={true}\n              onAction={menuHandler}>\n              <ButtonLayout\n                display=\"icons\"\n                startIcon={<NavDownIcon />}\n                size={size}\n                styling=\"embedded\"></ButtonLayout>\n            </BaseButton>\n          </TabbableModeContext.Provider>\n        </BaseButton>\n      );\n    };\n\n    if (isDisabled) {\n      return (\n        <span role=\"toolbar\" class={`${rootStyles} ${cls}`} style={styles}>\n          {rootButton()}\n        </span>\n      );\n    } else {\n      return (\n        <span\n          role=\"toolbar\"\n          class={`${rootStyles} ${cls}`}\n          style={styles}\n          onKeyDown={!isDisabled && onKeyDown}\n          onKeyUp={onKeyUp}\n          onBlur={onBlur}>\n          {rootButton()}\n          <Menu anchorRef={_ref} isOpen={isMenuOpen} onClose={handleClose}>\n            <span className={compStyles.childrenMargins}>{children}</span>\n          </Menu>\n        </span>\n      );\n    }\n  }\n);\n\nfunction getMenuButtonStyling(isActive: boolean) {\n  return isActive ? menuButtonActiveStyling : menuButtonStyling;\n}\n\nfunction getActionButtonStyling(isActive: boolean) {\n  return isActive ? actionButtonActiveStyling : actionbuttonStyling;\n}\n"],"names":["compStyles","menuButtonStyling","menuButtonActiveStyling","actionbuttonStyling","actionButtonActiveStyling","interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","SplitMenuButton","forwardRef","_a","ref","_b","props","class","cls","styles","__rest","onKeyDown","useCallback","event","key","isDisabled","setIsMenuOpen","menuOpen","onKeyUp","onAction","onBlur","setIsActive","_ref","useRef","useImperativeHandle","current","isMenuOpen","handleClose","e","focus","divider","_jsx","BaseButton","assign","elementDetails","type","styling","variant","size","accessibleLabel","label","ariaRoledescription","ariaExpanded","children","_jsxs","TabbableModeContext","Provider","value","isTabbable","getActionButtonStyling","isActive","ariaHidden","dividerStyles","getMenuButtonStyling","menuHandler","ButtonLayout","display","startIcon","NavDownIcon","role","rootStyles","style","rootButton","Menu","anchorRef","isOpen","onClose","className","childrenMargins"],"mappings":"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"}