/* @oracle/oraclejet-preact: 14.1.0 */
import { jsxs, jsx } from 'preact/jsx-runtime';
import { BaseButton } from './UNSAFE_BaseButton.js';
import { _ as __rest } from './tslib.es6-821b2d99.js';
import "./UNSAFE_Button.css";
import { classNames } from './utils/UNSAFE_classNames.js';
import { forwardRef } from 'preact/compat';
import './hooks/UNSAFE_usePress.js';
import 'preact/hooks';
import './hooks/UNSAFE_useHover.js';
import './hooks/UNSAFE_useToggle.js';
import './hooks/UNSAFE_useActive.js';
import './utils/UNSAFE_interpolations/dimensions.js';
import './utils/UNSAFE_arrayUtils.js';
import './utils/UNSAFE_size.js';
import './_curry1-ab762f3c.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './_curry3-77af75f1.js';
import './_curry2-9cf34233.js';
import './_has-e54ed87c.js';
import './utils/PRIVATE_clientHints.js';
import './hooks/UNSAFE_useTabbableMode.js';
import 'preact';
import './utils/UNSAFE_mergeProps.js';

const compStyles = {
  text: "_5n6nd8",
  icon: "_72uy5s",
  startText: "_1onmwj2",
  endText: "_1rgjvlt",
  startIcon: "_1tlz7y2",
  endIcon: "_1564fw6",
  label: "_1cyejrm"
};

const isNullOrUndefined = value => {
  return value === null || value === undefined;
};

function ButtonLayout(_a) {
  var {
    size = 'md',
    display = 'all',
    styling = 'default'
  } = _a,
      props = __rest(_a, ["size", "display", "styling"]);

  const showIcons = display === 'all' || display === 'icons';
  const showText = display === 'all' || display === 'label';
  const labelClass = compStyles.label;
  const isOnlyIcon = props.startIcon && (display === 'icons' || !props.children) && !props.endIcon;
  const isEmbedded = styling === 'embedded';
  const textStartIcon = !isNullOrUndefined(props.startIcon) && display === 'all';
  const textEndIcon = !isNullOrUndefined(props.endIcon) && display === 'all';
  const isTwoIcons = props.startIcon && props.endIcon;
  const endIconClass = `${compStyles.icon} oj-c-button-layout-${size} ${compStyles.endIcon}`;
  const startIconStyles = classNames([compStyles.icon, isEmbedded ? `oj-c-button-layout-embedded-${size}` : `oj-c-button-layout-${size}`, !isOnlyIcon && compStyles.startIcon]);
  const textStyles = classNames([compStyles.text, textStartIcon && !isTwoIcons && compStyles.endText, textEndIcon && !isTwoIcons && compStyles.startText]);
  return jsxs("span", Object.assign({
    class: labelClass
  }, {
    children: [showIcons && props.startIcon && jsx("span", Object.assign({
      class: startIconStyles
    }, {
      children: props.startIcon
    })), showText && props.children && jsxs("span", Object.assign({
      class: textStyles
    }, {
      children: [" ", props.children, " "]
    })), showIcons && props.endIcon && jsx("span", Object.assign({
      class: endIconClass
    }, {
      children: props.endIcon
    }))]
  }));
}

const Button = forwardRef(({ variant = 'outlined', isDisabled = false, isRepeat = false, size = 'md', display = 'all', endIcon, startIcon, autofocus, edge, onAction, label = '', accessibleLabel, title, 'aria-describedby': ariaDescribedBy, width, onBlur, onFocus, onMouseEnter, onMouseLeave, onTouchEnd, onTouchStart }, ref) => {
    const labelOnly = (!startIcon && !endIcon) || display === 'label';
    const content = labelOnly ? (label) : (jsx(ButtonLayout, Object.assign({ display: display, startIcon: startIcon, endIcon: endIcon, size: size }, { children: label })));
    return (jsx(BaseButton, Object.assign({ ref: ref, isDisabled: isDisabled, isRepeat: isRepeat, size: size, width: width, autofocus: autofocus, edge: edge, variant: variant, styling: [labelOnly ? 'default' : 'min'], onAction: onAction, accessibleLabel: accessibleLabel !== null && accessibleLabel !== void 0 ? accessibleLabel : (display === 'icons' ? label : undefined), title: title !== null && title !== void 0 ? title : (display === 'icons' ? accessibleLabel !== null && accessibleLabel !== void 0 ? accessibleLabel : label : undefined), "aria-label": display === 'icons' ? label : null, "aria-describedby": ariaDescribedBy, onBlur: onBlur, onFocus: onFocus, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onTouchEnd: onTouchEnd, onTouchStart: onTouchStart }, { children: content })));
});

export { Button, ButtonLayout };
/*  */
//# sourceMappingURL=UNSAFE_Button.js.map
