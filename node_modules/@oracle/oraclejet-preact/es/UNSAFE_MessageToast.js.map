{"version":3,"file":"UNSAFE_MessageToast.js","sources":["../../src/UNSAFE_MessageToast/MessageToast.tsx","../../src/UNSAFE_MessageToast/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { ComponentChildren, ComponentProps, RefObject } from 'preact';\nimport {\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState\n} from 'preact/hooks';\n\nimport { EnvironmentProvider } from '../UNSAFE_Environment';\nimport {\n  FocusableComponentHandle,\n  useMessageFocusManager\n} from '../hooks/PRIVATE_useMessagesFocusManager';\nimport { useBreakpointValues } from '../hooks/UNSAFE_useBreakpointValues';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { getRendererWithoutIndex, Message, MessagesManager } from '../PRIVATE_Message';\nimport { MessageLayer } from '../PRIVATE_MessageLayer';\nimport { BundleType } from '../resources/nls/bundle';\nimport { Flex } from '../UNSAFE_Flex';\nimport { FocusTrap } from '../UNSAFE_FocusTrap';\nimport { LiveRegion } from '../UNSAFE_LiveRegion';\nimport { stringLiteralArray } from '../utils/UNSAFE_arrayUtils';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { Item, ItemMetadata } from '../utils/UNSAFE_dataProvider';\nimport { Size } from '../utils/UNSAFE_size';\n\n// TODO: refactor types so we don't repeat them here and MessageLayer\n// https://jira.oraclecorp.com/jira/browse/JET-54212\nconst positions = stringLiteralArray([\n  'top',\n  'top-left',\n  'top-right',\n  'top-start',\n  'top-end',\n  'bottom',\n  'bottom-left',\n  'bottom-right',\n  'bottom-start',\n  'bottom-end'\n]);\n\ntype Position = typeof positions[number];\n\ntype Offset =\n  | number\n  | {\n      horizontal?: number;\n      vertical?: number;\n    };\n\n// TODO: Refactor Message Item types\n// https://jira.oraclecorp.com/jira/browse/JET-54215\n\n/**\n * An object representing a single message in MessageToast component.\n */\nexport type MessageToastItem = {\n  /**\n   * Defines whether or not to include the close icon for the message\n   *\n   * @default 'on'\n   */\n  closeAffordance?: 'on' | 'off';\n\n  /**\n   * Defines the detail text of the message\n   */\n  detail?: string;\n\n  /**\n   * Defines the severity of the message\n   *\n   * @default 'error'\n   */\n  severity?: 'none' | 'error' | 'warning' | 'confirmation' | 'info';\n\n  /**\n   * Defines the sound to be played when opening the message\n   *\n   * @default 'none'\n   */\n  sound?: 'default' | 'none' | string;\n\n  /**\n   * Defines the primary text of the message\n   */\n  summary?: string;\n\n  /**\n   * Defines the time after which the message is to be closed automatically\n   *\n   * on - default of 5s\n   * off - no auto timeout, manually dismissed\n   * number - seconds in milliseconds format\n   *\n   * @default 'off'\n   */\n  autoTimeout?: 'on' | 'off' | number;\n};\n\n/**\n * Structure of data item passed to the renderers\n */\nexport type MessageToastRendererDataItem<K, D> = {\n  /**\n   * The data for the current message\n   */\n  data: D;\n\n  /**\n   * The key for the current message\n   */\n  key: K;\n\n  /**\n   * The metadata for the current message\n   */\n  metadata?: ItemMetadata<K>;\n};\n\ntype Props<Key, Data> = {\n  /**\n   * Defines the fixed position where the notifications will to be placed on the screen.\n   * - top-start resolves to top-left in LTR (top-right in RTL)\n   * - top-end resolves to top-right in LTR (top-left in RTL)\n   * - bottom-start resolves to bottom-left in LTR (bottom-right in RTL)\n   * - bottom-end resolves to bottom-right in LTR (bottom-left in RTL)\n   *\n   * default bottom\n   */\n  position?: Position;\n\n  /**\n   * Defines an offset (in pixels) in the placement. Value can be supplied as a number or\n   * an object with horizontal and vertical values.\n   *\n   * default 0\n   */\n  offset?: Offset;\n\n  /**\n   * Data for the MessageToast component. This data is used for rendering each toast message.\n   * The key for each message will be configured using the key of the corresponding item. This way,\n   * the component will know whether a new message is being added or an existing message is being updated/removed\n   * when the new data comes in.\n   */\n  data: Item<Key, Data>[];\n\n  /**\n   * Triggered when a user tries to close a message through UI interaction. The application\n   * should listen to this event and remove the corresponding message item from the data\n   * which would then result in the message closed. If the application\n   * fails to remove the message item from the data, then no change will be done in the\n   * UI by the component and the message will stay in the UI opened.\n   */\n  onClose?: (item: Item<Key, Data>) => void;\n\n  /**\n   * Applications can use this property to provide the key of a renderer or a function that\n   * returns the key of a renderer to use for rendering the detail content.\n   *\n   * When a renderer key is provided as a value for this property, the corresponding renderer\n   * will be used for rendering the detail content for all the messages. If applications want\n   * to use a different renderer for different messages, they can provide a function that\n   * returns a renderer key instead.\n   *\n   * The provided function should accept an Item and return a key to a renderer for\n   * rendering the corresponding message's detail content. The value returned from this function\n   * should be a key to one of the renderers provided. If the returned value is not\n   * one of the keys of the provided renderers, the component will throw an Error.\n   *\n   * If the function returns undefined, the component then will perform default rendering\n   * of the detail content using the detail property of the corresponding message.\n   *\n   * If an application specifies both detail and a valid detailRendererKey, the detailRendererKey will\n   * take precedence and the corresponding renderer will be used for rendering the detail content.\n   */\n  detailRendererKey?: string | ((item: Item<Key, Data>) => string | undefined);\n\n  /**\n   * Applications can use this property to provide the key of a renderer or a function that\n   * returns the key of the renderer to use for rendering the start icon.\n   *\n   * When a renderer key is provided as a value for this property, the corresponding renderer\n   * will be used for rendering the start icon for all the messages. If applications want\n   * to use a different renderer for different messages, they can provide a function that\n   * returns a renderer key instead.\n   *\n   * The provided function should accept an Item and return a key to a renderer for\n   * rendering the corresponding message's start icon. The value returned from this function\n   * should be a key to one of the renderers provided. If the returned value is not\n   * one of the keys of the provided renderers, the component will throw an Error.\n   *\n   * If the function returns undefined, the component then will perform default rendering\n   * of the start icon using the severity property of the corresponding message.\n   *\n   * If an application specifies both severity and a valid iconRendererKey, the iconRendererKey will\n   * take precedence and the corresponding renderer will be used for rendering the start icon.\n   */\n  iconRendererKey?: string | ((item: Item<Key, Data>) => string | undefined);\n\n  /**\n   * A set of available renderers for rendering the message content. Which renderer is used\n   * for rendering which content will be decided by specific properties in the row data.\n   */\n  renderers?: Record<string, (data: MessageToastRendererDataItem<Key, Data>) => ComponentChildren>;\n};\n\nconst messageToastStyles = {\n  base: cssProps`${{\n    height: 'fit-content',\n    width: 'fit-content'\n  }}`\n} as const;\n\n/**\n * Animation states for toast messages\n * TODO: Get this from theme context provider\n */\nconst animationStates: ComponentProps<typeof MessagesManager>['animationStates'] = {\n  entering: (node) => ({\n    from: {\n      transform: `translate(0, ${node.offsetHeight}px)`,\n      opacity: 1\n    },\n    to: {\n      transform: 'translate(0, 0)',\n      opacity: 1\n    },\n    end: {\n      transform: 'unset',\n      opacity: 1\n    },\n    options: {\n      duration: 250\n    }\n  }),\n  exiting: {\n    from: {\n      opacity: 1\n    },\n    to: {\n      opacity: 0\n    },\n    end: {\n      opacity: 0\n    },\n    options: {\n      duration: 250\n    }\n  }\n};\nconst initialAnimationStyles = {\n  opacity: 0\n} as const;\n\nexport function MessageToast<K extends string | number, D extends MessageToastItem>({\n  data,\n  detailRendererKey,\n  iconRendererKey,\n  renderers,\n  onClose,\n  offset,\n  position\n}: Props<K, D>) {\n  const messagesRef = useRef(new Map<K, HTMLDivElement | null>());\n  const autoFocusRef = useRef<HTMLDivElement>(null) as RefObject<HTMLDivElement | null>;\n  const containerDivRef = useRef<HTMLDivElement>(null);\n  const focusHandleRef = useRef<FocusableComponentHandle>(null);\n  const [liveRegionText, setLiveRegionText] = useState<string>();\n  const [shouldRender, setShouldRender] = useState(data.length > 0);\n  const [shouldTrapFocus, setShouldTrapFocus] = useState(false);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n\n  // We need a ref that holds the current & previous data length, as the exiting\n  // node will always call handleNextFocus with previous data.\n  // As in TransitionGroup, when an item is removed from the data, a new vnode\n  // will not be created instead previous vnode will be used. So, the new handleNextFocus\n  // will not be called when the old vnode exits. Thus, we will be using a ref\n  // to always get the correct current data length.\n  const dataLengthRef = useRef(data.length);\n  const prevDataLengthRef = useRef(0);\n  // Update the data length ref\n  dataLengthRef.current = data.length;\n\n  // Update the focusHandleRef\n  useImperativeHandle(\n    focusHandleRef,\n    () => ({\n      focus: () => {\n        // Only trigger focus if the component is rendering messages\n        if (data.length) {\n          // set the autoFocus ref to the first message and enable the focus trap\n          // this will automatically focus the first message\n          autoFocusRef.current = messagesRef.current.get(data[0].key) ?? null;\n          setShouldTrapFocus(true);\n          return true;\n        }\n        return false;\n      },\n      contains: (element: Element) => {\n        // Only invoke method if the component is rendering messages\n        if (data.length && element) {\n          return containerDivRef.current?.contains(element) ?? false;\n        }\n        return false;\n      }\n    }),\n    [data]\n  );\n\n  // Register handlers for focus management\n  const { controller, handlers } = useMessageFocusManager(\n    focusHandleRef,\n    {\n      onFocus: useCallback(() => {\n        setLiveRegionText(translations.message_navigationFromMessagesRegion());\n      }, [translations]),\n      onFocusLeave: useCallback(() => {\n        // disable trap which should revert the focus back to the last focused item\n        setShouldTrapFocus(false);\n      }, [])\n    },\n    {\n      // we do not want the focus manager to handle Esc key as we handle it using the\n      // FocusTrap here\n      handleEscapeKey: false\n    }\n  );\n\n  /**\n   * Handles focus when a message is closed and animated away from the DOM\n   * @param key The key of the message\n   * @param index The index of the message\n   */\n  const handleNextFocus = useCallback(\n    (_key: K, index: number, closedMessageNode?: Element) => {\n      const isClosedMessageFocused = closedMessageNode?.contains(document.activeElement);\n\n      // If there are no messages, do not render anything. As the old messages\n      // are still in the DOM, use the data count to determine what to do next as it\n      // represents the next state.\n      if (dataLengthRef.current === 0) {\n        setShouldRender(false);\n        setShouldTrapFocus(false);\n        // If the current message holds focus, then restore previous focus\n        if (isClosedMessageFocused) {\n          // As we have FocusTrap, trying to restore focus now will simply result in focus being pulled\n          // back again. So, we restore the focus in the next tick so that the rendering will have been\n          // done in the microtask.\n          setImmediate(() => controller.restorePriorFocus());\n        }\n        return;\n      }\n\n      // In TransitionGroup, when an item is removed from the data, a new vnode\n      // will not be created instead previous vnode will be used. So, the new handleNextFocus\n      // will not be called when the old vnode exits. Thus, all the deps will not be pointing to\n      // the current references, rather they will be pointing to the ones where this vnode\n      // last existed in the data.\n      // This means, the data will contain the closing message as well. But, all the ref objects\n      // still point to the most up-to-date values. With that in mind, we will be evaluating the\n      // following values.\n      const renderedMessagesCount = data.length;\n\n      // Now that this message is closed, focus the next message that will take this index. If no\n      // message will take this message's index, then it means that this is the last message. If\n      // that is the case, focus the message at the previous index.\n      // Use the count of the messages that are currently shown in the UI (current state including\n      // the message that will be removed). This way we can get the correct item from the data\n      // as it will contain the closing message as well.\n      const nextMessageIndexToFocus = index + 1 < renderedMessagesCount ? index + 1 : index - 1;\n\n      // if next message is available then transfer the focus to the next element\n      if (nextMessageIndexToFocus > -1 && isClosedMessageFocused) {\n        const nextMessageKey = data[nextMessageIndexToFocus].key;\n        messagesRef.current.get(nextMessageKey)?.focus();\n      }\n    },\n    [controller, data]\n  );\n\n  // We will be using a function based ref to store the refs in the Map\n  const setHTMLDivElement = useCallback(\n    // TODO: use ramda.curry here (currently it is throwing ts error when used with generics)\n    (key: K) => {\n      return (ref: HTMLDivElement | null) => messagesRef.current.set(key, ref);\n    },\n    []\n  );\n  // Prioritize this component whenever the data changes and\n  // the new data has at least one message\n  useEffect(() => {\n    const previousDataLength = prevDataLengthRef.current;\n    prevDataLengthRef.current = data.length;\n\n    // if there are messages that need to be rendered now, then do the following deeds:\n    // 1. set the shouldRender flag\n    // 2. set the live region\n    // 3. prioritize this message component to be the latest\n    if (data.length) {\n      // set state to render content whenever the data is not empty\n      setShouldRender(true);\n      if (data.length > previousDataLength) {\n        // Only when having a new message, update the aria-live area with the\n        // text to indicate how to get the focus to the new message.\n        setLiveRegionText(translations.message_navigationToMessagesRegion());\n      }\n      controller.prioritize();\n      return;\n    }\n\n    // if there were messages and now removed, then set the live region to\n    // announce this information\n    if (previousDataLength) {\n      setLiveRegionText(translations.messageToast_allMessagesClosed());\n      return;\n    }\n\n    // When there are no messages, clear the live region so that\n    // the navigation text will be read when a new message appear\n    setLiveRegionText('');\n  }, [controller, data.length, translations]);\n\n  // determine responsive max-width\n  const maxWidth = useBreakpointValues<Size>({\n    sm: '--oj-c-PRIVATE-DO-NOT-USE-message-toast-max-width-sm',\n    md: '--oj-c-PRIVATE-DO-NOT-USE-message-toast-max-width-md',\n    lg: '--oj-c-PRIVATE-DO-NOT-USE-message-toast-max-width-lg'\n  });\n  // without offset, the messages will be hugging the vertical edges of the screen\n  // so we will set a default offset.vertical value (any offset from the props will be\n  // added to this).\n  const paddedOffset = useBreakpointValues<Offset>({\n    sm: {\n      horizontal: typeof offset === 'number' ? offset : offset?.horizontal ?? 0,\n      vertical: 16 + (typeof offset === 'number' ? offset : offset?.horizontal ?? 0)\n    },\n    lg: {\n      horizontal: typeof offset === 'number' ? offset : offset?.horizontal ?? 0,\n      vertical: 24 + (typeof offset === 'number' ? offset : offset?.horizontal ?? 0)\n    }\n  });\n\n  // TODO: move this to the individual components.\n  // Cannot do this as of now, as doing do results in oj-message-banner not working.\n  const messageTranslations = useMemo(\n    () => ({\n      close: translations.close(),\n      confirmation: translations.confirmation(),\n      error: translations.error(),\n      info: translations.info(),\n      warning: translations.warn()\n    }),\n    [translations]\n  );\n  const rootClasses = classNames([\n    messageToastStyles.base,\n    // by default the toast messages are dark, so add the required classes\n    'oj-c-colorscheme-dark',\n    'oj-color-invert'\n  ]);\n\n  // When both shouldRender flag is false and no data to render, do not render\n  // anything except the live region\n  if (!shouldRender && data.length === 0) {\n    return <LiveRegion>{liveRegionText}</LiveRegion>;\n  }\n\n  return (\n    <EnvironmentProvider environment={{ colorScheme: 'dark' }}>\n      <MessageLayer offset={paddedOffset} position={position}>\n        <div\n          class={rootClasses}\n          ref={containerDivRef}\n          tabIndex={-1} // Need to add tabindex to make the container receive the focus events\n          {...handlers}>\n          <FocusTrap autoFocusRef={autoFocusRef} isDisabled={!shouldTrapFocus}>\n            <Flex direction=\"column\" gap=\"1x\" align=\"center\" maxWidth={maxWidth}>\n              <MessagesManager\n                animationStates={animationStates}\n                initialAnimationStyles={initialAnimationStyles}\n                data={data}\n                onMessageWillRemove={handleNextFocus}>\n                {({ index, item }) => (\n                  <Message\n                    messageRef={setHTMLDivElement(item.key)}\n                    item={item}\n                    detailRenderer={getRendererWithoutIndex(item, detailRendererKey, renderers)}\n                    iconRenderer={getRendererWithoutIndex(item, iconRendererKey, renderers)}\n                    index={index}\n                    key={item.key}\n                    onClose={onClose}\n                    translations={messageTranslations}\n                    variant=\"toast\"\n                  />\n                )}\n              </MessagesManager>\n            </Flex>\n          </FocusTrap>\n        </div>\n      </MessageLayer>\n      <LiveRegion>{liveRegionText}</LiveRegion>\n    </EnvironmentProvider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport { MessageToast } from './MessageToast';\nexport type { MessageToastItem } from './MessageToast';\n"],"names":["positions","stringLiteralArray","messageToastStyles","animationStates","entering","node","from","transform","offsetHeight","opacity","to","end","options","duration","exiting","initialAnimationStyles","MessageToast","data","detailRendererKey","iconRendererKey","renderers","onClose","offset","position","autoFocusRef","useRef","containerDivRef","focusHandleRef","shouldRender","setShouldRender","useState","length","translations","useTranslationBundle","prevDataLengthRef","dataLengthRef","current","useImperativeHandle","_a","messagesRef","get","key","contains","element","_b","onFocus","useCallback","setLiveRegionText","message_navigationFromMessagesRegion","onFocusLeave","handleEscapeKey","isClosedMessageFocused","closedMessageNode","document","activeElement","renderedMessagesCount","nextMessageIndexToFocus","index","controller","ref","set","previousDataLength","message_navigationToMessagesRegion","messageToast_allMessagesClosed","sm","md","lg","messageTranslations","useMemo","close","confirmation","error","info","warning","warn","base","_jsx","LiveRegion","children","liveRegionText","_jsxs","EnvironmentProvider","Object","assign","environment","colorScheme","MessageLayer","paddedOffset","class","rootClasses","tabIndex","handlers","FocusTrap","isDisabled","shouldTrapFocus","Flex","direction","gap","align","maxWidth","MessagesManager","onMessageWillRemove","handleNextFocus","item","Message","messageRef","setHTMLDivElement","detailRenderer","getRendererWithoutIndex","iconRenderer","variant"],"mappings":"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"}