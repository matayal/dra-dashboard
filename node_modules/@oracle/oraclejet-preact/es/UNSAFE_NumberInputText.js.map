{"version":3,"file":"UNSAFE_NumberInputText.js","sources":["../../src/UNSAFE_NumberInputText/StepButton.tsx","../../src/UNSAFE_NumberInputText/Steppers.tsx","../../src/UNSAFE_NumberInputText/useSteppers.tsx","../../src/UNSAFE_NumberInputText/NumberInputText.tsx","../../src/UNSAFE_NumberInputText/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Button } from '../UNSAFE_Button';\nimport { BundleType } from '../resources/nls/bundle';\nimport { IcoChevronDown, IcoChevronUp } from '../UNSAFE_Icons';\nimport { StepDirection, StepEvent } from './useSteppers';\nimport { TabbableModeContext } from '../hooks/UNSAFE_useTabbableMode';\nimport { useCallback } from 'preact/hooks';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\n\ntype Props = {\n  /**\n   * The direction of the step.\n   */\n  direction: StepDirection;\n\n  /**\n   * Whether the button is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Called when a step request is made by clicking the button.\n   */\n  onStep?: (event: StepEvent) => void;\n\n  /**\n   * Variants representing different icons for the button.\n   */\n  variant: 'arrowup' | 'arrowdown';\n};\n\n/**\n * A StepButton is used to request a \"step up\" or \"step down\" to a value in NumberInputText.\n * @param direction The direction of the step\n * @param isDisabled Whether the button should be disabled\n * @param onStep Handler called when the button is clicked\n * @param variant Represents different visual variants for the button\n */\nexport function StepButton({ direction, isDisabled, onStep, variant }: Props) {\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  const labelIncrease = translations.inputNumber_increase();\n  const labelDecrease = translations.inputNumber_decrease();\n  const label = direction === 'increase' ? labelIncrease : labelDecrease;\n\n  const handleClick = useCallback(() => {\n    onStep?.({ direction });\n  }, [onStep, direction]);\n\n  const icon = variant === 'arrowup' ? <IcoChevronUp /> : <IcoChevronDown />;\n\n  return (\n    <TabbableModeContext.Provider value={{ isTabbable: false }}>\n      <Button\n        display=\"icons\"\n        isDisabled={isDisabled}\n        title={label}\n        onAction={handleClick}\n        startIcon={icon}\n        variant=\"borderless\"></Button>\n    </TabbableModeContext.Provider>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentChildren } from 'preact';\nimport { Grid } from '../UNSAFE_Grid';\n\nexport type Props = {\n  /**\n   *The children are StepButtons.\n   */\n  children: ComponentChildren;\n};\n\n// TODO: Replace Steppers with Buttonset when it becomes available\nexport function Steppers({ children }: Props) {\n  return (\n    <Grid align=\"center\" gap=\"1x\" gridTemplateColumns=\"1fr 1fr\">\n      {children}\n    </Grid>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Ref, useCallback, useEffect, useRef } from 'preact/hooks';\nimport { useToggle } from '../hooks/UNSAFE_useToggle';\nimport { StepButton } from './StepButton';\nimport { Steppers } from './Steppers';\n\nconst SPIN_DELAY = 500;\nconst SPIN_INTERVAL = 40;\n\nexport type StepDirection = 'increase' | 'decrease';\n\nexport type StepEvent = {\n  /**\n   * The direction of the requested step.\n   */\n  direction: StepDirection;\n};\n\ntype Props = {\n  /**\n   * Controls whether the step buttons are shown.\n   */\n  hasSteppers?: boolean;\n\n  /**\n   * A ref to the input element.\n   */\n  inputRef: Ref<HTMLInputElement>;\n\n  /**\n   * Controls whether the step down button is disabled.\n   */\n  isStepDownDisabled?: boolean;\n\n  /**\n   * Controls whether the step up button is disabled.\n   */\n  isStepUpDisabled?: boolean;\n\n  /**\n   * Called when a continuous step is requested (aka \"spin\")\n   * by holding down the arrow up or arrow down keys, or\n   * by pressing and holding down a step button.\n   */\n  onSpin?: (event: StepEvent) => void;\n\n  /**\n   * Called when spinning is complete and the user has\n   * released the arrow key or step button.\n   */\n  onSpinComplete?: () => void;\n\n  /**\n   * Called when a single step is requested by clicking a step button\n   * or by pressing the arrow up or arrow down keys.\n   */\n  onStep?: (event: StepEvent) => void;\n};\n\n/**\n * A hook for using stepping functionality with NumberInputText. Stepping can\n * be accomplished using the step up or down buttons or by pressing the arrow\n * up or arrow down keys. Holding down the buttons or keys produces continuous\n * step events.\n *\n * @param hasSteppers Controls whether the step buttons are shown\n * @param inputRef A ref to the input element\n * @param isStepDownDisabled Controls whether stepping down is disabled\n * @param isStepUpDisabled Controls whether stepping up is disabled\n * @param onSpin Called when a continuous step (aka spin) is requested\n * @param onSpinComplete Called when spinning is complete\n * @param onStep Called when a single step is requested\n * @returns A JSX element which can be placed in the endContent of NumberInputText.\n */\nexport const useSteppers = ({\n  hasSteppers,\n  inputRef,\n  isStepDownDisabled,\n  isStepUpDisabled,\n  onSpin,\n  onSpinComplete,\n  onStep\n}: Props) => {\n  const { bool: isStarted, setTrue: setStartedTrue, setFalse: setStartedFalse } = useToggle(false);\n  const {\n    bool: isSpinning,\n    setTrue: setSpinningTrue,\n    setFalse: setSpinningFalse\n  } = useToggle(false);\n  const startTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const spinTimerRef = useRef<ReturnType<typeof setInterval> | null>(null);\n  const directionRef = useRef<StepDirection>('increase');\n  const spinCompleteRef = useRef(false);\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!(event.key === 'ArrowDown' || event.key === 'ArrowUp')) {\n        return;\n      }\n      // By default, pressing the arrow keys moves the cursor to the\n      // beginning or end which we don't want, so call preventDefault.\n      // We also want to stop propagation of handled events.\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (isStarted) {\n        // If already started, ignore repeated key down events.\n        return;\n      }\n      if (\n        (event.key === 'ArrowDown' && isStepDownDisabled) ||\n        (event.key === 'ArrowUp' && isStepUpDisabled)\n      ) {\n        // If requested step is disabled, return.\n        return;\n      }\n      directionRef.current = event.key === 'ArrowDown' ? 'decrease' : 'increase';\n      setStartedTrue();\n      // Do an initial step, which is what oj-input-number did as well.\n      onStep?.({ direction: directionRef.current });\n    },\n    [isStarted, onStep, isStepDownDisabled, isStepUpDisabled, setStartedTrue]\n  );\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        if (isSpinning) {\n          // Only want to call onSpinComplete if we were actually spinning.\n          spinCompleteRef.current = true;\n        }\n        setStartedFalse();\n        setSpinningFalse();\n        event.stopPropagation();\n      }\n    },\n    [isSpinning, setStartedFalse, setSpinningFalse]\n  );\n\n  useEffect(() => {\n    if (isStarted && !startTimerRef.current) {\n      startTimerRef.current = setTimeout(() => {\n        setSpinningTrue();\n      }, SPIN_DELAY);\n    }\n    return () => {\n      // Clean up between renders.\n      if (startTimerRef.current) {\n        clearTimeout(startTimerRef.current);\n        startTimerRef.current = null;\n      }\n    };\n  }, [isStarted, setSpinningTrue]);\n\n  useEffect(() => {\n    if (!isSpinning) {\n      if (spinTimerRef.current) {\n        clearInterval(spinTimerRef.current);\n        spinTimerRef.current = null;\n      }\n    } else {\n      if (!spinTimerRef.current) {\n        spinTimerRef.current = setInterval(() => {\n          // If further spinning is disabled, call setSpinningFalse to\n          // clean up the timer otherwise repeat the step.\n          if (\n            (directionRef.current === 'increase' && isStepUpDisabled) ||\n            (directionRef.current === 'decrease' && isStepDownDisabled)\n          ) {\n            setSpinningFalse();\n            spinCompleteRef.current = true;\n          } else {\n            onSpin?.({ direction: directionRef.current });\n          }\n        }, SPIN_INTERVAL);\n      }\n    }\n    return () => {\n      // Clean up between renders.\n      if (spinTimerRef.current) {\n        clearInterval(spinTimerRef.current);\n        spinTimerRef.current = null;\n      }\n    };\n  }, [isSpinning, isStepDownDisabled, isStepUpDisabled, onSpin, setSpinningFalse]);\n\n  // Only want to run this effect when isSpinning is false and our ref is true.\n  // This helps guarantee onSpinComplete is only called once after spinning stops,\n  // even if onSpinComplete's identity is changing.\n  useEffect(() => {\n    if (!isSpinning && spinCompleteRef.current) {\n      spinCompleteRef.current = false;\n      onSpinComplete?.();\n    }\n  }, [isSpinning, onSpinComplete]);\n\n  const handleClick = useCallback(\n    (event: StepEvent) => {\n      // When a step button is clicked, set focus to the input.\n      inputRef.current?.focus();\n      onStep?.(event);\n    },\n    [onStep, inputRef]\n  );\n\n  const handleDisabledMouseDown = useCallback((event: Event) => {\n    // Using preventDefault prevents focus from moving to the body when a disabled stepper is clicked.\n    // FIXME: can we handle this use case more generally at the startContent/endContent level in TextFieldContent?\n    event.preventDefault();\n    event.stopPropagation();\n  }, []);\n\n  const steppers = hasSteppers ? (\n    <Steppers>\n      <div onMouseDown={(e) => isStepDownDisabled && handleDisabledMouseDown(e)} aria-hidden=\"true\">\n        <StepButton\n          direction=\"decrease\"\n          isDisabled={isStepDownDisabled}\n          onStep={handleClick}\n          variant=\"arrowdown\"\n        />\n      </div>\n\n      <div onMouseDown={(e) => isStepUpDisabled && handleDisabledMouseDown(e)} aria-hidden=\"true\">\n        <StepButton\n          direction=\"increase\"\n          isDisabled={isStepUpDisabled}\n          onStep={handleClick}\n          variant=\"arrowup\"\n        />\n      </div>\n    </Steppers>\n  ) : undefined;\n\n  // stepHandlerProps will be spread onto the parent to handle\n  // stepping functionality via the arrow up or down keys.\n  const stepHandlerProps = hasSteppers ? { onKeyDown, onKeyUp } : {};\n\n  return { steppers, stepHandlerProps };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { Label } from '../UNSAFE_Label';\nimport { usePrefixSuffix } from '../hooks/UNSAFE_usePrefixSuffix';\n\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { Size } from '../utils/UNSAFE_size';\nimport { StepEvent, useSteppers } from './useSteppers';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\n\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\n\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype NumberInputTextProps = {\n  /**\n   * Controls whether the step buttons are shown.\n   */\n  hasSteppers?: boolean;\n\n  /**\n   * Controls whether the step down button is disabled.\n   */\n  isStepDownDisabled?: boolean;\n\n  /**\n   * Controls whether the step up button is disabled.\n   */\n  isStepUpDisabled?: boolean;\n\n  /**\n   * Called when a continuous step is requested (aka \"spin\")\n   * by holding down the arrow up or arrow down keys, or\n   * by pressing and holding down a step button.\n   */\n  onSpin?: (event: StepEvent) => void;\n\n  /**\n   * Called when spinning is complete and the user has\n   * released the arrow key or step button.\n   */\n  onSpinComplete?: () => void;\n\n  /**\n   * Called when a step is requested by clicking a step button\n   * or by pressing the arrow up or arrow down keys.\n   */\n  onStep?: (event: StepEvent) => void;\n};\n\ntype Props = NumberInputTextProps & {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  ariaDescribedBy?: TextFieldInputProps['ariaDescribedBy'];\n\n  /**\n   * The maximum allowed value. Used for the aria-valuemax attribute.\n   */\n  ariaValueMax?: TextFieldInputProps['ariaValueMax'];\n\n  /**\n   * The minimum allowed value. Used for the aria-valuemin attribute.\n   */\n  ariaValueMin?: TextFieldInputProps['ariaValueMin'];\n\n  /**\n   * The number value of the component. Used for the aria-valuenow attribute.\n   */\n  ariaValueNow?: TextFieldInputProps['ariaValueNow'];\n\n  /**\n   * The formatted value of the component. Used for the aria-valueText\n   * attribute to provide a more human readable text alternative for\n   * ariaValueNow.\n   */\n  ariaValueText?: TextFieldInputProps['ariaValueText'];\n\n  /**\n   * Text to provide guidance to help the user understand what data to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component: it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user. Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>.\n   */\n  labelStartWidth?: Size;\n\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n\n  /**\n   * The prefix displays as regular text before the input text, and inline with it.\n   * The prefix is not editable or focusable.\n   */\n  prefix?: string;\n\n  /**\n   * The suffix displays as regular text after the input text, and inline with it.\n   * The suffix is not editable or focusable.\n   */\n  suffix?: string;\n\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n\n  /**\n   * Specifies the density of the user assistance presentation. It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: InlineUserAssistanceProps['userAssistanceDensity'];\n\n  /**\n   * The current possibly formatted display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n\n  /**\n   * The type of virtual keyboard to display for entering a value on mobile browsers.\n   * This property has no effect on desktop browsers.\n   */\n  virtualKeyboard?: 'auto' | 'number' | 'text';\n\n  /**\n   * Callback invoked when the user commits the entered value by either blurring or pressing Enter.\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\n\nexport const NumberInputText = forwardRef(\n  (\n    {\n      ariaDescribedBy,\n      ariaValueMax,\n      ariaValueMin,\n      ariaValueNow,\n      ariaValueText,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      isStepDownDisabled: propIsStepDownDisabled,\n      isStepUpDisabled: propIsStepUpDisabled,\n      hasSteppers = false,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      messages,\n      placeholder,\n      prefix,\n      suffix,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      virtualKeyboard,\n      onInput,\n      onCommit,\n      onSpin,\n      onSpinComplete,\n      onStep\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput, dispatch]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit, dispatch]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLDivElement\n    >({ isDisabled, isReadonly, ref });\n    const { hoverProps } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const {\n      baseId,\n      formFieldContext,\n      inputProps,\n      labelProps,\n      textFieldProps,\n      userAssistanceProps\n    } = useTextField({\n      ariaDescribedBy,\n      isDisabled,\n      isFocused,\n      isReadonly,\n      labelEdge,\n      messages,\n      styleVariant: variant,\n      value\n    });\n\n    // Disable the steppers if the number input is disabled.\n    const isStepDownDisabled = isDisabled || propIsStepDownDisabled;\n    const isStepUpDisabled = isDisabled || propIsStepUpDisabled;\n    // stepHandlerProps contains keyup and keydown handlers\n    // for stepping using the arrow up and down keys.\n    const { steppers, stepHandlerProps } = useSteppers({\n      hasSteppers,\n      inputRef: enabledElementRef,\n      isStepDownDisabled,\n      isStepUpDisabled,\n      onSpin,\n      onSpinComplete,\n      onStep\n    });\n\n    const {\n      renderedPrefix,\n      renderedSuffix,\n      text: valuePrefixSuffix,\n      ariaLabelledBy\n    } = usePrefixSuffix({\n      baseId,\n      hasEndContent: steppers !== undefined,\n      hasInsideLabel: label !== undefined && labelEdge === 'inside',\n      hasStartContent: false,\n      hasValue: formFieldContext.hasValue,\n      isDisabled,\n      isFocused,\n      labelId: labelProps.id,\n      prefix,\n      suffix,\n      value\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaDescribedBy={ariaDescribedBy}\n              ariaLabel={ariaLabel}\n              ariaLabelledBy={labelProps.id}\n              as=\"div\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              textAlign={textAlign}\n              value={valuePrefixSuffix}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    // If ariaValueText is the same as ariaValueNow.toString, no need to show it.\n    const valueText =\n      ariaValueNow === undefined\n        ? ariaValueText\n        : ariaValueNow.toString() !== ariaValueText\n        ? ariaValueText\n        : undefined;\n\n    const mainContent = (\n      <Fragment>\n        {renderedPrefix}\n        <TextFieldInput\n          ariaLabelledBy={ariaLabelledBy}\n          ariaLabel={ariaLabel}\n          ariaValueMax={ariaValueMax}\n          ariaValueMin={ariaValueMin}\n          ariaValueNow={ariaValueNow}\n          ariaValueText={valueText}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasEndContent={steppers !== undefined}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          hasPrefix={renderedPrefix !== undefined}\n          hasStartContent={false}\n          hasSuffix={renderedSuffix !== undefined}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          placeholder={placeholder}\n          role={hasSteppers ? 'spinbutton' : undefined}\n          textAlign={textAlign}\n          type={isMobile() ? virtualKeyboard : undefined}\n          value={isDisabled ? valuePrefixSuffix : value}\n          onCommit={onCommitAndDispatch}\n          onInput={onInputAndDispatch}\n          {...inputProps}\n          {...stepHandlerProps}\n        />\n        {renderedSuffix}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          endContent={steppers}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if runnning on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nexport { NumberInputText } from './NumberInputText';\n"],"names":["_jsx","IcoChevronUp","IcoChevronDown","_jsxs"],"mappings":"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"}