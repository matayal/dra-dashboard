{"version":3,"file":"UNSAFE_TextArea.js","sources":["../../src/UNSAFE_TextArea/MaxLengthCounter.tsx","../../src/UNSAFE_TextArea/TextArea.tsx"],"sourcesContent":["import { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { useCallback } from 'preact/hooks';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useFormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\n\ntype Props = {\n  maxLength: number;\n  valueLength?: number;\n  onClick?: () => void; // the calling component should focus on the appropriate element when clicked.\n};\n\nconst rootStyles = {\n  base: cssProps`${{\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    cursor: 'text',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-xs-font-size)',\n    lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-xs-line-height)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-secondary)',\n    textDecorationLine: 'none',\n    paddingTop: '0',\n    paddingInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding)',\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-1x)',\n    paddingInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-text-field-text-to-edge-padding)'\n  }}`\n};\nconst remainingTextStyles = {\n  hide: cssProps`${{\n    visibility: 'hidden'\n  }}`\n};\n// the spans surrounding the {valueLength}, / and {maxlength}  need to be display: inline-block\n// so that the order is flipped horizontally in RTL.\nconst spanStyles = cssProps`${{\n  display: 'inline-block'\n}}`;\n\nconst noop = () => {};\n\nexport function MaxLengthCounter({ maxLength, valueLength = 0, onClick }: Props) {\n  const { isFocused } = useFormFieldContext();\n  // We don't want mousedown on this component to do anything, so prevent the default behavior.\n  const killEvent = useCallback((event: Event) => {\n    event.preventDefault();\n  }, []);\n  const textClasses = classNames([!isFocused && remainingTextStyles.hide]);\n  const { pressProps } = usePress(onClick ?? noop);\n  return (\n    <div class={rootStyles.base} onMouseDown={killEvent} {...pressProps}>\n      <span class={textClasses}>\n        <span class={spanStyles}>{valueLength}</span>\n        <span class={spanStyles}>/</span>\n        <span class={spanStyles}>{maxLength}</span>\n      </span>\n    </div>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef, useCallback } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { MaxLengthCounter } from './MaxLengthCounter';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\n\ntype TextFieldProps = ComponentProps<typeof TextField>;\ntype TextFieldInputProps = ComponentProps<typeof TextFieldInput>;\ntype InlineUserAssistanceProps = ComponentProps<typeof InlineUserAssistance>;\n\ntype Props = {\n  /**\n   * The ID of an element (or space separated IDs of multiple elements) that\n   * describes the input.\n   */\n  ariaDescribedBy?: TextFieldInputProps['ariaDescribedBy'];\n\n  /**\n   * Text to provide guidance to help the user understand what to enter.\n   */\n  assistiveText?: InlineUserAssistanceProps['assistiveText'];\n  /**\n   * Dictates component's autocomplete state.\n   * This attribute indicates whether the value of the control can be automatically completed by the browser.\n   * The common values are \"on\" and \"off\".\n   */\n  autoComplete?: TextFieldInputProps['autoComplete'];\n  /**\n   * Autofocus specifies whether the component will get focus when the page is loaded.\n   * If it is set to true then the associated component will get input focus when the page is loaded.\n   * Setting this property doesn't set the focus to the component; it tells the browser to focus\n   * to it when the element is inserted in the document.\n   */\n  autoFocus?: TextFieldInputProps['autoFocus'];\n  /**\n   * Help source URL associated with the component.\n   */\n  helpSourceLink?: InlineUserAssistanceProps['helpSourceLink'];\n  /**\n   * Custom text to be rendered for the <code>helpSourceLink</code>.\n   */\n  helpSourceText?: InlineUserAssistanceProps['helpSourceText'];\n  /**\n   * Specifies whether the component is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Specifies whether the component is readonly.\n   */\n  isReadonly?: boolean;\n  /**\n   * Specifies for accessibility purposes whether a value is required.\n   *\n   * Setting this property to <code>false</code> means that a value is not required to be\n   * committed by the user.  Setting this property to <code>true</code> means that a value\n   * is required to be committed by the user.\n   */\n  isRequired?: TextFieldInputProps['isRequired'];\n  /**\n   * Specifies whether to show an indicator on screen that a value is required, for example\n   * before the user has committed a value.\n   */\n  isRequiredShown?: InlineUserAssistanceProps['isRequiredShown'];\n  /**\n   * Specifies the label associated with the field.\n   */\n  label: string;\n  /**\n   * Specifies where the label is positioned relative to the field.\n   */\n  labelEdge?: 'inside' | 'start' | 'top' | 'none';\n  /**\n   * Specifies the width of the label when <code>labelEdge</code> is <code>\"start\"</code>\n   */\n  labelStartWidth?: Size;\n  /**\n   * Specifies the maximum number of characters that can be entered in the input field.\n   */\n  maxLength?: number;\n  /**\n   * Determines whether the remaining number of characters that can be entered is shown or not.\n   */\n  maxLengthCounter?: 'none' | 'remaining';\n  /**\n   * Specifies how the input text characters are to be counted when maxLength is specified.\n   */\n  maxLengthUnit?: CountUnit;\n  /**\n   * Messages to show on screen that are associated with the component.\n   */\n  messages?: InlineUserAssistanceProps['messages'];\n  /**\n   * A short hint to display before the user enters a value.\n   */\n  placeholder?: TextFieldInputProps['placeholder'];\n  /**\n   * Specifies how the user is allowed to manually resize the TextArea component.\n   */\n  resize?: TextFieldProps['resize'];\n  /**\n   * Specifies the ARIA role type.\n   */\n  role?: TextFieldInputProps['role'];\n  /**\n   * Specifies the number of rows to display\n   */\n  rows?: TextFieldInputProps['rows'];\n  /**\n   * Specifies how to align text within the field.\n   */\n  textAlign?: TextFieldInputProps['textAlign'];\n  /**\n   * Specifies the density of the user assistance presentation.  It can be set to:\n   * <ul>\n   * <li><code>'efficient'</code>: Show inline and reserve space to prevent layout reflow when user\n   * assistance text is displayed.</li>\n   * <li><code>'reflow'</code>: Show inline. Layout will reflow when text is displayed.</li>\n   * </ul>\n   */\n  userAssistanceDensity?: InlineUserAssistanceProps['userAssistanceDensity'];\n  /**\n   * The current display value of the component.\n   */\n  value?: TextFieldInputProps['value'];\n  /**\n   * The style variant of the component.\n   */\n  variant?: TextFieldInputProps['variant'];\n  /**\n   * Callback invoked when the user commits the entered value by blurring out of the field.\n   */\n  onCommit?: TextFieldInputProps['onCommit'];\n  /**\n   * Callback invoked each time the user changes the value of the field. For example, if the user\n   * types 'abcd', this callback will be called four times with the value as 'a', 'ab', 'abc' and 'abcd'\n   * respectively.\n   */\n  onInput: TextFieldInputProps['onInput'];\n};\n\nexport const TextArea = forwardRef(\n  (\n    {\n      ariaDescribedBy,\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthCounter = 'remaining',\n      maxLengthUnit,\n      messages,\n      placeholder,\n      resize,\n      role,\n      rows,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      variant = 'default',\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, readonlyElementRef, focusProps, isFocused } = useFocusableTextField<\n      HTMLTextAreaElement,\n      HTMLTextAreaElement\n    >({ isDisabled, isReadonly, ref });\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        ariaDescribedBy,\n        contentVariant: 'textarea',\n        isDisabled,\n        isFocused,\n        isReadonly,\n        labelEdge,\n        messages,\n        styleVariant: variant,\n        value\n      });\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthExceeded, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    if (isReadonly) {\n      // TODO: We need to conditionally render the readonly innerReadonlyField as a textarea or div\n      //  also, the div will need to use white-space: pre-wrap so that the text will wrap like textarea\n      //  see JET-50636\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            variant=\"textarea\"\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaDescribedBy={ariaDescribedBy}\n              ariaLabel={ariaLabel}\n              ariaLabelledBy={labelProps.id}\n              as=\"textarea\"\n              elementRef={readonlyElementRef}\n              rows={rows}\n              autoFocus={autoFocus}\n              textAlign={textAlign}\n              value={value}\n              variant=\"textarea\"\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const onClickCounter = useCallback(() => {\n      const elm = enabledElementRef.current;\n      // for setSelectionRange(), len needs to be a number or null.\n      const len = elm ? elm.value.length : null;\n      // Since the counter element is after the text, clicking in this\n      // should put the selection at the end of the text\n      enabledElementRef.current?.setSelectionRange(len, len);\n      // Clicking the counter should put the focus on the input field\n      enabledElementRef.current?.focus();\n    }, []);\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          as=\"textarea\"\n          ariaLabel={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          isRequired={isRequired}\n          inputRef={enabledElementRef}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          placeholder={placeholder}\n          role={role}\n          rows={rows}\n          textAlign={textAlign}\n          value={value}\n          {...inputProps}\n        />\n        {maxLengthCounter === 'remaining' && maxLength !== undefined && (\n          <MaxLengthCounter\n            {...{ maxLength, valueLength, parentHasFocus: isFocused, onClick: onClickCounter }}\n          />\n        )}\n        {maxLength !== undefined && (\n          <MaxLengthLiveRegion {...{ isMaxLengthExceeded, maxLength, valueLength }} />\n        )}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          mainContent={mainContent}\n          inlineUserAssistance={inlineUserAssistance}\n          onBlur={focusProps?.onfocusout}\n          onFocus={focusProps?.onfocusin}\n          resize={resize}\n          {...textFieldProps}\n          {...fieldLabelProps}></TextField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["rootStyles","remainingTextStyles","spanStyles","noop","MaxLengthCounter","maxLength","valueLength","onClick","isFocused","useFormFieldContext","killEvent","useCallback","event","textClasses","classNames","hide","pressProps","usePress","_jsx","Object","assign","class","base","onMouseDown","children","_jsxs"],"mappings":"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"}