/* @oracle/oraclejet-preact: 14.1.0 */
import { _ as __rest } from './tslib.es6-821b2d99.js';
import { jsx, jsxs } from 'preact/jsx-runtime';
import { classNames } from './utils/UNSAFE_classNames.js';
import "./UNSAFE_ProgressCircle.css";
import { CircleWrapper, CircleInner } from './PRIVATE_Meter.js';
import { getClipPath } from './utils/PRIVATE_meterUtils.js';
import { useTranslationBundle } from './hooks/UNSAFE_useTranslationBundle.js';
import 'preact/compat';
import './utils/UNSAFE_dvtCommonUtils.js';
import 'preact/hooks';
import './UNSAFE_Environment.js';
import 'preact';
import './UNSAFE_Layer.js';

/**
 * A progress circle allows the user to visualize the progression of an extended computer operation.
 */

function ProgressCircle(_a) {
  var {
    value,
    max
  } = _a,
      otherProps = __rest(_a, ["value", "max"]);

  return value === 'indeterminate' ? jsx(IndeterminateProgressCircle, Object.assign({}, otherProps)) : jsx(DeterminateProgressCircle, Object.assign({
    value: value,
    max: max
  }, otherProps));
}

const IndeterminateProgressCircle = ({
  accessibleLabel,
  id,
  size = 'md'
}) => {
  const baseClasses = classNames([styles.base, `oj-c-progress-circle-${size}`, styles.indeterminateOuter]);
  const translations = useTranslationBundle('@oracle/oraclejet-preact');
  const ariaProps = {
    'aria-valuetext': accessibleLabel || translations.progressIndeterminate(),
    role: 'progressbar'
  };
  return jsx(CircleWrapper, Object.assign({
    id: id,
    ariaProps: ariaProps,
    class: baseClasses
  }, {
    children: jsx(CircleInner, {
      class: styles.indeterminateInner
    })
  }));
};

const DeterminateProgressCircle = ({
  value = 0,
  max = 100,
  id,
  size = 'md'
}) => {
  const percentage = Math.min(Math.max(0, value / max), 1);
  const baseClasses = classNames([styles.base, `oj-c-progress-circle-${size}`]);
  const clipPath = getClipPath(90, percentage * 360, false, 'full');
  const ariaProps = {};
  ariaProps['aria-valuemin'] = value != null ? '0' : undefined;
  ariaProps['aria-valuemax'] = value != null ? `${max}` : undefined;
  ariaProps['aria-valuenow'] = value != null ? `${value}` : undefined;
  ariaProps['role'] = 'progressbar';
  return jsxs(CircleWrapper, Object.assign({
    id: id,
    ariaProps: ariaProps,
    class: baseClasses
  }, {
    children: [jsx(CircleInner, {
      class: classNames([styles.determinateInner, styles.track])
    }), jsx(CircleInner, {
      class: classNames([styles.determinateInner, styles.value]),
      clipPath: clipPath
    })]
  }));
};

const styles = {
  base: "_1ivmimp",
  indeterminateOuter: "_3eumd1",
  indeterminateInner: "_155v4vm",
  determinateInner: "_1u04gql",
  track: "_1sosepj",
  value: "pkonds"
};

export { ProgressCircle };
/*  */
//# sourceMappingURL=UNSAFE_ProgressCircle.js.map
