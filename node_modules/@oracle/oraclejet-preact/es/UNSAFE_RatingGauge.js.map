{"version":3,"file":"UNSAFE_RatingGauge.js","sources":["../../src/UNSAFE_RatingGauge/RatingUtils.ts","../../src/UNSAFE_RatingGauge/RatingStar.tsx","../../src/UNSAFE_RatingGauge/RatingGaugeItem.tsx","../../src/UNSAFE_RatingGauge/useEvents.tsx","../../src/UNSAFE_RatingGauge/useTooltipOrDatatip.ts","../../src/UNSAFE_RatingGauge/RatingGauge.tsx"],"sourcesContent":["import type { Ref } from 'preact/hooks';\nimport { Threshold } from '../utils/UNSAFE_meterTypes';\nimport { findThreshold } from '../utils/PRIVATE_meterUtils';\n\nexport function getValue(\n  pageX: number,\n  max: number,\n  step: number,\n  dimensionsRef: Ref<{ width: number; x: number }>,\n  isRtl: boolean\n): number {\n  const dimensions = dimensionsRef.current;\n  if (!dimensions || dimensions.width === 0) {\n    return -1;\n  }\n  const width = pageX - dimensions.x;\n  const val = (max * (isRtl ? dimensions.width - width : width)) / dimensions.width;\n  const numSteps = val / step;\n  return numSteps < 0.5 ? 0 : Math.ceil(numSteps) * step;\n}\n\nexport function getDimensions(element: HTMLElement | null) {\n  if (!element) {\n    return {\n      width: 0,\n      x: 0\n    };\n  }\n\n  const rect = element.getBoundingClientRect();\n  return {\n    width: Math.round(rect.width),\n    x: Math.round(rect.x + window.scrollX)\n  };\n}\n\n/**\n * Returns the aria properties of the rating gauge.\n * @param value The value of the rating gauge.\n * @param max The maximum value of the rating gauge.\n * @param valueText The default aria value text for the rating gauge.\n * @param accessibleLabel The aria label of the rating gauge.\n * @param ariaLabelledby The ariaLabelledBy of the rating gauge.\n * @param thresholds The thresholds values for the rating gauge.\n * @returns The aria properties of the rating gauge.\n */\nexport function getRatingAriaProps(\n  value: number,\n  max: number,\n  accessibleLabel?: string,\n  ariaLabelledby?: string,\n  isDisabled?: boolean,\n  isReadonly?: boolean,\n  thresholds?: Threshold[],\n  tooltip?: string\n): {\n  'aria-label': string | undefined;\n  'aria-valuenow': string;\n  'aria-valuetext': string;\n  'aria-valuemax': string;\n  'aria-labelledby': string | undefined;\n  'aria-disabled': boolean | undefined;\n  'aria-readonly': boolean | undefined;\n  'aria-valuemin': string;\n  role: string;\n} {\n  const currentThreshold = findThreshold(value, thresholds);\n  const ariaValueText = currentThreshold?.accessibleLabel\n    ? `${value} ${currentThreshold.accessibleLabel}`\n    : `${value}`;\n  const accessibleLabelText = accessibleLabel\n    ? accessibleLabel\n    : tooltip && isReadonly && !isDisabled\n    ? tooltip\n    : undefined;\n  return {\n    'aria-label': accessibleLabelText,\n    'aria-valuenow': `${value}`,\n    'aria-valuetext': ariaValueText,\n    'aria-valuemax': `${max}`,\n    'aria-labelledby': ariaLabelledby,\n    'aria-disabled': isDisabled ? true : undefined,\n    'aria-readonly': isReadonly && !isDisabled ? true : undefined,\n    'aria-valuemin': '0',\n    role: 'slider'\n  };\n}\n\n/**\n * Returns whether the color is a valid enum.\n * @param color The color in rating gauge.\n * @returns true if the color enum is supported. false otherwise.\n */\nexport function isColorEnum(color: string | undefined) {\n  return color === 'neutral' ||\n    color === 'gold' ||\n    color === 'danger' ||\n    color === 'warning' ||\n    color === 'success'\n    ? true\n    : false;\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { isColorEnum } from './RatingUtils';\n\ntype Props = {\n  isSelected: boolean;\n  isDisabled?: boolean;\n  isReadOnly?: boolean;\n  color?: 'neutral' | 'gold';\n};\n\nconst RatingStar = ({ isSelected, isDisabled, isReadOnly, color }: Props) => {\n  const selectionState = isSelected ? 'selected' : 'unselected';\n  const disabledState = isDisabled && 'Disabled';\n  const readonlyState = isReadOnly && 'Readonly';\n  const styleStatePrefix = `${selectionState}${disabledState || readonlyState || ''}`;\n  const innerStyleClass =\n    ratingStarStyles[`${styleStatePrefix}Color` as keyof typeof ratingStarStyles];\n  const outerStyleClass =\n    ratingStarStyles[`${styleStatePrefix}BorderColor` as keyof typeof ratingStarStyles];\n  const isEnum = isColorEnum(color);\n  const customColors = !isEnum\n    ? {\n        '--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-selected': color,\n        '--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-selected': color,\n        '--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-selected-readonly': color\n      }\n    : undefined;\n\n  return (\n    <svg\n      viewBox=\"0 0 36 36\"\n      height=\"100%\"\n      width=\"100%\"\n      style={customColors}\n      class={classNames([ratingStarStyles.base, isEnum ? `oj-c-rating-gauge-${color}` : ''])}>\n      <g>\n        <path\n          class={innerStyleClass}\n          d=\"m18 1 5.0061 11.9524 12.9939 1.0344-9.9 8.4215 3.0246 12.5917-11.1246-6.7476-11.12461 6.7476 3.02461-12.5917-9.9-8.4215 12.9939-1.0344z\"\n        />\n        <path\n          class={outerStyleClass}\n          d=\"m23.0061 12.9524-5.0061-11.9524-5.0061 11.9524-12.9939 1.0344 9.9 8.4215-3.02461 12.5917 11.12461-6.7476 11.1246 6.7476-3.0246-12.5917 9.9-8.4215zm10.5043 1.8394-8.5262 7.2528 2.6077 10.8562-9.5919-5.818-9.59192 5.818 2.60772-10.8562-8.52615-7.2528 11.19115-.891 4.3192-10.31227 4.3192 10.31227z\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nconst ratingStarStyles = {\n  base: cssProps`${{\n    position: 'absolute'\n  }}`,\n  selectedColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-selected)'\n  }}`,\n  selectedBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-selected)'\n  }}`,\n  unselectedColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-unselected)'\n  }}`,\n  unselectedBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-unselected)'\n  }}`,\n  selectedReadonlyColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-selected-readonly)'\n  }}`,\n  selectedReadonlyBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-selected-readonly)'\n  }}`,\n  unselectedReadonlyColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-unselected-readonly)'\n  }}`,\n  unselectedReadonlyBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-unselected-readonly)'\n  }}`,\n  selectedDisabledColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-selected-disabled)'\n  }}`,\n  unselectedDisabledColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-color-unselected-disabled)'\n  }}`,\n  selectedDisabledBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-selected-disabled)'\n  }}`,\n  unselectedDisabledBorderColor: cssProps`${{\n    fill: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-border-color-unselected-disabled)'\n  }}`\n};\nexport { RatingStar };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { Fragment } from 'preact';\nimport { RatingStar } from './RatingStar';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useUser } from '../hooks/UNSAFE_useUser';\n\ntype Props = {\n  fillRatio: number;\n  isDisabled?: boolean;\n  isReadonly?: boolean;\n  color?: 'neutral' | 'gold';\n};\n\nconst RatingGaugeItem = ({ fillRatio, isDisabled, isReadonly, color }: Props) => {\n  const { direction } = useUser();\n  const isRtl = direction === 'rtl';\n\n  if (fillRatio === 1 || fillRatio === 0) {\n    return (\n      <RatingStar\n        isSelected={fillRatio === 1}\n        isDisabled={isDisabled}\n        isReadOnly={isReadonly}\n        color={color}\n      />\n    );\n  }\n\n  // if fillRatio is not 1 or zero, absolutely position selected star above the\n  // unselected star and clip both to form partially selected star.\n\n  return (\n    <Fragment>\n      <div\n        class={fractionalStar.base}\n        style={{\n          clipPath: `inset(0% ${isRtl ? (1 - fillRatio) * 100 : 0}% 0% ${\n            isRtl ? 0 : fillRatio * 100\n          }%)`\n        }}>\n        <RatingStar\n          isSelected={false}\n          isDisabled={isDisabled}\n          isReadOnly={isReadonly}\n          color={color}\n        />\n      </div>\n      <div\n        class={fractionalStar.base}\n        style={{\n          clipPath: `inset(0% ${isRtl ? 0 : (1 - fillRatio) * 100}% 0% ${\n            isRtl ? (1 - fillRatio) * 100 : 0\n          }%)`\n        }}>\n        <RatingStar\n          isSelected={true}\n          isDisabled={isDisabled}\n          isReadOnly={isReadonly}\n          color={color}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nconst fractionalStar = {\n  base: cssProps`${{\n    top: '0px',\n    left: '0px',\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }}`\n};\n\nexport { RatingGaugeItem };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { useRef } from 'preact/hooks';\nimport type { Ref, MutableRef } from 'preact/hooks';\nimport { useUser } from '../hooks/UNSAFE_useUser';\nimport { getValue, getDimensions } from './RatingUtils';\n\nexport type CommitDetail = {\n  value: number;\n};\n\nexport type InputDetail = {\n  value?: number;\n};\n\nexport const useEvents = (\n  max: number,\n  step: number,\n  value: number,\n  rootRef: Ref<HTMLElement>,\n  dimensionsRef: MutableRef<{ width: number; x: number }>,\n  isInteractive: boolean,\n  onCommit?: (detail: CommitDetail) => void,\n  onInput?: (detail: InputDetail) => void\n) => {\n  const currentInput = useRef<number>();\n  const { direction } = useUser();\n\n  if (!isInteractive) {\n    return {};\n  }\n\n  const isRtl = direction === 'rtl';\n\n  const handleInput = (inputValue: number | undefined) => {\n    onInput?.({ value: inputValue } as InputDetail);\n    currentInput.current = inputValue;\n  };\n\n  const cancelEvent = (event: Event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const pointerUpHandler = (event: PointerEvent) => {\n    const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);\n    if (val !== -1) {\n      onCommit?.({ value: val } as CommitDetail);\n    }\n  };\n\n  // When the document or rating gauge parent scrolls, we need to update the dimensionRef.current.x.\n  // Instead of updating it for every scroll event, recalculate the dims the first time mouse enters\n  // so we get fresh dimension value.\n  const pointerEnterHandler = () => {\n    dimensionsRef.current = getDimensions(rootRef.current);\n  };\n\n  const hoverHandler = (event: PointerEvent) => {\n    const val = getValue(event.pageX, max, step, dimensionsRef, isRtl);\n    if (val !== -1 && val != currentInput.current) {\n      handleInput(val);\n    }\n  };\n\n  const blurHandler = () => {\n    onCommit?.({ value: value } as CommitDetail);\n  };\n\n  const pointerLeaveHandler = () => {\n    handleInput(undefined);\n  };\n\n  const keyDownHandler = (event: KeyboardEvent) => {\n    const key = event.key;\n\n    switch (key) {\n      case 'Tab':\n        return;\n      case 'ArrowDown':\n        handleInput(Math.max(0, value - step));\n        break;\n      case 'ArrowUp':\n        handleInput(Math.min(max, value + step));\n        break;\n      case 'ArrowLeft': {\n        const inputValue = isRtl ? Math.min(max, value + step) : Math.max(0, value - step);\n        handleInput(inputValue);\n        break;\n      }\n      case 'ArrowRight': {\n        const inputValue = isRtl ? Math.max(0, value - step) : Math.min(max, value + step);\n        handleInput(inputValue);\n        break;\n      }\n    }\n    cancelEvent(event);\n  };\n\n  const keyUpHandler = (event: KeyboardEvent) => {\n    const key = event.key;\n\n    switch (key) {\n      case 'Enter':\n        onCommit?.({ value: value } as CommitDetail);\n        break;\n      case 'Tab':\n        handleInput(value);\n        break;\n      case 'Home':\n        handleInput(0);\n        break;\n      case 'End':\n        handleInput(max);\n        break;\n    }\n    cancelEvent(event);\n  };\n\n  return {\n    onPointerUp: pointerUpHandler,\n    onBlur: blurHandler,\n    onPointerMove: hoverHandler,\n    onKeyUp: keyUpHandler,\n    onKeyDown: keyDownHandler,\n    onPointerLeave: pointerLeaveHandler,\n    onPointerEnter: pointerEnterHandler\n  };\n};\n","import { ComponentChild } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { findThreshold } from '../utils/PRIVATE_meterUtils';\nimport { Threshold } from '../utils/UNSAFE_meterTypes';\nimport { useTooltipControlled } from '../hooks/UNSAFE_useTooltip';\n\ntype Props = {\n  max: number;\n  value: number;\n  isReadonly?: boolean;\n  isDisabled?: boolean;\n  tooltip?: string;\n  datatip?: string;\n  thresholds?: Threshold[];\n  ariaDescribedBy?: string;\n  width: number;\n};\n\nexport function useTooltipOrDatatip({\n  max,\n  value,\n  isReadonly,\n  isDisabled,\n  tooltip,\n  datatip,\n  thresholds,\n  ariaDescribedBy,\n  width\n}: Props): {\n  tooltipContent: ComponentChild;\n  tooltipProps: Record<string, any>;\n} {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const tooltipVariant = isReadonly && !isDisabled ? 'tooltip' : 'datatip';\n  let disabled =\n    isDisabled ||\n    !((tooltipVariant === 'tooltip' && tooltip) || (tooltipVariant === 'datatip' && datatip));\n  const datatipIndex = Math.max(1, Math.ceil(value));\n  const offset =\n    tooltipVariant === 'tooltip' ? 0 : ((datatipIndex - Math.ceil(max / 2)) * width) / max;\n  let text = tooltipVariant === 'tooltip' ? tooltip : datatip;\n  if (!text && thresholds && !isDisabled) {\n    text = findThreshold(value, thresholds)?.accessibleLabel;\n    disabled = false;\n  }\n\n  const { tooltipContent, tooltipProps } = useTooltipControlled({\n    text,\n    isOpen,\n    anchor: {\n      x: 'element',\n      y: 'element'\n    },\n    position: 'bottom',\n    offset: {\n      mainAxis: 8, // redwood tooltip design spec\n      crossAxis: offset\n    },\n    isDisabled: disabled,\n    onToggle: ({ value }) => setIsOpen(value),\n    variant: tooltipVariant\n  });\n\n  tooltipProps['aria-describedby'] = [ariaDescribedBy, tooltipProps['aria-describedby']]\n    .filter(Boolean)\n    .join(' ');\n\n  return {\n    tooltipContent,\n    tooltipProps\n  };\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { Fragment } from 'preact';\nimport { useEffect, useRef } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { RatingGaugeItem } from './RatingGaugeItem';\nimport { CommitDetail, InputDetail, useEvents } from './useEvents';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { getDimensions, getRatingAriaProps } from './RatingUtils';\nimport { useTooltipOrDatatip } from './useTooltipOrDatatip';\nimport { mergeProps } from '../utils/UNSAFE_mergeProps';\nimport { useTabbableMode } from '../hooks/UNSAFE_useTabbableMode';\nimport { Threshold } from '../utils/UNSAFE_meterTypes';\nimport { getThresholdColorFromValue } from '../utils/PRIVATE_meterUtils';\n/**\n * Props for the RatingGauge\n */\ntype Props = {\n  /**\n   * Defines whether the rating gauge should be read only. User interaction is prevented if set to true.\n   */\n  isReadonly?: boolean;\n\n  /**\n   * Defines whether the gauge is disabled or not. User interaction is prevented and the rating gauge is hidden from screen readers if set to true.\n   */\n  isDisabled?: boolean;\n\n  /**\n   * The size of the individual rating gauge items.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * The color of the individual rating gauge items.\n   */\n  color?: 'neutral' | 'gold';\n\n  /**\n   * The value of the rating gauge.\n   */\n  value?: number;\n\n  /**\n   * Specifies the increment by which values can be changed.\n   */\n  step?: number;\n\n  /**\n   * Integer value specifying the maximum value of the gauge, which determines the number of items that are displayed\n   */\n  max?: number;\n\n  /**\n   * The callback called in response to hover or focus interactions with the rating gauge items.\n   */\n  onInput?: (detail: InputDetail) => void;\n\n  /**\n   * The callback called when value of gauge changes on blur or Enter or click.\n   */\n  onCommit?: (detail: CommitDetail) => void;\n\n  /**\n   * The rating gauge tooltip. Tooltip is only used for read only rating gauges. If accessibleLabel is not specified, tooltip will be used as the accessible label.\n   */\n  tooltip?: string;\n\n  /**\n   * The rating gauge datatip string. Datatip is used for interactive rating gauges.\n   */\n  datatip?: string;\n\n  /**\n   * A label to be used for accessibility purposes. Default label will be used if not provided.\n   */\n  accessibleLabel?: string;\n\n  /**\n   * One or more ids (separated by spaces) of elements that label the rating gauge.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * One or more ids (separated by spaces) of elements that describe the rating gauge.\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * An array of Threshold objects.\n   * Applications are required to include information about thresholds for screen readers to make their component accessible by using ariaDescribedBy, ariaLabelledBy or accessibleLabel.\n   */\n  thresholds?: Threshold[];\n};\n\n/**\n * A rating gauge displays information graphically, typically displaying or accepting user feedback on a product or service.\n */\nexport function RatingGauge({\n  max = 5,\n  value = 0,\n  size = 'md',\n  color = 'neutral',\n  step = 1,\n  isReadonly,\n  isDisabled,\n  ...props\n}: Props) {\n  const rootRef = useRef<HTMLDivElement>(null);\n  const dimensionsRef = useRef(getDimensions(null));\n\n  const isInteractive = !isReadonly && !isDisabled;\n\n  // Since the dimension are compute lazily after render, store width and x in ref\n  // This is used to identify hovered and clicked star.\n  // width of the gauge depends on size and max so passing them as dependencies for useEffect\n  useEffect(() => {\n    dimensionsRef.current = getDimensions(rootRef.current);\n  }, [size, max]);\n\n  const eventProps = useEvents(\n    max,\n    step,\n    value,\n    rootRef,\n    dimensionsRef,\n    isInteractive,\n    props.onCommit,\n    props.onInput\n  );\n\n  const { tooltipContent, tooltipProps } = useTooltipOrDatatip({\n    max,\n    value,\n    isReadonly,\n    isDisabled,\n    tooltip: props.tooltip,\n    datatip: props.datatip,\n    thresholds: props.thresholds,\n    width: dimensionsRef.current.width,\n    ariaDescribedBy: props.ariaDescribedBy\n  });\n\n  const ariaProps = getRatingAriaProps(\n    value,\n    max,\n    props.accessibleLabel,\n    props.ariaLabelledBy,\n    isDisabled,\n    isReadonly,\n    props.thresholds,\n    props.tooltip\n  );\n\n  const mergedEventProps = mergeProps(eventProps, tooltipProps);\n\n  color = getThresholdColorFromValue(value, color, props.thresholds);\n  const { isTabbable } = useTabbableMode();\n  return (\n    <Fragment>\n      <div\n        {...ariaProps}\n        ref={rootRef}\n        class={classNames([\n          ratingStyles.base,\n          isInteractive ? ratingStyles.interactive : undefined\n        ])}\n        tabIndex={isTabbable && !isDisabled ? 0 : -1}\n        {...mergedEventProps}>\n        {[...Array(max)].map((_, index: number) => {\n          const fillRatio = Math.min(Math.max(0, value - index), 1);\n          return (\n            <div className={classNames([ratingStyles[size], ratingStyles.item])}>\n              <RatingGaugeItem\n                fillRatio={fillRatio}\n                isDisabled={isDisabled}\n                isReadonly={isReadonly}\n                color={color}\n              />\n            </div>\n          );\n        })}\n      </div>\n      {tooltipContent}\n    </Fragment>\n  );\n}\n\nconst ratingStyles = {\n  base: cssProps`${{\n    display: 'inline-flex',\n    '&:focus-visible': {\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n      outlineStyle: 'dotted',\n      outlineWidth: '1px'\n    }\n  }}`,\n  interactive: cssProps`${{\n    cursor: 'pointer',\n    touchAction: 'none'\n  }}`,\n  lg: cssProps`${{\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-lg-size)',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-lg-size)',\n    margin: '0px 2px'\n  }}`,\n  md: cssProps`${{\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-md-size)',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-md-size)',\n    margin: '0px 1px'\n  }}`,\n  sm: cssProps`${{\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-sm-size)',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-rating-gauge-sm-size)',\n    margin: '0px 1px'\n  }}`,\n  item: cssProps`${{\n    position: 'relative'\n  }}`\n};\n"],"names":["RatingStar","isSelected","isDisabled","isReadOnly","color","disabledState","readonlyState","isEnum","isColorEnum","_jsx","Object","assign","viewBox","height","width","style","customColors","class","classNames","ratingStarStyles","base","children","_jsxs","innerStyleClass","d","outerStyleClass","RatingGaugeItem","fillRatio","isReadonly","direction","useUser","isRtl","Fragment","fractionalStar","clipPath","RatingGauge","_a","max","value","size","step","props","__rest","rootRef","useRef","isInteractive","tooltipContent","tooltipProps","useTooltipOrDatatip","dimensionsRef","current","ariaProps","getRatingAriaProps","accessibleLabel","ariaLabelledBy","thresholds","tooltip","isTabbable","useTabbableMode","ref","ratingStyles","tabIndex","mergedEventProps","Array","map","_","index","Math","min","className","item"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIM,SAAU,QAAQ,CACtB,KAAa,EACb,GAAW,EACX,IAAY,EACZ,aAAgD,EAChD,KAAc,EAAA;AAEd,IAAA,MAAM,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC;IACzC,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;QACzC,OAAO,CAAC,CAAC,CAAC;AACX,KAAA;AACD,IAAA,MAAM,KAAK,GAAG,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC;IACnC,MAAM,GAAG,GAAG,CAAC,GAAG,IAAI,KAAK,GAAG,UAAU,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC;AAClF,IAAA,MAAM,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC;AAC5B,IAAA,OAAO,QAAQ,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;AACzD,CAAC;AAEK,SAAU,aAAa,CAAC,OAA2B,EAAA;IACvD,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO;AACL,YAAA,KAAK,EAAE,CAAC;AACR,YAAA,CAAC,EAAE,CAAC;SACL,CAAC;AACH,KAAA;AAED,IAAA,MAAM,IAAI,GAAG,OAAO,CAAC,qBAAqB,EAAE,CAAC;IAC7C,OAAO;QACL,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AAC7B,QAAA,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;KACvC,CAAC;AACJ,CAAC;AAED;;;;;;;;;AASG;SACa,kBAAkB,CAChC,KAAa,EACb,GAAW,EACX,eAAwB,EACxB,cAAuB,EACvB,UAAoB,EACpB,UAAoB,EACpB,UAAwB,EACxB,OAAgB,EAAA;IAYhB,MAAM,gBAAgB,GAAG,aAAa,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IAC1D,MAAM,aAAa,GAAG,CAAA,gBAAgB,aAAhB,gBAAgB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhB,gBAAgB,CAAE,eAAe;AACrD,UAAE,CAAG,EAAA,KAAK,IAAI,gBAAgB,CAAC,eAAe,CAAE,CAAA;AAChD,UAAE,CAAA,EAAG,KAAK,CAAA,CAAE,CAAC;IACf,MAAM,mBAAmB,GAAG,eAAe;AACzC,UAAE,eAAe;AACjB,UAAE,OAAO,IAAI,UAAU,IAAI,CAAC,UAAU;AACtC,cAAE,OAAO;cACP,SAAS,CAAC;IACd,OAAO;AACL,QAAA,YAAY,EAAE,mBAAmB;QACjC,eAAe,EAAE,CAAG,EAAA,KAAK,CAAE,CAAA;AAC3B,QAAA,gBAAgB,EAAE,aAAa;QAC/B,eAAe,EAAE,CAAG,EAAA,GAAG,CAAE,CAAA;AACzB,QAAA,iBAAiB,EAAE,cAAc;QACjC,eAAe,EAAE,UAAU,GAAG,IAAI,GAAG,SAAS;AAC9C,QAAA,eAAe,EAAE,UAAU,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,SAAS;AAC7D,QAAA,eAAe,EAAE,GAAG;AACpB,QAAA,IAAI,EAAE,QAAQ;KACf,CAAC;AACJ,CAAC;AAED;;;;AAIG;AACG,SAAU,WAAW,CAAC,KAAyB,EAAA;IACnD,OAAO,KAAK,KAAK,SAAS;AACxB,QAAA,KAAK,KAAK,MAAM;AAChB,QAAA,KAAK,KAAK,QAAQ;AAClB,QAAA,KAAK,KAAK,SAAS;AACnB,QAAA,KAAK,KAAK,SAAS;AACnB,UAAE,IAAI;UACJ,KAAK,CAAC;AACZ;;AClFA,MAAAA,UAAA,GAAA,CAAA;EAAAC,UAAA;EAAAC,UAAA;EAAAC,UAAA;AAAAC,EAAAA,KAAAA;AAAA,CAAA,KAAA;;AAEE,EAAA,MAAAC,aAAA,GAAAH,UAAA,IAAA,UAAA,CAAA;AACA,EAAA,MAAAI,aAAA,GAAAH,UAAA,IAAA,UAAA,CAAA;;;;AAMA,EAAA,MAAAI,MAAA,GAAAC,WAAA,CAAAJ,KAAA,CAAA,CAAA;iCAEE;AACI,IAAA,uDAAA,EAAAA,KADJ;AAEI,IAAA,8DAAA,EAAAA,KAFJ;IAGI,gEAAAA,EAAAA,KAAAA;AAHJ;AAOF,EAAA,OAAAK,GAAA,CAAA,KAAA,EAAAC,MAAA,CAAAC,MAAA,CAAA;AAAAC,IAAAA,OAAA,EAAA,WAAA;AAAAC,IAAAA,MAAA,EAAA,MAAA;AAAAC,IAAAA,KAAA,EAAA,MAAA;AAAAC,IAAAA,KAAA,EAAAC,YAAA;AAAAC,IAAAA,KAAA,EAAAC,UAAA,CAAA,CAAAC,gBAAA,CAAAC,IAAA,EAAAb,MAAA,GAAA,CAAAH,kBAAAA,EAAAA,KAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAAA,GAAA,EAAA;AAAAiB,IAAAA,QAAA,EAAAC,IAAA,CAAA,GAAA,EAAA;AAAAD,MAAAA,QAAA,EAAA,CAAAZ,GAAA,CAAA,MAAA,EAAA;AAAAQ,QAAAA,KAAA,EAAAM,eAAA;AAAAC,QAAAA,CAAA,EAAA,yIAAA;AAAA,OAAA,CAAA,EAAAf,GAAA,CAAA,MAAA,EAAA;AAAAQ,QAAAA,KAAA,EAAAQ,eAAA;AAAAD,QAAAA,CAAA,EAAA,ySAAA;AAAA,OAAA,CAAA,CAAA;KAAA,CAAA;AAAA,GAAA,CAAA,CAAA,CAAA;AAmBF,CArCA,CAAA;;AAuCA,MAAAL,gBAAA,GAAA;QAAA,UAAA;iBAAA,QAAA;uBAAA,UAAA;mBAAA,QAAA;yBAAA,UAAA;yBAAA,UAAA;+BAAA,QAAA;2BAAA,QAAA;iCAAA,UAAA;yBAAA,SAAA;2BAAA,SAAA;+BAAA,QAAA;;AAAA,CAAA;;ACtCA,MAAAO,eAAA,GAAA,CAAA;EAAAC,SAAA;EAAAzB,UAAA;EAAA0B,UAAA;AAAAxB,EAAAA,KAAAA;AAAA,CAAA,KAAA;EACE,MAAA;AAAAyB,IAAAA,SAAAA;AAAA,GAAA,GAAAC,OAAA,EAAA,CAAA;AACA,EAAA,MAAAC,KAAA,GAAAF,SAAA,KAAA,KAAA,CAAA;;AAEA,EAAA,IAAAF,SAAA,KAAA,CAAA,IAAAA,SAAA,KAAA,CAAA,EAAA;;;;;;;AASC,GAbH;;;;EAkBE,OAAAL,IAAA,CAAAU,QAAA,EAAA;IAAAX,QAAA,EAAA,CAAAZ,GAAA,CAAA,KAAA,EAAAC,MAAA,CAAAC,MAAA,CAAA;MAAAM,KAAA,EAAAgB,cAAA,CAAAb,IAAA;AAAAL,MAAAA,KAAA,EAAA;AAKQmB,QAAAA,QAAA,EAAA,CAAAH,SAAAA,EAAAA,KAAA,GAAA,CAAA,CAAA,GAAAJ,SAAA,IAAA,GAAA,GAAA,CAAA,QAAAI,KAAA,GAAA,CAAA,GAAAJ,SAAA,GAAA,GAAA,CAAA,EAAA,CAAA;AALR,OAAA;AAAA,KAAA,EAQO;AAAAN,MAAAA,QAAA,EAAAZ,GAAA,CAAAT,UAAA,EAAA;AAAAC,QAAAA,UAAA,EAAA,KAAA;AAAAC,QAAAA,UAAA,EAAAA,UAAA;AAAAC,QAAAA,UAAA,EAAAyB,UAAA;AAAAxB,QAAAA,KAAA,EAAAA,KAAAA;OAAA,CAAA;KARP,CAAA,CAAA,EAQOK,GAAA,CAAA,KAAA,EAAAC,MAAA,CAAAC,MAAA,CAAA;MAAAM,KAAA,EAAAgB,cAAA,CAAAb,IAAA;AAAAL,MAAAA,KAAA,EAAA;QAWCmB,QAAA,EAAA,YAAAH,KAAA,GAAA,CAAA,GAAA,CAAA,IAAAJ,SAAA,IAAA,GAAA,CAAAI,KAAAA,EAAAA,KAAA,GAAA,CAAA,CAAA,GAAAJ,SAAA,IAAA,GAAA,GAAA,CAAA,CAAA,EAAA,CAAA;AAXD,OAAA;AAAA,KAAA;;;;;;;KAAA,CAAA,CARP,CAAA;AAAA,GAAA,CAAA,CAAA;AAgCF,CAlDA,CAAA;;AAoDA,MAAAM,cAAA,GAAA;;AAAA,CAAA;;ACxEA;;;;;;AAMG;AAeI,MAAM,SAAS,GAAG,CACvB,GAAW,EACX,IAAY,EACZ,KAAa,EACb,OAAyB,EACzB,aAAuD,EACvD,aAAsB,EACtB,QAAyC,EACzC,OAAuC,KACrC;AACF,IAAA,MAAM,YAAY,GAAG,MAAM,EAAU,CAAC;AACtC,IAAA,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,CAAC;IAEhC,IAAI,CAAC,aAAa,EAAE;AAClB,QAAA,OAAO,EAAE,CAAC;AACX,KAAA;AAED,IAAA,MAAM,KAAK,GAAG,SAAS,KAAK,KAAK,CAAC;AAElC,IAAA,MAAM,WAAW,GAAG,CAAC,UAA8B,KAAI;QACrD,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAG,EAAE,KAAK,EAAE,UAAU,EAAiB,CAAC,CAAC;AAChD,QAAA,YAAY,CAAC,OAAO,GAAG,UAAU,CAAC;AACpC,KAAC,CAAC;AAEF,IAAA,MAAM,WAAW,GAAG,CAAC,KAAY,KAAI;QACnC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;AAC1B,KAAC,CAAC;AAEF,IAAA,MAAM,gBAAgB,GAAG,CAAC,KAAmB,KAAI;AAC/C,QAAA,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;AACnE,QAAA,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;YACd,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAG,EAAE,KAAK,EAAE,GAAG,EAAkB,CAAC,CAAC;AAC5C,SAAA;AACH,KAAC,CAAC;;;;IAKF,MAAM,mBAAmB,GAAG,MAAK;QAC/B,aAAa,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACzD,KAAC,CAAC;AAEF,IAAA,MAAM,YAAY,GAAG,CAAC,KAAmB,KAAI;AAC3C,QAAA,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;QACnE,IAAI,GAAG,KAAK,CAAC,CAAC,IAAI,GAAG,IAAI,YAAY,CAAC,OAAO,EAAE;YAC7C,WAAW,CAAC,GAAG,CAAC,CAAC;AAClB,SAAA;AACH,KAAC,CAAC;IAEF,MAAM,WAAW,GAAG,MAAK;QACvB,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAG,EAAE,KAAK,EAAE,KAAK,EAAkB,CAAC,CAAC;AAC/C,KAAC,CAAC;IAEF,MAAM,mBAAmB,GAAG,MAAK;QAC/B,WAAW,CAAC,SAAS,CAAC,CAAC;AACzB,KAAC,CAAC;AAEF,IAAA,MAAM,cAAc,GAAG,CAAC,KAAoB,KAAI;AAC9C,QAAA,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;AAEtB,QAAA,QAAQ,GAAG;AACT,YAAA,KAAK,KAAK;gBACR,OAAO;AACT,YAAA,KAAK,WAAW;AACd,gBAAA,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;gBACvC,MAAM;AACR,YAAA,KAAK,SAAS;AACZ,gBAAA,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;gBACzC,MAAM;YACR,KAAK,WAAW,EAAE;AAChB,gBAAA,MAAM,UAAU,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC;gBACnF,WAAW,CAAC,UAAU,CAAC,CAAC;gBACxB,MAAM;AACP,aAAA;YACD,KAAK,YAAY,EAAE;AACjB,gBAAA,MAAM,UAAU,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC;gBACnF,WAAW,CAAC,UAAU,CAAC,CAAC;gBACxB,MAAM;AACP,aAAA;AACF,SAAA;QACD,WAAW,CAAC,KAAK,CAAC,CAAC;AACrB,KAAC,CAAC;AAEF,IAAA,MAAM,YAAY,GAAG,CAAC,KAAoB,KAAI;AAC5C,QAAA,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;AAEtB,QAAA,QAAQ,GAAG;AACT,YAAA,KAAK,OAAO;gBACV,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAG,EAAE,KAAK,EAAE,KAAK,EAAkB,CAAC,CAAC;gBAC7C,MAAM;AACR,YAAA,KAAK,KAAK;gBACR,WAAW,CAAC,KAAK,CAAC,CAAC;gBACnB,MAAM;AACR,YAAA,KAAK,MAAM;gBACT,WAAW,CAAC,CAAC,CAAC,CAAC;gBACf,MAAM;AACR,YAAA,KAAK,KAAK;gBACR,WAAW,CAAC,GAAG,CAAC,CAAC;gBACjB,MAAM;AACT,SAAA;QACD,WAAW,CAAC,KAAK,CAAC,CAAC;AACrB,KAAC,CAAC;IAEF,OAAO;AACL,QAAA,WAAW,EAAE,gBAAgB;AAC7B,QAAA,MAAM,EAAE,WAAW;AACnB,QAAA,aAAa,EAAE,YAAY;AAC3B,QAAA,OAAO,EAAE,YAAY;AACrB,QAAA,SAAS,EAAE,cAAc;AACzB,QAAA,cAAc,EAAE,mBAAmB;AACnC,QAAA,cAAc,EAAE,mBAAmB;KACpC,CAAC;AACJ,CAAC;;ACpHK,SAAU,mBAAmB,CAAC,EAClC,GAAG,EACH,KAAK,EACL,UAAU,EACV,UAAU,EACV,OAAO,EACP,OAAO,EACP,UAAU,EACV,eAAe,EACf,KAAK,EACC,EAAA;;IAIN,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAC;AAErD,IAAA,MAAM,cAAc,GAAG,UAAU,IAAI,CAAC,UAAU,GAAG,SAAS,GAAG,SAAS,CAAC;IACzE,IAAI,QAAQ,GACV,UAAU;AACV,QAAA,EAAE,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,MAAM,cAAc,KAAK,SAAS,IAAI,OAAO,CAAC,CAAC,CAAC;AAC5F,IAAA,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACnD,IAAA,MAAM,MAAM,GACV,cAAc,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC;AACzF,IAAA,IAAI,IAAI,GAAG,cAAc,KAAK,SAAS,GAAG,OAAO,GAAG,OAAO,CAAC;AAC5D,IAAA,IAAI,CAAC,IAAI,IAAI,UAAU,IAAI,CAAC,UAAU,EAAE;QACtC,IAAI,GAAG,CAAA,EAAA,GAAA,aAAa,CAAC,KAAK,EAAE,UAAU,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,eAAe,CAAC;QACzD,QAAQ,GAAG,KAAK,CAAC;AAClB,KAAA;AAED,IAAA,MAAM,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,oBAAoB,CAAC;QAC5D,IAAI;QACJ,MAAM;AACN,QAAA,MAAM,EAAE;AACN,YAAA,CAAC,EAAE,SAAS;AACZ,YAAA,CAAC,EAAE,SAAS;AACb,SAAA;AACD,QAAA,QAAQ,EAAE,QAAQ;AAClB,QAAA,MAAM,EAAE;AACN,YAAA,QAAQ,EAAE,CAAC;AACX,YAAA,SAAS,EAAE,MAAM;AAClB,SAAA;AACD,QAAA,UAAU,EAAE,QAAQ;QACpB,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,SAAS,CAAC,KAAK,CAAC;AACzC,QAAA,OAAO,EAAE,cAAc;AACxB,KAAA,CAAC,CAAC;IAEH,YAAY,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC,kBAAkB,CAAC,CAAC;SACnF,MAAM,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,GAAG,CAAC,CAAC;IAEb,OAAO;QACL,cAAc;QACd,YAAY;KACb,CAAC;AACJ;;AC4BA;;AAEG;;AACH,SAAAE,WAAA,CAAAC,EAAA,EAAA;EAA4B,IAAA;AAAAC,IAAAA,GAAA,GAAA,CAAA;AAAAC,IAAAA,KAAA,GAAA,CAAA;AAAAC,IAAAA,IAAA,GAAA,IAAA;AAAAnC,IAAAA,KAAA,GAAA,SAAA;AAAAoC,IAAAA,IAAA,GAAA,CAAA;IAAAZ,UAAA;AAAA1B,IAAAA,UAAAA;AAAA,GAAA,GAAAkC,EAAA;MAAAK,KAAA,GAAAC,MAAA,CAAAN,EAAA,EAAA,CAAA,KAAA,EAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,YAAA,EAAA,YAAA,CAAA,CAAA,CAAA;;AAU1B,EAAA,MAAAO,OAAA,GAAAC,MAAA,CAAA,IAAA,CAAA,CAAA;;EAGA,MAAAC,aAAA,GAAA,CAAAjB,UAAA,IAAA,CAAA1B,UAAA,CAbF;;;;;;AAoBE,KAAA,CAAAqC,IAAA,EAAAF,GAAA;;EAaA,MAAA;IAAAS,cAAA;AAAAC,IAAAA,YAAAA;AAAA,GAAA,GAAAC,mBAAA,CAAA;OAAA;SAAA;cAAA;cAAA;0BAAA;0BAAA;gCAAA;AAQElC,IAAAA,KAAA,EAAAmC,aAAA,CAAAC,OAAA,CAAApC,KARF;;AAAA,GAAA,CAAA,CAAA;EAYA,MAAAqC,SAAA,GAAAC,kBAAA,CAAAd,KAAA,EAAAD,GAAA,EAAAI,KAAA,CAAAY,eAAA,EAAAZ,KAAA,CAAAa,cAAA,EAAApD,UAAA,EAAA0B,UAAA,EAAAa,KAAA,CAAAc,UAAA,EAAAd,KAAA,CAAAe,OAAA,CAAA,CAAA;;;EAcA,MAAA;AAAAC,IAAAA,UAAAA;AAAA,GAAA,GAAAC,eAAA,EAAA,CAAA;EACA,OAAApC,IAAA,CAAAU,QAAA,EAAA;AAAAX,IAAAA,QAAA,EAAA,CAAAZ,GAAA,CAAA,KAAA,EAAAC,MAAA,CAAAC,MAAA,CAAA,EAAA,EAAAwC,SAAA,EAAA;AAAAQ,MAAAA,GAAA,EAAAhB,OAAA;AAAA1B,MAAAA,KAAA,EAAAC,UAAA,CAAA,CAMQ0C,YAAA,CAAAxC,IANR,sDAAA,CAAA,CAAA;MAQOyC,QAAA,EAAAJ,UAAA,IAAA,CAAAvD,UAAA,GAAA,CAAA,GAAA,CAAA,CAAA;KARP,EAQO4D,gBARP,EAQO;AAAAzC,MAAAA,QAAA,EAAA,CAAA,GAAA0C,KAAA,CAAA1B,GAAA,CAAA,CAAA2B,CAAAA,GAAA,CAAA,CAAAC,CAAA,EAAAC,KAAA,KAAA;AAIC,QAAA,MAAAvC,SAAA,GAAAwC,IAAA,CAAAC,GAAA,CAAAD,IAAA,CAAA9B,GAAA,CAAA,CAAA,EAAAC,KAAA,GAAA4B,KAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,QAAA,OAAAzD,GAAA,CAAA,KAAA,EAAAC,MAAA,CAAAC,MAAA,CAAA;AAAA0D,UAAAA,SAAA,EAAAnD,UAAA,CAAA,CAAA0C,YAAA,CAAArB,IAAA,CAAA,EAAAqB,YAAA,CAAAU,IAAA,CAAA,CAAA;AAAA,SAAA,EAAA;AAAAjD,UAAAA,QAAA,EAAAZ,GAAA,CAAAiB,eAAA,EAAA;AAAAC,YAAAA,SAAA,EAAAA,SAAA;AAAAzB,YAAAA,UAAA,EAAAA,UAAA;AAAA0B,YAAAA,UAAA,EAAAA,UAAA;AAAAxB,YAAAA,KAAA,EAAAA,KAAAA;WAAA,CAAA;AAAA,SAAA,CAAA,CAAA,CAAA;OALD,CAAA;KARP,CAAA,CAAA,EAuBM0C,cAvBN,CAAA;AAAA,GAAA,CAAA,CAAA;AA4BF,CAAA;AAEA,MAAAc,YAAA,GAAA;QAAA,UAAA;eAAA,QAAA;MAAA,UAAA;MAAA,UAAA;MAAA,UAAA;;AAAA,CAAA;;;;;;;"}