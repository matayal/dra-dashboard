/* @oracle/oraclejet-preact: 14.1.0 */
import { _ as __rest } from './tslib.es6-821b2d99.js';
import { jsx } from 'preact/jsx-runtime';
import { classNames } from './utils/UNSAFE_classNames.js';
import "./UNSAFE_ProgressBar.css";
import { useUser } from './hooks/UNSAFE_useUser.js';
import { useTranslationBundle } from './hooks/UNSAFE_useTranslationBundle.js';
import { BarTrack, BarValue } from './PRIVATE_Meter.js';
import 'preact/hooks';
import './UNSAFE_Environment.js';
import 'preact';
import './UNSAFE_Layer.js';
import 'preact/compat';

/**
 * A progress bar allows the user to visualize the progression of an extended computer operation.
 */

function ProgressBar(_a) {
  var {
    value,
    max
  } = _a,
      otherProps = __rest(_a, ["value", "max"]);

  return value === 'indeterminate' ? jsx(IndeterminateProgressBar, Object.assign({}, otherProps)) : jsx(DeterminateProgressBar, Object.assign({
    value: value,
    max: max
  }, otherProps));
}

const IndeterminateProgressBar = ({
  accessibleLabel,
  id,
  width,
  edge = 'none'
}) => {
  const {
    direction
  } = useUser();
  const classes = classNames([styles.value, styles.indeterminate, styles[direction]]);
  const baseClasses = classNames([styles.base, edge === 'none' && styles.standalone]);
  const translations = useTranslationBundle('@oracle/oraclejet-preact');
  const ariaProps = {
    'aria-valuetext': accessibleLabel || translations.progressIndeterminate(),
    role: 'progressbar'
  };
  return jsx(BarTrack, Object.assign({
    id: id,
    ariaProps: ariaProps,
    class: baseClasses,
    length: width
  }, {
    children: jsx(BarValue, {
      class: classes
    })
  }));
};

const DeterminateProgressBar = ({
  value = 0,
  max = 100,
  id,
  width,
  edge = 'none'
}) => {
  const percentage = `${Math.min(Math.max(0, value / max), 1) * 100}%`;
  const baseClasses = classNames([styles.base, edge === 'none' && styles.standalone]);
  const ariaProps = {};
  ariaProps['aria-valuemin'] = value != null ? '0' : undefined;
  ariaProps['aria-valuemax'] = value != null ? `${max}` : undefined;
  ariaProps['aria-valuenow'] = value != null ? `${value}` : undefined;
  ariaProps['role'] = 'progressbar';
  return jsx(BarTrack, Object.assign({
    ariaProps: ariaProps,
    id: id,
    length: width,
    class: baseClasses
  }, {
    children: jsx(BarValue, {
      class: styles.value,
      length: percentage
    })
  }));
};

const styles = {
  base: "_1t6lsbn",
  value: "_1yrmw5d",
  indeterminate: "vvz5qb",
  standalone: "a3d2oy",
  rtl: "uo2nbp",
  ltr: "_1l9nvai"
};

export { ProgressBar };
/*  */
//# sourceMappingURL=UNSAFE_ProgressBar.js.map
