{"ast":null,"code":"// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import \"../Css/styles.css\";\n\n// function GraphComponent() {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     const svg = d3.select(svgRef.current);\n\n//     // Define the data for the nodes and links\n//     const nodes = [\n//       { id: \"A\", color: \"red\" },\n//       { id: \"B\", color: \"green\" },\n//       { id: \"C\", color: \"blue\" },\n//       { id: \"D\", color: \"grey\" },\n//       { id: \"E\", color: \"pink\" },\n//     ];\n\n//     const links = [\n//       { source: \"A\", target: \"B\", weight: 1 },\n//       { source: \"B\", target: \"A\", weight: 1 },\n//       { source: \"A\", target: \"C\", weight: 2 },\n//       { source: \"B\", target: \"C\", weight: 3 },\n//       { source: \"A\", target: \"E\", weight: 4 },\n//       { source: \"E\", target: \"D\", weight: 5 },\n//       { source: \"C\", target: \"D\", weight: 6 },\n//     ];\n\n//     // Create the force simulation\n//     const simulation = d3\n//       .forceSimulation(nodes)\n//       .force(\n//         \"link\",\n//         d3\n//           .forceLink(links)\n//           .id((d) => d.id)\n//           .distance(100)\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(-50))\n//       .force(\"center\", d3.forceCenter(300, 150));\n\n//     // Create the links\n//     const link = svg\n//       .selectAll(\".link\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"class\", \"link\")\n//       .attr(\"stroke\", \"black\")\n//       .attr(\"marker-end\", \"url(#arrowhead)\");\n\n//     // Add weight labels to the links\n//     const weightLabel = svg\n//       .selectAll(\".weight-label\")\n//       .data(links)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"weight-label\")\n//       .attr(\"text-anchor\", \"middle\")\n//       .attr(\"dy\", \"-0.5em\")\n//       .text((d) => d.weight);\n\n//     // Create the nodes\n//     const node = svg\n//       .selectAll(\".node\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"class\", \"node\")\n//       .attr(\"r\", 15)\n//       .attr(\"fill\", (d) => d.color);\n\n//     // Add labels to the nodes\n//     const label = svg\n//       .selectAll(\".label\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"label\")\n//       .attr(\"text-anchor\", \"middle\")\n//       .attr(\"dy\", \".35em\")\n//       .text((d) => d.id);\n\n//     // Add the arrowhead marker to the svg\n//     svg\n//       .append(\"defs\")\n//       .selectAll(\"marker\")\n//       .data([\"arrowhead\"])\n//       .enter()\n//       .append(\"marker\")\n//       .attr(\"id\", \"arrowhead\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 20)\n//       .attr(\"markerWidth\", 8)\n//       .attr(\"markerHeight\", 8)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n//     // Add arrowhead marker to the svg\n//     svg\n//       .append(\"defs\")\n//       .selectAll(\"marker\")\n//       .data([\"arrowhead\"])\n//       .enter()\n//       .append(\"marker\")\n//       .attr(\"id\", \"arrowhead\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 25)\n//       .attr(\"markerWidth\", 8)\n//       .attr(\"markerHeight\", 8)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n//     // Add the text for weight to the edges\n//     const text = svg\n//       .selectAll(\".text\")\n//       .data(links)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"text\")\n//       .text((d) => d.weight);\n\n//     // Update the position of the text on each tick\n//     simulation.on(\"tick\", () => {\n//       link\n//         .attr(\"x1\", (d) => d.source.x)\n//         .attr(\"y1\", (d) => d.source.y)\n//         .attr(\"x2\", (d) => d.target.x)\n//         .attr(\"y2\", (d) => d.target.y);\n\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n\n//       text\n//         .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\n//         .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\n//     });\n//   }, []);\n\n//   return (\n//     <div className=\"form\">\n//       <svg ref={svgRef} width=\"600\" height=\"300\"></svg>\n//     </div>\n//   );\n// }\n\n// export default GraphComponent;\n\nimport React, { useState } from \"react\";\nfunction GraphComponent() {\n  // const data = [\n  //   { graphName: \"Graph 1\", stsName: \"Tuning Set 1\" },\n  //   { graphName: \"Graph 2\", stsName: \"Tuning Set 1\" },\n  //   { graphName: \"Graph 3\", stsName: \"Tuning Set 2\" },\n  // ];\n\n  // const renderTableData = () => {\n  //   return data.map((dra, index) => {\n  //     const { graphName, stsName } = dra;\n\n  //     let viewGraph = <button className=\"btn\">View Graph</button>;\n  //     let deleteGraph = <button className=\"btn-red\">Delete Graph</button>;\n\n  //  return (\n  //       <tr key={index}>\n  //         <td>{graphName}</td>\n  //         <td>{stsName}</td>\n  //         <td>\n  //           {viewGraph} &emsp; &emsp; &emsp;{deleteGraph}\n  //         </td>\n  //       </tr>\n  //     );\n  //   });\n  // };\n\n  return;\n  //(\n  //   <div className=\"form\">\n  //     <h4>Graph</h4>\n  //     <br />\n  //     <br />\n  //     <br />\n  //     <table className=\"table\">\n  //       <thead>\n  //         <tr className=\"tr\">\n  //           <th className=\"th\">Graph Name</th>\n  //           <th bgcolor=\"#41afca\">STS Name</th>\n  //           <th bgcolor=\"#41afca\" color=\"#f1f5f9\">\n  //             Actions\n  //           </th>\n  //         </tr>\n  //       </thead>\n  //       <tbody>{renderTableData()}</tbody>\n  //     </table>\n\n  //     <br />\n  //   </div>\n  //   );\n}\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useState","GraphComponent","_c","$RefreshReg$"],"sources":["/Users/mayanktayal/my-app/src/Components/GraphComponent.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import \"../Css/styles.css\";\n\n// function GraphComponent() {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     const svg = d3.select(svgRef.current);\n\n//     // Define the data for the nodes and links\n//     const nodes = [\n//       { id: \"A\", color: \"red\" },\n//       { id: \"B\", color: \"green\" },\n//       { id: \"C\", color: \"blue\" },\n//       { id: \"D\", color: \"grey\" },\n//       { id: \"E\", color: \"pink\" },\n//     ];\n\n//     const links = [\n//       { source: \"A\", target: \"B\", weight: 1 },\n//       { source: \"B\", target: \"A\", weight: 1 },\n//       { source: \"A\", target: \"C\", weight: 2 },\n//       { source: \"B\", target: \"C\", weight: 3 },\n//       { source: \"A\", target: \"E\", weight: 4 },\n//       { source: \"E\", target: \"D\", weight: 5 },\n//       { source: \"C\", target: \"D\", weight: 6 },\n//     ];\n\n//     // Create the force simulation\n//     const simulation = d3\n//       .forceSimulation(nodes)\n//       .force(\n//         \"link\",\n//         d3\n//           .forceLink(links)\n//           .id((d) => d.id)\n//           .distance(100)\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(-50))\n//       .force(\"center\", d3.forceCenter(300, 150));\n\n//     // Create the links\n//     const link = svg\n//       .selectAll(\".link\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"class\", \"link\")\n//       .attr(\"stroke\", \"black\")\n//       .attr(\"marker-end\", \"url(#arrowhead)\");\n\n//     // Add weight labels to the links\n//     const weightLabel = svg\n//       .selectAll(\".weight-label\")\n//       .data(links)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"weight-label\")\n//       .attr(\"text-anchor\", \"middle\")\n//       .attr(\"dy\", \"-0.5em\")\n//       .text((d) => d.weight);\n\n//     // Create the nodes\n//     const node = svg\n//       .selectAll(\".node\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"class\", \"node\")\n//       .attr(\"r\", 15)\n//       .attr(\"fill\", (d) => d.color);\n\n//     // Add labels to the nodes\n//     const label = svg\n//       .selectAll(\".label\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"label\")\n//       .attr(\"text-anchor\", \"middle\")\n//       .attr(\"dy\", \".35em\")\n//       .text((d) => d.id);\n\n//     // Add the arrowhead marker to the svg\n//     svg\n//       .append(\"defs\")\n//       .selectAll(\"marker\")\n//       .data([\"arrowhead\"])\n//       .enter()\n//       .append(\"marker\")\n//       .attr(\"id\", \"arrowhead\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 20)\n//       .attr(\"markerWidth\", 8)\n//       .attr(\"markerHeight\", 8)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n//     // Add arrowhead marker to the svg\n//     svg\n//       .append(\"defs\")\n//       .selectAll(\"marker\")\n//       .data([\"arrowhead\"])\n//       .enter()\n//       .append(\"marker\")\n//       .attr(\"id\", \"arrowhead\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 25)\n//       .attr(\"markerWidth\", 8)\n//       .attr(\"markerHeight\", 8)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n//     // Add the text for weight to the edges\n//     const text = svg\n//       .selectAll(\".text\")\n//       .data(links)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"text\")\n//       .text((d) => d.weight);\n\n//     // Update the position of the text on each tick\n//     simulation.on(\"tick\", () => {\n//       link\n//         .attr(\"x1\", (d) => d.source.x)\n//         .attr(\"y1\", (d) => d.source.y)\n//         .attr(\"x2\", (d) => d.target.x)\n//         .attr(\"y2\", (d) => d.target.y);\n\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n\n//       text\n//         .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\n//         .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\n//     });\n//   }, []);\n\n//   return (\n//     <div className=\"form\">\n//       <svg ref={svgRef} width=\"600\" height=\"300\"></svg>\n//     </div>\n//   );\n// }\n\n// export default GraphComponent;\n\nimport React, { useState } from \"react\";\n\nfunction GraphComponent() {\n  // const data = [\n  //   { graphName: \"Graph 1\", stsName: \"Tuning Set 1\" },\n  //   { graphName: \"Graph 2\", stsName: \"Tuning Set 1\" },\n  //   { graphName: \"Graph 3\", stsName: \"Tuning Set 2\" },\n  // ];\n\n  // const renderTableData = () => {\n  //   return data.map((dra, index) => {\n  //     const { graphName, stsName } = dra;\n\n  //     let viewGraph = <button className=\"btn\">View Graph</button>;\n  //     let deleteGraph = <button className=\"btn-red\">Delete Graph</button>;\n\n  //  return (\n  //       <tr key={index}>\n  //         <td>{graphName}</td>\n  //         <td>{stsName}</td>\n  //         <td>\n  //           {viewGraph} &emsp; &emsp; &emsp;{deleteGraph}\n  //         </td>\n  //       </tr>\n  //     );\n  //   });\n  // };\n\n  return;\n  //(\n  //   <div className=\"form\">\n  //     <h4>Graph</h4>\n  //     <br />\n  //     <br />\n  //     <br />\n  //     <table className=\"table\">\n  //       <thead>\n  //         <tr className=\"tr\">\n  //           <th className=\"th\">Graph Name</th>\n  //           <th bgcolor=\"#41afca\">STS Name</th>\n  //           <th bgcolor=\"#41afca\" color=\"#f1f5f9\">\n  //             Actions\n  //           </th>\n  //         </tr>\n  //       </thead>\n  //       <tbody>{renderTableData()}</tbody>\n  //     </table>\n\n  //     <br />\n  //   </div>\n  //   );\n}\n\nexport default GraphComponent;\n"],"mappingsvC,SAASC,cAAcA,CAAA,EAAG;EACxB;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;AACF;AAACC,EAAA,GAjDQD,cAAc;AAmDvB,eAAeA,cAAc;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}