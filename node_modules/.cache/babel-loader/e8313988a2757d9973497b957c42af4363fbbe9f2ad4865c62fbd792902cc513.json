{"ast":null,"code":"var _jsxFileName = \"/Users/mayanktayal/my-app/src/Components/GraphComponent.js\";\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import \"../Css/styles.css\";\n\n// function Graph() {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     const svg = d3.select(svgRef.current);\n\n//     // Define the data for the nodes and links\n//     const nodes = [\n//       { id: \"A\", color: \"red\" },\n//       { id: \"B\", color: \"green\" },\n//       { id: \"C\", color: \"blue\" },\n//       { id: \"D\", color: \"grey\" },\n//       { id: \"E\", color: \"pink\" },\n//     ];\n\n//     const links = [\n//       { source: \"A\", target: \"B\", weight: 1 },\n//       { source: \"B\", target: \"A\", weight: 1 },\n//       { source: \"A\", target: \"C\", weight: 2 },\n//       { source: \"B\", target: \"C\", weight: 3 },\n//       { source: \"A\", target: \"E\", weight: 4 },\n//       { source: \"E\", target: \"D\", weight: 5 },\n//       { source: \"C\", target: \"D\", weight: 6 },\n//     ];\n\n//     // Create the force simulation\n//     const simulation = d3\n//       .forceSimulation(nodes)\n//       .force(\n//         \"link\",\n//         d3\n//           .forceLink(links)\n//           .id((d) => d.id)\n//           .distance(100)\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(-50))\n//       .force(\"center\", d3.forceCenter(300, 150));\n\n//     // Create the links\n//     const link = svg\n//       .selectAll(\".link\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"class\", \"link\")\n//       .attr(\"stroke\", \"black\")\n//       .attr(\"marker-end\", \"url(#arrowhead)\");\n\n//     // Create the nodes\n//     const node = svg\n//       .selectAll(\".node\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"class\", \"node\")\n//       .attr(\"r\", 15)\n//       .attr(\"fill\", (d) => d.color);\n\n//     // Add labels to the nodes\n//     const label = svg\n//       .selectAll(\".label\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"label\")\n//       .attr(\"text-anchor\", \"middle\")\n//       .attr(\"dy\", \".35em\")\n//       .text((d) => d.id);\n\n//     // Add arrowhead marker to the svg\n//     svg\n//       .append(\"defs\")\n//       .selectAll(\"marker\")\n//       .data([\"arrowhead\"])\n//       .enter()\n//       .append(\"marker\")\n//       .attr(\"id\", \"arrowhead\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 25)\n//       .attr(\"markerWidth\", 8)\n//       .attr(\"markerHeight\", 8)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n//     // Update the simulation on each tick\n//     simulation.on(\"tick\", () => {\n//       link\n//         .attr(\"x1\", (d) => d.source.x)\n//         .attr(\"y1\", (d) => d.source.y)\n//         .attr(\"x2\", (d) => d.target.x)\n//         .attr(\"y2\", (d) => d.target.y);\n\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n//     });\n//   }, []);\n\n//   return (\n//     <div className=\"form\">\n//       <svg ref={svgRef} width=\"600\" height=\"300\"></svg>\n//     </div>\n//   );\n// }\n\n// export default Graph;\nimport React from \"react\";\nimport { Graph } from \"react-d3-graph\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myConfig = {\n  nodeHighlightBehavior: true,\n  node: {\n    color: \"lightgreen\",\n    size: 120,\n    highlightStrokeColor: \"blue\"\n  },\n  link: {\n    highlightColor: \"lightblue\"\n  }\n};\nconst data = {\n  nodes: [{\n    id: \"Node 1\"\n  }, {\n    id: \"Node 2\"\n  }, {\n    id: \"Node 3\"\n  }],\n  links: [{\n    source: \"Node 1\",\n    target: \"Node 2\",\n    value: 5\n  }, {\n    source: \"Node 2\",\n    target: \"Node 3\",\n    value: 7\n  }]\n};\nconst GraphComponent = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(Graph, {\n      id: \"graph-id\" // id is mandatory\n      ,\n      data: data,\n      config: myConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","Graph","jsxDEV","_jsxDEV","myConfig","nodeHighlightBehavior","node","color","size","highlightStrokeColor","link","highlightColor","data","nodes","id","links","source","target","value","GraphComponent","className","children","config","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mayanktayal/my-app/src/Components/GraphComponent.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import \"../Css/styles.css\";\n\n// function Graph() {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     const svg = d3.select(svgRef.current);\n\n//     // Define the data for the nodes and links\n//     const nodes = [\n//       { id: \"A\", color: \"red\" },\n//       { id: \"B\", color: \"green\" },\n//       { id: \"C\", color: \"blue\" },\n//       { id: \"D\", color: \"grey\" },\n//       { id: \"E\", color: \"pink\" },\n//     ];\n\n//     const links = [\n//       { source: \"A\", target: \"B\", weight: 1 },\n//       { source: \"B\", target: \"A\", weight: 1 },\n//       { source: \"A\", target: \"C\", weight: 2 },\n//       { source: \"B\", target: \"C\", weight: 3 },\n//       { source: \"A\", target: \"E\", weight: 4 },\n//       { source: \"E\", target: \"D\", weight: 5 },\n//       { source: \"C\", target: \"D\", weight: 6 },\n//     ];\n\n//     // Create the force simulation\n//     const simulation = d3\n//       .forceSimulation(nodes)\n//       .force(\n//         \"link\",\n//         d3\n//           .forceLink(links)\n//           .id((d) => d.id)\n//           .distance(100)\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(-50))\n//       .force(\"center\", d3.forceCenter(300, 150));\n\n//     // Create the links\n//     const link = svg\n//       .selectAll(\".link\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"class\", \"link\")\n//       .attr(\"stroke\", \"black\")\n//       .attr(\"marker-end\", \"url(#arrowhead)\");\n\n//     // Create the nodes\n//     const node = svg\n//       .selectAll(\".node\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"class\", \"node\")\n//       .attr(\"r\", 15)\n//       .attr(\"fill\", (d) => d.color);\n\n//     // Add labels to the nodes\n//     const label = svg\n//       .selectAll(\".label\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"label\")\n//       .attr(\"text-anchor\", \"middle\")\n//       .attr(\"dy\", \".35em\")\n//       .text((d) => d.id);\n\n//     // Add arrowhead marker to the svg\n//     svg\n//       .append(\"defs\")\n//       .selectAll(\"marker\")\n//       .data([\"arrowhead\"])\n//       .enter()\n//       .append(\"marker\")\n//       .attr(\"id\", \"arrowhead\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 25)\n//       .attr(\"markerWidth\", 8)\n//       .attr(\"markerHeight\", 8)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n//     // Update the simulation on each tick\n//     simulation.on(\"tick\", () => {\n//       link\n//         .attr(\"x1\", (d) => d.source.x)\n//         .attr(\"y1\", (d) => d.source.y)\n//         .attr(\"x2\", (d) => d.target.x)\n//         .attr(\"y2\", (d) => d.target.y);\n\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n//     });\n//   }, []);\n\n//   return (\n//     <div className=\"form\">\n//       <svg ref={svgRef} width=\"600\" height=\"300\"></svg>\n//     </div>\n//   );\n// }\n\n// export default Graph;\nimport React from \"react\";\nimport { Graph } from \"react-d3-graph\";\n\nconst myConfig = {\n  nodeHighlightBehavior: true,\n  node: {\n    color: \"lightgreen\",\n    size: 120,\n    highlightStrokeColor: \"blue\",\n  },\n  link: {\n    highlightColor: \"lightblue\",\n  },\n};\n\nconst data = {\n  nodes: [{ id: \"Node 1\" }, { id: \"Node 2\" }, { id: \"Node 3\" }],\n  links: [\n    { source: \"Node 1\", target: \"Node 2\", value: 5 },\n    { source: \"Node 2\", target: \"Node 3\", value: 7 },\n  ],\n};\n\nconst GraphComponent = () => {\n  return (\n    <div className=\"form\">\n      <Graph\n        id=\"graph-id\" // id is mandatory\n        data={data}\n        config={myConfig}\n      />\n    </div>\n  );\n};\n\nexport default GraphComponent;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,QAAQ,GAAG;EACfC,qBAAqB,EAAE,IAAI;EAC3BC,IAAI,EAAE;IACJC,KAAK,EAAE,YAAY;IACnBC,IAAI,EAAE,GAAG;IACTC,oBAAoB,EAAE;EACxB,CAAC;EACDC,IAAI,EAAE;IACJC,cAAc,EAAE;EAClB;AACF,CAAC;AAED,MAAMC,IAAI,GAAG;EACXC,KAAK,EAAE,CAAC;IAAEC,EAAE,EAAE;EAAS,CAAC,EAAE;IAAEA,EAAE,EAAE;EAAS,CAAC,EAAE;IAAEA,EAAE,EAAE;EAAS,CAAC,CAAC;EAC7DC,KAAK,EAAE,CACL;IAAEC,MAAM,EAAE,QAAQ;IAAEC,MAAM,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAE,CAAC,EAChD;IAAEF,MAAM,EAAE,QAAQ;IAAEC,MAAM,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAE,CAAC;AAEpD,CAAC;AAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,oBACEhB,OAAA;IAAKiB,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnBlB,OAAA,CAACF,KAAK;MACJa,EAAE,EAAC,UAAU,CAAC;MAAA;MACdF,IAAI,EAAEA,IAAK;MACXU,MAAM,EAAElB;IAAS;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACjB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV,CAAC;AAACC,EAAA,GAVIR,cAAc;AAYpB,eAAeA,cAAc;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}