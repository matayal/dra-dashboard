{"ast":null,"code":"var _jsxFileName = \"/Users/mayanktayal/my-app/src/Components/GraphComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import \"../Css/styles.css\";\n\n// function Graph() {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     const svg = d3.select(svgRef.current);\n\n//     // Define the data for the nodes and links\n//     const nodes = [\n//       { id: \"A\", color: \"red\" },\n//       { id: \"B\", color: \"green\" },\n//       { id: \"C\", color: \"blue\" },\n//       { id: \"D\", color: \"grey\" },\n//       { id: \"E\", color: \"pink\" },\n//     ];\n\n//     const links = [\n//       { source: \"A\", target: \"B\", weight: 1 },\n//       { source: \"B\", target: \"A\", weight: 1 },\n//       { source: \"A\", target: \"C\", weight: 2 },\n//       { source: \"B\", target: \"C\", weight: 3 },\n//       { source: \"A\", target: \"E\", weight: 4 },\n//       { source: \"E\", target: \"D\", weight: 5 },\n//       { source: \"C\", target: \"D\", weight: 6 },\n//     ];\n\n//     // Create the force simulation\n//     const simulation = d3\n//       .forceSimulation(nodes)\n//       .force(\n//         \"link\",\n//         d3\n//           .forceLink(links)\n//           .id((d) => d.id)\n//           .distance(100)\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(-50))\n//       .force(\"center\", d3.forceCenter(300, 150));\n\n//     // Create the links\n//     const link = svg\n//       .selectAll(\".link\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"class\", \"link\")\n//       .attr(\"stroke\", \"black\")\n//       .attr(\"marker-end\", \"url(#arrowhead)\");\n\n//     // Create the nodes\n//     const node = svg\n//       .selectAll(\".node\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"class\", \"node\")\n//       .attr(\"r\", 15)\n//       .attr(\"fill\", (d) => d.color);\n\n//     // Add labels to the nodes\n//     const label = svg\n//       .selectAll(\".label\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"label\")\n//       .attr(\"text-anchor\", \"middle\")\n//       .attr(\"dy\", \".35em\")\n//       .text((d) => d.id);\n\n//     // Add arrowhead marker to the svg\n//     svg\n//       .append(\"defs\")\n//       .selectAll(\"marker\")\n//       .data([\"arrowhead\"])\n//       .enter()\n//       .append(\"marker\")\n//       .attr(\"id\", \"arrowhead\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 25)\n//       .attr(\"markerWidth\", 8)\n//       .attr(\"markerHeight\", 8)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n//     // Update the simulation on each tick\n//     simulation.on(\"tick\", () => {\n//       link\n//         .attr(\"x1\", (d) => d.source.x)\n//         .attr(\"y1\", (d) => d.source.y)\n//         .attr(\"x2\", (d) => d.target.x)\n//         .attr(\"y2\", (d) => d.target.y);\n\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n//     });\n//   }, []);\n\n//   return (\n//     <div className=\"form\">\n//       <svg ref={svgRef} width=\"600\" height=\"300\"></svg>\n//     </div>\n//   );\n// }\n\n// export default Graph;\nimport React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = _ref => {\n  _s();\n  let {\n    nodes,\n    links\n  } = _ref;\n  const ref = useRef(null);\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n\n    // Define the force simulation\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(links).id(d => d.id)).force(\"charge\", d3.forceManyBody().strength(-50)).force(\"center\", d3.forceCenter(300, 300)).on(\"tick\", () => {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n    });\n\n    // Add the links\n    const link = svg.selectAll(\".link\").data(links).join(\"line\").attr(\"class\", \"link\").attr(\"stroke-width\", d => d.value).attr(\"stroke\", \"black\");\n\n    // Add the nodes\n    const node = svg.selectAll(\".node\").data(nodes).join(\"circle\").attr(\"class\", \"node\").attr(\"r\", 10).attr(\"fill\", \"white\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n    simulation.nodes(nodes).on(\"tick\", () => {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n    });\n    simulation.force(\"link\").links(links);\n  }, [links, nodes]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"600\",\n    height: \"600\",\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        viewBox: \"0 -5 10 10\",\n        refX: \"8\",\n        refY: \"0\",\n        markerWidth: \"6\",\n        markerHeight: \"6\",\n        orient: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M0,-5L10,0L0,5\",\n          fill: \"#000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphComponent, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useRef","useEffect","d3","jsxDEV","_jsxDEV","GraphComponent","_ref","_s","nodes","links","ref","svg","select","current","simulation","forceSimulation","force","forceLink","id","d","forceManyBody","strength","forceCenter","on","link","attr","source","x","y","target","node","selectAll","data","join","value","width","height","children","viewBox","refX","refY","markerWidth","markerHeight","orient","fill","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mayanktayal/my-app/src/Components/GraphComponent.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import \"../Css/styles.css\";\n\n// function Graph() {\n//   const svgRef = useRef();\n\n//   useEffect(() => {\n//     const svg = d3.select(svgRef.current);\n\n//     // Define the data for the nodes and links\n//     const nodes = [\n//       { id: \"A\", color: \"red\" },\n//       { id: \"B\", color: \"green\" },\n//       { id: \"C\", color: \"blue\" },\n//       { id: \"D\", color: \"grey\" },\n//       { id: \"E\", color: \"pink\" },\n//     ];\n\n//     const links = [\n//       { source: \"A\", target: \"B\", weight: 1 },\n//       { source: \"B\", target: \"A\", weight: 1 },\n//       { source: \"A\", target: \"C\", weight: 2 },\n//       { source: \"B\", target: \"C\", weight: 3 },\n//       { source: \"A\", target: \"E\", weight: 4 },\n//       { source: \"E\", target: \"D\", weight: 5 },\n//       { source: \"C\", target: \"D\", weight: 6 },\n//     ];\n\n//     // Create the force simulation\n//     const simulation = d3\n//       .forceSimulation(nodes)\n//       .force(\n//         \"link\",\n//         d3\n//           .forceLink(links)\n//           .id((d) => d.id)\n//           .distance(100)\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(-50))\n//       .force(\"center\", d3.forceCenter(300, 150));\n\n//     // Create the links\n//     const link = svg\n//       .selectAll(\".link\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"class\", \"link\")\n//       .attr(\"stroke\", \"black\")\n//       .attr(\"marker-end\", \"url(#arrowhead)\");\n\n//     // Create the nodes\n//     const node = svg\n//       .selectAll(\".node\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"class\", \"node\")\n//       .attr(\"r\", 15)\n//       .attr(\"fill\", (d) => d.color);\n\n//     // Add labels to the nodes\n//     const label = svg\n//       .selectAll(\".label\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"class\", \"label\")\n//       .attr(\"text-anchor\", \"middle\")\n//       .attr(\"dy\", \".35em\")\n//       .text((d) => d.id);\n\n//     // Add arrowhead marker to the svg\n//     svg\n//       .append(\"defs\")\n//       .selectAll(\"marker\")\n//       .data([\"arrowhead\"])\n//       .enter()\n//       .append(\"marker\")\n//       .attr(\"id\", \"arrowhead\")\n//       .attr(\"viewBox\", \"0 -5 10 10\")\n//       .attr(\"refX\", 25)\n//       .attr(\"markerWidth\", 8)\n//       .attr(\"markerHeight\", 8)\n//       .attr(\"orient\", \"auto\")\n//       .append(\"path\")\n//       .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n//     // Update the simulation on each tick\n//     simulation.on(\"tick\", () => {\n//       link\n//         .attr(\"x1\", (d) => d.source.x)\n//         .attr(\"y1\", (d) => d.source.y)\n//         .attr(\"x2\", (d) => d.target.x)\n//         .attr(\"y2\", (d) => d.target.y);\n\n//       node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n\n//       label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\n//     });\n//   }, []);\n\n//   return (\n//     <div className=\"form\">\n//       <svg ref={svgRef} width=\"600\" height=\"300\"></svg>\n//     </div>\n//   );\n// }\n\n// export default Graph;\nimport React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nconst GraphComponent = ({ nodes, links }) => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n\n    // Define the force simulation\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        \"link\",\n        d3.forceLink(links).id((d) => d.id)\n      )\n      .force(\"charge\", d3.forceManyBody().strength(-50))\n      .force(\"center\", d3.forceCenter(300, 300))\n      .on(\"tick\", () => {\n        link\n          .attr(\"x1\", (d) => d.source.x)\n          .attr(\"y1\", (d) => d.source.y)\n          .attr(\"x2\", (d) => d.target.x)\n          .attr(\"y2\", (d) => d.target.y);\n\n        node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n      });\n\n    // Add the links\n    const link = svg\n      .selectAll(\".link\")\n      .data(links)\n      .join(\"line\")\n      .attr(\"class\", \"link\")\n      .attr(\"stroke-width\", (d) => d.value)\n      .attr(\"stroke\", \"black\");\n\n    // Add the nodes\n    const node = svg\n      .selectAll(\".node\")\n      .data(nodes)\n      .join(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", 10)\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 1);\n\n    simulation.nodes(nodes).on(\"tick\", () => {\n      link\n        .attr(\"x1\", (d) => d.source.x)\n        .attr(\"y1\", (d) => d.source.y)\n        .attr(\"x2\", (d) => d.target.x)\n        .attr(\"y2\", (d) => d.target.y);\n\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\n    });\n\n    simulation.force(\"link\").links(links);\n  }, [links, nodes]);\n\n  return (\n    <svg width=\"600\" height=\"600\" ref={ref}>\n      <defs>\n        <marker\n          id=\"arrowhead\"\n          viewBox=\"0 -5 10 10\"\n          refX=\"8\"\n          refY=\"0\"\n          markerWidth=\"6\"\n          markerHeight=\"6\"\n          orient=\"auto\"\n        >\n          <path d=\"M0,-5L10,0L0,5\" fill=\"#000\" />\n        </marker>\n      </defs>\n    </svg>\n  );\n};\n\nexport default GraphComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}